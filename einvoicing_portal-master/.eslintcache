[{"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\index.js":"1","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\App.js":"2","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\i18n.js":"3","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\Routes.js":"4","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\themes\\theme.js":"5","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todo\\TodoList.js":"6","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\PrivateRoute.js":"7","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todo\\UpdateTodo.js":"8","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\viewers\\ContentViewer.js":"9","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\public\\PartnerRegistration.js":"10","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\authentication\\Login.js":"11","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\layouts\\Layout.js":"12","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\InvoiceList.js":"13","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\Dashboard.js":"14","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\InvoiceQueries.js":"15","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\Knowledge.js":"16","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\Users.js":"17","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\Recipients.js":"18","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\themes\\shadows.js":"19","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\internal\\manager\\PartnerInvite.js":"20","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\internal\\manager\\ViewInvitation.js":"21","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\internal\\manager\\InvitationResponse.js":"22","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\internal\\manager\\Partners.js":"23","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\actions\\Action.js":"24","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\Request.js":"25","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todo\\Todo.js":"26","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\constants\\Constants.js":"27","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\layouts\\NavBar.js":"28","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\BreadCrumb.js":"29","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\layouts\\TopBar.js":"30","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\tab\\TabPanel.js":"31","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\Loader.js":"32","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\public\\form_steps\\formMeta.js":"33","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\dialog\\MessageDialog.js":"34","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\public\\form_steps\\MultiStepButtons.js":"35","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\public\\form_steps\\formValidationSchema.js":"36","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\public\\form_steps\\ReviewDetails.js":"37","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\public\\form_steps\\CompanyDetails.js":"38","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\public\\form_steps\\ContactDetails.js":"39","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todo\\StatusChip.js":"40","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\layouts\\NavItems.js":"41","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\form\\DateField.js":"42","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\form\\InputField.js":"43","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\form\\SelectField.js":"44","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\uploader\\FileUploader.js":"45","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\EnquiryList.js":"46","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\Enquiry_1.js":"47","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\EnqSuccess.js":"48","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\EnquiryView.js":"49","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipient\\NewRecipientForm.js":"50","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipient\\RecipientGrid.js":"51","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipient\\RecipientWeb.js":"52","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipient\\RecipientFTP.js":"53","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipient\\RecipientEmail.js":"54","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\formData.js":"55","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\store\\configureStore.js":"56","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\store\\reducers.js":"57","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirysaga\\slice\\selectors.js":"58","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirysaga\\slice\\index.js":"59","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirysaga\\slice\\saga.js":"60","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\authentication\\slice\\selectors.js":"61","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\authentication\\slice\\index.js":"62","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\authentication\\slice\\saga.js":"63","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirysaga\\Enquirysaga.js":"64","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirylistsaga\\EnquiryListS.js":"65","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\error\\ErrorBoundary.js":"66","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoice\\index.js":"67","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoice\\slice\\selector.js":"68","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoice\\slice\\index.js":"69","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoice\\slice\\saga.js":"70","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\layouts\\slice\\index.js":"71","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\layouts\\slice\\saga.js":"72","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\layouts\\slice\\selectors.js":"73","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\rd\\index.js":"74","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\rd\\slice\\selectors.js":"75","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\rd\\slice\\index.js":"76","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\rd\\slice\\saga.js":"77","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\Recipientform.js":"78","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\slice\\selectors.js":"79","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\slice\\index.js":"80","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\slice\\saga.js":"81","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipient\\Multiselects.js":"82","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\index.js":"83","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\_components\\RecipientNewForm.js":"84","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\form\\_Input.js":"85","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirylistsaga\\slice\\index.js":"86","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirylistsaga\\slice\\saga.js":"87","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirylistsaga\\slice\\selectors.js":"88","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\_components\\RecipientFTP.js":"89","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\_components\\RecipientWeb.js":"90","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\_components\\RecipientEmail.js":"91","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirylistsaga\\_components\\Enquiryviewsaga.js":"92","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirylistsaga\\_components\\Enquiryviewlists.js":"93","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\_components\\RecipientView.js":"94","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\MetaformData.js":"95","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todosaga\\index.js":"96","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todosaga\\slice\\selectors.js":"97","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todosaga\\slice\\index.js":"98","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todosaga\\slice\\saga.js":"99","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todosaga\\_components\\CreateTodo.js":"100","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\vendormapping\\_components\\VendorGrid.js":"101","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\vendormapping\\_components\\Vendorform.js":"102","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\vendormapping\\_components\\VendorSearch.js":"103","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\vendormapping\\slice\\selectors.js":"104","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\vendormapping\\slice\\index.js":"105","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\vendormapping\\slice\\saga.js":"106","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\vendormapping\\MappedVendorsList.js":"107","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todosaga\\_components\\TodoUpdate.js":"108","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\uploader\\GridUploader.js":"109","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\index.js":"110","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\slice\\selector.js":"111","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\SupplierBuyerMetadata.js":"112","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\InvoiceMetadata.js":"113","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\PaymentMetadata.js":"114","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\DispatchShipTo.js":"115","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\EWaybillMetadata.js":"116","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\LineItems.js":"117","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\Attachments.js":"118","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\slice\\index.js":"119","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\SearchRecipient.js":"120","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\_LineItemsGrid.js":"121","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\form\\ReadOnlyInputField.js":"122","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\slice\\saga.js":"123","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\LineItemsEntry.js":"124","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\vendormapping\\_components\\SearchVendor.js":"125","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\internal\\manager\\slice\\selectors.js":"126","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\internal\\manager\\slice\\index.js":"127","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\internal\\manager\\slice\\saga.js":"128","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\Payble.jsx":"129","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\Receivable.js":"130","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoicejsonupload\\index.js":"131","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoicejsonupload\\_components\\GridUploader.js":"132","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoicejsonupload\\_components\\Attachments.js":"133","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoicejsonupload\\slice\\index.js":"134","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoicejsonupload\\slice\\selector.js":"135","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoicejsonupload\\_components\\SearchRecipient.js":"136","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoicejsonupload\\slice\\saga.js":"137","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\index.js":"138","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\index.js":"139","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoice\\index.js":"140","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoice\\slice\\selector.js":"141","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\Attachments.js":"142","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\LineItems.js":"143","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\slice\\selector.js":"144","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\EWaybillMetadata.js":"145","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\PaymentMetadata.js":"146","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\DispatchShipTo.js":"147","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\InvoiceMetadata.js":"148","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\SupplierBuyerMetadata.js":"149","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\Attachments.js":"150","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\DispatchShipTo.js":"151","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\LineItems.js":"152","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\PaymentMetadata.js":"153","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\InvoiceMetadata.js":"154","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\EWaybillMetadata.js":"155","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\SupplierBuyerMetadata.js":"156","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\slice\\selector.js":"157","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoice\\slice\\index.js":"158","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\slice\\index.js":"159","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\SearchRecipient.js":"160","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\_LineItemsGrid.js":"161","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\SearchRecipient.js":"162","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\_LineItemsGrid.js":"163","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\slice\\index.js":"164","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoice\\slice\\saga.js":"165","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\slice\\saga.js":"166","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\LineItemsEntry.js":"167","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\LineItemsEntry.js":"168","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\slice\\saga.js":"169","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\rd\\sample\\index.js":"170","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\rd\\sample\\slice\\selectors.js":"171","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\rd\\sample\\slice\\index.js":"172","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\rd\\sample\\slice\\saga.js":"173","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\InvoiceQueries.js":"174","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\public\\samplesteps\\Steps.js":"175"},{"size":638,"mtime":1615966995950,"results":"176","hashOfConfig":"177"},{"size":521,"mtime":1615968348564,"results":"178","hashOfConfig":"177"},{"size":530,"mtime":1615185703168,"results":"179","hashOfConfig":"177"},{"size":11022,"mtime":1617973489389,"results":"180","hashOfConfig":"177"},{"size":2816,"mtime":1617117361715,"results":"181","hashOfConfig":"177"},{"size":26528,"mtime":1616653840162,"results":"182","hashOfConfig":"177"},{"size":1666,"mtime":1615876727588,"results":"183","hashOfConfig":"177"},{"size":20026,"mtime":1616594643784,"results":"184","hashOfConfig":"177"},{"size":1639,"mtime":1615185703322,"results":"185","hashOfConfig":"177"},{"size":9109,"mtime":1615185703279,"results":"186","hashOfConfig":"177"},{"size":5467,"mtime":1616506986872,"results":"187","hashOfConfig":"177"},{"size":5287,"mtime":1617171625813,"results":"188","hashOfConfig":"177"},{"size":257,"mtime":1615185703271,"results":"189","hashOfConfig":"177"},{"size":248,"mtime":1617859445777,"results":"190","hashOfConfig":"177"},{"size":263,"mtime":1615185703272,"results":"191","hashOfConfig":"177"},{"size":248,"mtime":1615185703272,"results":"192","hashOfConfig":"177"},{"size":224,"mtime":1615185703275,"results":"193","hashOfConfig":"177"},{"size":245,"mtime":1615185703275,"results":"194","hashOfConfig":"177"},{"size":1674,"mtime":1615185703317,"results":"195","hashOfConfig":"177"},{"size":12794,"mtime":1617117102896,"results":"196","hashOfConfig":"177"},{"size":18178,"mtime":1617117078713,"results":"197","hashOfConfig":"177"},{"size":655,"mtime":1615185703278,"results":"198","hashOfConfig":"177"},{"size":4951,"mtime":1617959579009,"results":"199","hashOfConfig":"177"},{"size":265,"mtime":1615876787272,"results":"200","hashOfConfig":"177"},{"size":4970,"mtime":1615984841038,"results":"201","hashOfConfig":"177"},{"size":16525,"mtime":1616652875459,"results":"202","hashOfConfig":"177"},{"size":2304,"mtime":1617866653440,"results":"203","hashOfConfig":"177"},{"size":1994,"mtime":1615882358405,"results":"204","hashOfConfig":"177"},{"size":3294,"mtime":1617866590928,"results":"205","hashOfConfig":"177"},{"size":5419,"mtime":1617780067756,"results":"206","hashOfConfig":"177"},{"size":391,"mtime":1615185703320,"results":"207","hashOfConfig":"177"},{"size":407,"mtime":1615185703318,"results":"208","hashOfConfig":"177"},{"size":2799,"mtime":1615185703281,"results":"209","hashOfConfig":"177"},{"size":904,"mtime":1615185703265,"results":"210","hashOfConfig":"177"},{"size":1130,"mtime":1615185703280,"results":"211","hashOfConfig":"177"},{"size":3205,"mtime":1615185703281,"results":"212","hashOfConfig":"177"},{"size":6702,"mtime":1615185703281,"results":"213","hashOfConfig":"177"},{"size":3527,"mtime":1615185703280,"results":"214","hashOfConfig":"177"},{"size":5624,"mtime":1615185703280,"results":"215","hashOfConfig":"177"},{"size":1069,"mtime":1615185703269,"results":"216","hashOfConfig":"177"},{"size":4841,"mtime":1617172538123,"results":"217","hashOfConfig":"177"},{"size":692,"mtime":1617117294233,"results":"218","hashOfConfig":"177"},{"size":1374,"mtime":1617117273002,"results":"219","hashOfConfig":"177"},{"size":2001,"mtime":1617117253120,"results":"220","hashOfConfig":"177"},{"size":3910,"mtime":1615185703321,"results":"221","hashOfConfig":"177"},{"size":2237,"mtime":1615441803697,"results":"222","hashOfConfig":"177"},{"size":9180,"mtime":1615814114460,"results":"223","hashOfConfig":"177"},{"size":787,"mtime":1615185703171,"results":"224","hashOfConfig":"177"},{"size":7927,"mtime":1616157357266,"results":"225","hashOfConfig":"177"},{"size":13363,"mtime":1616076304564,"results":"226","hashOfConfig":"177"},{"size":2602,"mtime":1616136604413,"results":"227","hashOfConfig":"177"},{"size":4346,"mtime":1615962150923,"results":"228","hashOfConfig":"177"},{"size":5088,"mtime":1615962136213,"results":"229","hashOfConfig":"177"},{"size":3408,"mtime":1615962109268,"results":"230","hashOfConfig":"177"},{"size":569,"mtime":1616486243753,"results":"231","hashOfConfig":"177"},{"size":686,"mtime":1615966438592,"results":"232","hashOfConfig":"177"},{"size":311,"mtime":1617779350950,"results":"233","hashOfConfig":"177"},{"size":901,"mtime":1617191403201,"results":"234","hashOfConfig":"177"},{"size":1282,"mtime":1617191371762,"results":"235","hashOfConfig":"177"},{"size":1362,"mtime":1616508056181,"results":"236","hashOfConfig":"177"},{"size":599,"mtime":1615966886972,"results":"237","hashOfConfig":"177"},{"size":1307,"mtime":1615966909367,"results":"238","hashOfConfig":"177"},{"size":750,"mtime":1615374112744,"results":"239","hashOfConfig":"177"},{"size":8603,"mtime":1617798866049,"results":"240","hashOfConfig":"177"},{"size":2381,"mtime":1617875532926,"results":"241","hashOfConfig":"177"},{"size":655,"mtime":1615876863373,"results":"242","hashOfConfig":"177"},{"size":5603,"mtime":1617866472671,"results":"243","hashOfConfig":"177"},{"size":431,"mtime":1616476318992,"results":"244","hashOfConfig":"177"},{"size":1095,"mtime":1616476376354,"results":"245","hashOfConfig":"177"},{"size":623,"mtime":1617111610926,"results":"246","hashOfConfig":"177"},{"size":1515,"mtime":1617171724644,"results":"247","hashOfConfig":"177"},{"size":406,"mtime":1617171715861,"results":"248","hashOfConfig":"177"},{"size":800,"mtime":1617171697933,"results":"249","hashOfConfig":"177"},{"size":2320,"mtime":1615880058166,"results":"250","hashOfConfig":"177"},{"size":659,"mtime":1615880071639,"results":"251","hashOfConfig":"177"},{"size":1676,"mtime":1615880098847,"results":"252","hashOfConfig":"177"},{"size":946,"mtime":1615880091467,"results":"253","hashOfConfig":"177"},{"size":10884,"mtime":1616050521042,"results":"254","hashOfConfig":"177"},{"size":1998,"mtime":1617195727645,"results":"255","hashOfConfig":"177"},{"size":3052,"mtime":1617259964269,"results":"256","hashOfConfig":"177"},{"size":4406,"mtime":1617259025759,"results":"257","hashOfConfig":"177"},{"size":3968,"mtime":1615964457080,"results":"258","hashOfConfig":"177"},{"size":3312,"mtime":1616595319035,"results":"259","hashOfConfig":"177"},{"size":17540,"mtime":1617956046237,"results":"260","hashOfConfig":"177"},{"size":674,"mtime":1617862524000,"results":"261","hashOfConfig":"177"},{"size":3793,"mtime":1617962738344,"results":"262","hashOfConfig":"177"},{"size":3236,"mtime":1617964292839,"results":"263","hashOfConfig":"177"},{"size":1278,"mtime":1617962764624,"results":"264","hashOfConfig":"177"},{"size":976,"mtime":1617956091288,"results":"265","hashOfConfig":"177"},{"size":1167,"mtime":1617956175657,"results":"266","hashOfConfig":"177"},{"size":779,"mtime":1617955373175,"results":"267","hashOfConfig":"177"},{"size":7538,"mtime":1617884941531,"results":"268","hashOfConfig":"177"},{"size":1978,"mtime":1617963672272,"results":"269","hashOfConfig":"177"},{"size":2325,"mtime":1616508324695,"results":"270","hashOfConfig":"177"},{"size":376,"mtime":1616486137919,"results":"271","hashOfConfig":"177"},{"size":10649,"mtime":1617780018005,"results":"272","hashOfConfig":"177"},{"size":2176,"mtime":1617199115412,"results":"273","hashOfConfig":"177"},{"size":5618,"mtime":1617779955475,"results":"274","hashOfConfig":"177"},{"size":5936,"mtime":1617794445522,"results":"275","hashOfConfig":"177"},{"size":13359,"mtime":1617798723899,"results":"276","hashOfConfig":"177"},{"size":2759,"mtime":1616742425785,"results":"277","hashOfConfig":"177"},{"size":15320,"mtime":1617870544777,"results":"278","hashOfConfig":"177"},{"size":3245,"mtime":1617779522075,"results":"279","hashOfConfig":"177"},{"size":1752,"mtime":1617779441761,"results":"280","hashOfConfig":"177"},{"size":3455,"mtime":1617779501160,"results":"281","hashOfConfig":"177"},{"size":3828,"mtime":1617794636193,"results":"282","hashOfConfig":"177"},{"size":3024,"mtime":1617779584266,"results":"283","hashOfConfig":"177"},{"size":17069,"mtime":1617798744034,"results":"284","hashOfConfig":"177"},{"size":3932,"mtime":1617117217587,"results":"285","hashOfConfig":"177"},{"size":7584,"mtime":1617348492277,"results":"286","hashOfConfig":"177"},{"size":1243,"mtime":1617348335155,"results":"287","hashOfConfig":"177"},{"size":6709,"mtime":1617348410050,"results":"288","hashOfConfig":"177"},{"size":8382,"mtime":1617348449427,"results":"289","hashOfConfig":"177"},{"size":3678,"mtime":1617348425363,"results":"290","hashOfConfig":"177"},{"size":5161,"mtime":1617348464973,"results":"291","hashOfConfig":"177"},{"size":2688,"mtime":1617348456739,"results":"292","hashOfConfig":"177"},{"size":857,"mtime":1617348442450,"results":"293","hashOfConfig":"177"},{"size":800,"mtime":1617348471726,"results":"294","hashOfConfig":"177"},{"size":2988,"mtime":1617348351995,"results":"295","hashOfConfig":"177"},{"size":3287,"mtime":1617348418762,"results":"296","hashOfConfig":"177"},{"size":3417,"mtime":1617348477826,"results":"297","hashOfConfig":"177"},{"size":746,"mtime":1617347609599,"results":"298","hashOfConfig":"177"},{"size":2035,"mtime":1617348342870,"results":"299","hashOfConfig":"177"},{"size":21521,"mtime":1617348433399,"results":"300","hashOfConfig":"177"},{"size":6176,"mtime":1617870154532,"results":"301","hashOfConfig":"177"},{"size":437,"mtime":1617779809829,"results":"302","hashOfConfig":"177"},{"size":1124,"mtime":1617779825334,"results":"303","hashOfConfig":"177"},{"size":672,"mtime":1617779818842,"results":"304","hashOfConfig":"177"},{"size":240,"mtime":1617857718767,"results":"305","hashOfConfig":"177"},{"size":385,"mtime":1617859500570,"results":"306","hashOfConfig":"177"},{"size":1627,"mtime":1617780702000,"results":"307","hashOfConfig":"177"},{"size":5177,"mtime":1617787108000,"results":"308","hashOfConfig":"177"},{"size":5116,"mtime":1617780724000,"results":"309","hashOfConfig":"177"},{"size":3319,"mtime":1617768056000,"results":"310","hashOfConfig":"177"},{"size":1429,"mtime":1617733824000,"results":"311","hashOfConfig":"177"},{"size":3329,"mtime":1617867651645,"results":"312","hashOfConfig":"177"},{"size":2717,"mtime":1617768224000,"results":"313","hashOfConfig":"177"},{"size":8691,"mtime":1617973211724,"results":"314","hashOfConfig":"177"},{"size":7593,"mtime":1617628063386,"results":"315","hashOfConfig":"177"},{"size":9559,"mtime":1617971845329,"results":"316","hashOfConfig":"177"},{"size":429,"mtime":1616239857106,"results":"317","hashOfConfig":"177"},{"size":803,"mtime":1617627804769,"results":"318","hashOfConfig":"177"},{"size":857,"mtime":1616654410498,"results":"319","hashOfConfig":"177"},{"size":1243,"mtime":1616666598144,"results":"320","hashOfConfig":"177"},{"size":2694,"mtime":1617627928036,"results":"321","hashOfConfig":"177"},{"size":3684,"mtime":1617627910175,"results":"322","hashOfConfig":"177"},{"size":5167,"mtime":1617627815928,"results":"323","hashOfConfig":"177"},{"size":8391,"mtime":1617627848117,"results":"324","hashOfConfig":"177"},{"size":6715,"mtime":1617627894200,"results":"325","hashOfConfig":"177"},{"size":1100,"mtime":1617627971818,"results":"326","hashOfConfig":"177"},{"size":4984,"mtime":1617627780636,"results":"327","hashOfConfig":"177"},{"size":857,"mtime":1616654410498,"results":"328","hashOfConfig":"177"},{"size":3515,"mtime":1617627745718,"results":"329","hashOfConfig":"177"},{"size":8858,"mtime":1617627717659,"results":"330","hashOfConfig":"177"},{"size":2549,"mtime":1617627761362,"results":"331","hashOfConfig":"177"},{"size":6490,"mtime":1617627736398,"results":"332","hashOfConfig":"177"},{"size":1243,"mtime":1616666598144,"results":"333","hashOfConfig":"177"},{"size":1095,"mtime":1616239847608,"results":"334","hashOfConfig":"177"},{"size":2988,"mtime":1616663007473,"results":"335","hashOfConfig":"177"},{"size":3287,"mtime":1616735578851,"results":"336","hashOfConfig":"177"},{"size":3417,"mtime":1616751147877,"results":"337","hashOfConfig":"177"},{"size":3303,"mtime":1617362261526,"results":"338","hashOfConfig":"177"},{"size":3417,"mtime":1616751147877,"results":"339","hashOfConfig":"177"},{"size":2988,"mtime":1616663007473,"results":"340","hashOfConfig":"177"},{"size":627,"mtime":1617693344652,"results":"341","hashOfConfig":"177"},{"size":2041,"mtime":1617627686424,"results":"342","hashOfConfig":"177"},{"size":21524,"mtime":1617627947605,"results":"343","hashOfConfig":"177"},{"size":21524,"mtime":1617627750752,"results":"344","hashOfConfig":"177"},{"size":2041,"mtime":1617627668001,"results":"345","hashOfConfig":"177"},{"size":6620,"mtime":1617967338446,"results":"346","hashOfConfig":"177"},{"size":900,"mtime":1617967336702,"results":"347","hashOfConfig":"177"},{"size":1275,"mtime":1617967333089,"results":"348","hashOfConfig":"177"},{"size":1350,"mtime":1617967334802,"results":"349","hashOfConfig":"177"},{"size":1952,"mtime":1617973292507,"results":"350","hashOfConfig":"177"},{"size":168,"mtime":1617973450244,"results":"351","hashOfConfig":"177"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},"1ml14wb",{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"354"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"354"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"354"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"354"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"354"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"354"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"354"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"354"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441","usedDeprecatedRules":"354"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"354"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"354"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"457"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460","usedDeprecatedRules":"461"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"354"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467","usedDeprecatedRules":"354"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470","usedDeprecatedRules":"354"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"473","usedDeprecatedRules":"354"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"354"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"479","usedDeprecatedRules":"354"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"354"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"503","usedDeprecatedRules":"354"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506","usedDeprecatedRules":"354"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"513"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"513"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"513"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"526","usedDeprecatedRules":"354"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"354"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"536","usedDeprecatedRules":"537"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"544","usedDeprecatedRules":"354"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"547","usedDeprecatedRules":"354"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"550","usedDeprecatedRules":"354"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"561","messages":"562","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"563","messages":"564","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"565","messages":"566","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"567","messages":"568","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569","usedDeprecatedRules":"354"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"572","messages":"573","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"574","usedDeprecatedRules":"354"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"354"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"354"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"354"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"354"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"597","usedDeprecatedRules":"354"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"602","usedDeprecatedRules":"354"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"605","usedDeprecatedRules":"354"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608","usedDeprecatedRules":"354"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"611","usedDeprecatedRules":"354"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"614","usedDeprecatedRules":"354"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"513"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"513"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"622","usedDeprecatedRules":"513"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"513"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"628","usedDeprecatedRules":"513"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"631","usedDeprecatedRules":"513"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"634","usedDeprecatedRules":"513"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"513"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"513"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"513"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"644","usedDeprecatedRules":"513"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"513"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"513"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"653","usedDeprecatedRules":"513"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"656","usedDeprecatedRules":"354"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665","usedDeprecatedRules":"354"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670","usedDeprecatedRules":"354"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"673","usedDeprecatedRules":"354"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"676","usedDeprecatedRules":"354"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"679","usedDeprecatedRules":"354"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"682","messages":"683","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"684","usedDeprecatedRules":"354"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"689","messages":"690","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"691","usedDeprecatedRules":"354"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"694","messages":"695","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"354"},{"filePath":"700","messages":"701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"702","messages":"703","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"704","usedDeprecatedRules":"354"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"707","usedDeprecatedRules":"354"},{"filePath":"708","messages":"709","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"710","usedDeprecatedRules":"354"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"713","usedDeprecatedRules":"354"},{"filePath":"714","messages":"715","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"716","usedDeprecatedRules":"354"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"354"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"727","usedDeprecatedRules":"354"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"738","messages":"739","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"644","usedDeprecatedRules":"354"},{"filePath":"740","messages":"741","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"742","messages":"743","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"744","usedDeprecatedRules":"354"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"747","messages":"748","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"749","messages":"750","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"751","messages":"752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"753","messages":"754","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"755","usedDeprecatedRules":"354"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"755","usedDeprecatedRules":"354"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"762","messages":"763","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"764","messages":"765","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"766","messages":"767","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"768","messages":"769","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"770","messages":"771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\index.js",[],["772","773"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\App.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\i18n.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\Routes.js",["774","775","776","777","778","779"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\themes\\theme.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todo\\TodoList.js",["780","781","782","783","784","785","786","787","788","789","790","791","792","793","794","795","796","797","798","799","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819"],"import Grid from '@material-ui/core/Grid';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { Form, Formik } from 'formik'\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nimport Star from '@material-ui/icons/Star';\r\nimport Error from '@material-ui/icons/Error';\r\nimport Delete from '@material-ui/icons/Delete';\r\nimport Done from '@material-ui/icons/Done';\r\nimport CheckBox from '@material-ui/icons/CheckBox';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Button, Checkbox, Input } from '@material-ui/core';\r\nimport { invokeAPIGetRequest, invokeAPIRequest } from '../../../../Request';\r\nimport { TODO, TODO_PRIORITY } from '../../../constants/Constants';\r\nimport { TODO_STATUS } from '../../../constants/Constants';\r\nimport { TODO_FLAG } from '../../../constants/Constants';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Todo from './Todo';\r\n// import UpdateTodo from './UpdateTodo';\r\nimport \"./todo.css\";\r\nimport * as moment from 'moment';\r\nimport * as Yup from 'yup';\r\nimport StatusChip from \"./StatusChip\";\r\nimport { Close, ListAlt, LowPriorityRounded, NotInterested, PriorityHighRounded, StarBorder } from '@material-ui/icons';\r\nimport $ from 'jquery';\r\nimport { Navigate, useNavigate } from 'react-router-dom';\r\nimport {\r\n    TextField,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n} from '@material-ui/core';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n// import CreateTodo from './CreateTodo';\r\nconst useStyles = makeStyles((theme) => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    strikeThroughtextStyle: {\r\n        textDecorationLine: 'line-through',\r\n    },\r\n}));\r\nconst StarredCheckbox = withStyles({\r\n    root: {\r\n        color: \"Black\",\r\n        '&$checked': {\r\n            color: \"#FFD740\",\r\n        },\r\n    },\r\n    checked: {},\r\n})((props) => <Checkbox color=\"default\" {...props} />);\r\nfunction TodoList(props) {\r\n  \r\n    const [page, setPage] = React.useState(0);\r\n    const rowclickval = useState([]);\r\n    const [tid, setTid] = useState(0);\r\n    const [priorityval, setPriorityval] = useState({ priority: 'high' });\r\n    const starred = useState({\r\n        flag: false,\r\n    });\r\n    const [conform, setConform] = useState(false);\r\n    const classes = useStyles();\r\n    const [value, setValue] = useState(\"All\");\r\n    const [rowData, setRowData] = useState([]);\r\n    const [responseData, setResponseData] = useState()\r\n    const [rows, setRows] = useState([]);\r\n    const [selectedRow, setSelectedRow] = useState({})\r\n\r\n    var stateVariables = useState({\r\n        title: \"\",\r\n        description: \"\",\r\n    })\r\n    const data = [];\r\n    const { t } = useTranslation();\r\n    let temptemp;\r\n    let tempArray;\r\n    let tempId;\r\n    const navigate = useNavigate();\r\n    let tempSelectedData;\r\n    var today = new Date();\r\n    var datedate = moment(today).format('YYYY-MM-DD');\r\n    const handleChangestar = (event) => {\r\n\r\n        console.log(\"STARRRRRRRRRRed\", event.target.checked)\r\n        console.log(\"STA\", starred)\r\n\r\n    };\r\n    const columns = [\r\n        {\r\n            field: 'flag',\r\n            headerName: 'Flag',\r\n            width: 50,\r\n            disableClickEventBubbling: true,\r\n            renderCell: (params) => {\r\n                return (\r\n                    params.row.flag === \"true\" ?\r\n                        <StarredCheckbox\r\n                            color=\"primary\"\r\n                            onChange={\r\n                                async (event) => {\r\n                                    try {\r\n\r\n                                        console.log(params)\r\n                                        const url = TODO + \"/\";\r\n                                        let _starred = await invokeAPIRequest(url + params.row.taskRefId, {\r\n                                            title: params.row.title,\r\n                                            description: params.row.description,\r\n                                            assignedTo: params.row.assignedTo,\r\n                                            priority: params.row.priority,\r\n                                            dueDate: params.row.dueDate,\r\n                                            flag: event.target.checked,\r\n                                            status: params.row.status\r\n                                        },\r\n                                            true, \"post\");\r\n                                        navigate('/app/partner_manager/todo', { replace: true })\r\n                                        console.log(_starred)\r\n\r\n\r\n                                    } catch (error) {\r\n                                        console.log(error)\r\n                                    }\r\n                                }\r\n                            }\r\n                            label=\"flag\"\r\n                            name=\"flag\"\r\n                            checked={params.row.flag}\r\n                            inputProps={{ 'aria-label': 'secondary checkbox', 'spacing': '6' }}\r\n                            checkedIcon={<Star />}\r\n                            icon={<StarBorder />}\r\n\r\n                        /> :\r\n                        params.row.flag === \"false\" ?\r\n                            <StarredCheckbox\r\n                                color=\"primary\"\r\n                                onChange={async (event) => {\r\n                                    try {\r\n                                        console.log(params.row.flag)\r\n                                        const url = TODO + \"/\";\r\n                                        let _starred = await invokeAPIRequest(url + params.row.taskRefId, {\r\n                                            title: params.row.title,\r\n                                            description: params.row.description,\r\n                                            assignedTo: params.row.assignedTo,\r\n                                            priority: params.row.priority,\r\n                                            dueDate: params.row.dueDate,\r\n                                            flag: event.target.checked,\r\n                                            status: params.row.status\r\n                                        },\r\n                                            true, \"post\");\r\n                                        navigate('/app/partner_manager/todo', { replace: true })\r\n                                        console.log(_starred)\r\n\r\n\r\n                                    } catch (error) {\r\n                                        console.log(error)\r\n                                    }\r\n                                }}\r\n                                label=\"flag\"\r\n                                name=\"flag\"\r\n                                checked={starred.flag}\r\n                                inputProps={{ 'aria-label': 'secondary checkbox', 'spacing': '6' }}\r\n                                checkedIcon={<Star />}\r\n                                icon={<StarBorder />}\r\n                            /> :\r\n                            <StarredCheckbox\r\n                                color=\"primary\"\r\n                                onChange={async (event) => {\r\n                                    try {\r\n                                        const url = TODO + \"/\";\r\n                                        let _starred = await invokeAPIRequest(url + params.row.taskRefId, {\r\n                                            title: params.row.title,\r\n                                            description: params.row.description,\r\n                                            assignedTo: params.row.assignedTo,\r\n                                            priority: params.row.priority,\r\n                                            dueDate: params.row.dueDate,\r\n                                            flag: event.target.checked,\r\n                                            status: params.row.status\r\n                                        },\r\n                                            true, \"post\");\r\n                                        navigate('/app/partner_manager/todo', { replace: true })\r\n                                        console.log(_starred)\r\n\r\n                                    } catch (error) {\r\n                                        console.log(error)\r\n                                    }\r\n                                }}\r\n                                label=\"flag\"\r\n                                name=\"flag\"\r\n                                checked={params.row.flag}\r\n                                inputProps={{ 'aria-label': 'secondary checkbox', 'spacing': '6' }}\r\n                                checkedIcon={<Star />}\r\n                                icon={<StarBorder />}\r\n                            />\r\n                )\r\n            }\r\n        },\r\n        {\r\n            field: 'title',\r\n            headerName: 'Task Title',\r\n            width: 1200,\r\n            renderCell: (params) => {\r\n                return (\r\n                    params.row.status === \"Completed\" ?\r\n                        <Typography style={{ textDecoration: \"line-through\", color: \"green\" }}>{params.row.title}<p>{params.row.description}</p></Typography> :\r\n                        params.row.status === \"Deleted\" ?\r\n                            <Typography style={{ textDecoration: \"line-through\", color: \"red\" }}>{params.row.title}<p >{params.row.description}</p></Typography> :\r\n                            <Typography >{params.row.title}<p >{params.row.description}</p></Typography>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            field: 'priority', headerName: 'Priority', width: 50,\r\n            renderCell: (params) => {\r\n                return (\r\n                    params.row.priority === \"high\" ?\r\n                        <Typography style={{ backgroundColor: \"#ef9a9a\", color: \"#263238\" }}>{<PriorityHighRounded />}</Typography> :\r\n                        params.row.priority === \"medium\" ?\r\n                            <Typography style={{ backgroundColor: \"#FFF59D\", color: \"#263238\" }}>{<PriorityHighRounded />}</Typography> :\r\n                            <Typography style={{ backgroundColor: \"#C5E1A5\", color: \"#263238\", }}>{<PriorityHighRounded />}</Typography>\r\n                )\r\n            }\r\n\r\n        },\r\n    ];\r\n    const handleRowSelection = (e) => {\r\n        const selectedRows = e.rowIds[0];\r\n        tempArray = rows;\r\n        tempId = selectedRows;\r\n        console.log(\"SEEEEEE.....EEEEEEl\", tempId)\r\n        const arr = tempArray.map((srow) => {\r\n            if (srow.id == tempId) {\r\n                temptemp = srow\r\n            }\r\n        });\r\n    }\r\n    const handleUpdateClose = () => {\r\n        $('.EditUpdateTask').toggleClass(\"open\")\r\n    }\r\n    const handleAddTask = (e) => {\r\n        $('.CreateNewTask').toggleClass(\"open\")\r\n    }\r\n    const handleCreateClose = () => {\r\n        $('.CreateNewTask').toggleClass(\"open\")\r\n    }\r\n    const _validationSchema = Yup.object().shape({\r\n        title: Yup.string().max(75).required(('Title Require')),\r\n        description: Yup.string().max(250).required(('Description Require')),\r\n        assignedTo: Yup.string().max(50).required(('Assign To Require')),\r\n        priority: Yup.string().required(('Priority Require')),\r\n        dueDate: Yup.string().required(('Due Date Require')),\r\n    })\r\n    useEffect(async () => {\r\n        try {\r\n            $('.btn-div').hide()\r\n            console.log(\"USEEEEEEEffect\")\r\n            const _response = await invokeAPIGetRequest(TODO,true);\r\n            setResponseData(_response.results);\r\n            console.log(_response);\r\n            for (let i = 1; i <= _response.results.length; i++) {\r\n                data.push({\r\n                    id: i, taskRefId: _response.results[i - 1].taskRefId,\r\n                    title: _response.results[i - 1].title,\r\n                    assignedTo: _response.results[i - 1].assignedTo,\r\n                    status: _response.results[i - 1].status,\r\n                    flag: _response.results[i - 1].flag,\r\n                    description: _response.results[i - 1].description,\r\n                    priority: _response.results[i - 1].priority,\r\n                    dueDate: _response.results[i - 1].dueDate\r\n                })\r\n            }\r\n            setRows(data);\r\n            console.log(data)\r\n        } catch (error) {\r\n       //     console.log(error)\r\n        }\r\n    }, [conform])\r\n    const todo = {\r\n        title: '',\r\n        description: '',\r\n        assignedTo: '',\r\n        priority: '',\r\n        flag: '',\r\n        dueDate: datedate, // YYYY-MM-DD\r\n        status: \"Inprogress\"\r\n    }\r\n    const displayPriority = value => async () => {\r\n\r\n        console.log(value)\r\n        try {\r\n            const _priority = await invokeAPIGetRequest(TODO_PRIORITY + value,\r\n                true);\r\n            console.log(_priority)\r\n            for (let i = 1; i <= _priority.results.length; i++) {\r\n                data.push({\r\n                    id: i, taskRefId: _priority.results[i - 1].taskRefId,\r\n                    title: _priority.results[i - 1].title,\r\n                    assignedTo: _priority.results[i - 1].assignedTo,\r\n                    status: _priority.results[i - 1].status,\r\n                    flag: _priority.results[i - 1].flag,\r\n                    description: _priority.results[i - 1].description,\r\n                    priority: _priority.results[i - 1].priority,\r\n                    dueDate: _priority.results[i - 1].dueDate\r\n                })\r\n            }\r\n            setRows(data);\r\n            // view=\"true\";\r\n        }\r\n        catch (error) {\r\n        }\r\n    }\r\n    const getSelectedDataRow = (value) => {\r\n\r\n        //   stateVariables.title=value.title;\r\n        //   console.log(stateVariables.title);\r\n        $('.EditUpdateTask').toggleClass(\"open\")\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Grid container  >\r\n                {/* EditTask */}\r\n                {/* //called  update todo component here */}\r\n                <div className=\"EditUpdateTask\">\r\n\r\n                </div>\r\n                {/* EditTask end */}\r\n                {/* AddTask */}\r\n                <div className=\"CreateNewTask\">\r\n                    <Todo/>\r\n                    {/* <CreateTodo/> */}\r\n                    \r\n\r\n                </div>\r\n                {/* AddTask end */}\r\n\r\n                <Grid item xs={12} className=\"todoRight\">\r\n                    <div className=\"search_wrapper\">\r\n                        <input type=\"text\" id=\"Search_cntrl\" placeholder=\"Search...\" />\r\n                        <Button color=\"primary\" variant=\"contained\"\r\n                            onClick={handleAddTask}\r\n                        >Add Task</Button>\r\n                        <Select displayEmpty label=\"action\" color=\"action\" style={{ minWidth: \"200px\" }}>\r\n                            <MenuItem aria-label=\"None\" disabled key={1} >Select </MenuItem>\r\n\r\n                            <MenuItem value=\"All\" key={2}\r\n                                onClick={async () => {\r\n                                    try {\r\n                                        $('.btn-div').hide()\r\n                                        const _flag = await invokeAPIGetRequest(TODO,\r\n                                            true);\r\n                                        console.log(_flag.results)\r\n                                        for (let i = 1; i <= _flag.results.length; i++) {\r\n                                            data.push({\r\n                                                id: i, taskRefId: _flag.results[i - 1].taskRefId,\r\n                                                title: _flag.results[i - 1].title,\r\n                                                assignedTo: _flag.results[i - 1].assignedTo,\r\n                                                status: _flag.results[i - 1].status,\r\n                                                flag: _flag.results[i - 1].flag,\r\n                                                description: _flag.results[i - 1].description,\r\n                                                priority: _flag.results[i - 1].priority,\r\n                                                dueDate: _flag.results[i - 1].dueDate\r\n                                            })\r\n                                        }\r\n                                        setRows(data);\r\n                                    }\r\n                                    catch (error) {\r\n                                    }\r\n                                }}\r\n                            ><ListAlt />&nbsp;&nbsp;All</MenuItem>\r\n                            <MenuItem value=\"flag\" key={3}\r\n                                onClick={async () => {\r\n                                    try {\r\n                                        $('.btn-div').hide()\r\n                                        const _flag = await invokeAPIGetRequest(TODO_FLAG + \"true\",\r\n                                            true);\r\n                                        console.log(_flag)\r\n                                        for (let i = 1; i <= _flag.results.length; i++) {\r\n                                            data.push({\r\n                                                id: i, taskRefId: _flag.results[i - 1].taskRefId,\r\n                                                title: _flag.results[i - 1].title,\r\n                                                assignedTo: _flag.results[i - 1].assignedTo,\r\n                                                status: _flag.results[i - 1].status,\r\n                                                flag: _flag.results[i - 1].flag,\r\n                                                description: _flag.results[i - 1].description,\r\n                                                priority: _flag.results[i - 1].priority,\r\n                                                dueDate: _flag.results[i - 1].dueDate\r\n                                            })\r\n                                        }\r\n                                        setRows(data);\r\n                                    }\r\n                                    catch (error) {\r\n                                    }\r\n                                }}\r\n                            ><Star />&nbsp;&nbsp;Starred\r\n                                            </MenuItem>\r\n                            <MenuItem value=\"priority\" key={4}\r\n                                onClick={async () => {\r\n                                    try {\r\n                                        $('.btn-div').show()\r\n                                        const _priority = await invokeAPIGetRequest(TODO_PRIORITY + \"medium\",\r\n                                            true);\r\n                                        console.log(_priority)\r\n                                        for (let i = 1; i <= _priority.results.length; i++) {\r\n                                            data.push({\r\n                                                id: i, taskRefId: _priority.results[i - 1].taskRefId,\r\n                                                title: _priority.results[i - 1].title,\r\n                                                assignedTo: _priority.results[i - 1].assignedTo,\r\n                                                status: _priority.results[i - 1].status,\r\n                                                flag: _priority.results[i - 1].flag,\r\n                                                description: _priority.results[i - 1].description,\r\n                                                priority: _priority.results[i - 1].priority,\r\n                                                dueDate: _priority.results[i - 1].dueDate\r\n                                            })\r\n                                        }\r\n                                        setRows(data);\r\n                                    }\r\n                                    catch (error) {\r\n                                    }\r\n                                }}\r\n                            ><Error />&nbsp;&nbsp;Priority\r\n                                            </MenuItem>\r\n                            <MenuItem value=\"completed\" key={5}\r\n                                onClick={async () => {\r\n                                    try {\r\n                                        $('.btn-div').hide()\r\n                                        const _completed = await invokeAPIGetRequest(TODO_STATUS + \"Completed\",\r\n                                            true);\r\n                                        console.log(_completed)\r\n                                        for (let i = 1; i <= _completed.results.length; i++) {\r\n\r\n                                            data.push({\r\n                                                id: i, taskRefId: _completed.results[i - 1].taskRefId,\r\n                                                title: _completed.results[i - 1].title,\r\n                                                assignedTo: _completed.results[i - 1].assignedTo,\r\n                                                status: _completed.results[i - 1].status,\r\n                                                flag: _completed.results[i - 1].flag,\r\n                                                description: _completed.results[i - 1].description,\r\n                                                priority: _completed.results[i - 1].priority,\r\n                                                dueDate: _completed.results[i - 1].dueDate\r\n                                            })\r\n                                        }\r\n                                        setRows(data);\r\n                                    }\r\n                                    catch (error) {\r\n                                        console.log(error)\r\n                                    }\r\n                                }}\r\n                            ><Done />&nbsp;&nbsp;Done</MenuItem>\r\n                            <MenuItem value=\"deleted\"\r\n                                onClick={\r\n                                    async () => {\r\n                                        try {\r\n                                            $('.btn-div').hide()\r\n                                            const _deleted = await invokeAPIGetRequest(TODO_STATUS + \"Deleted\",\r\n                                                true);\r\n                                            console.log(_deleted)\r\n                                            for (let i = 1; i <= _deleted.results.length; i++) {\r\n                                                data.push({\r\n                                                    id: i, taskRefId: _deleted.results[i - 1].taskRefId,\r\n                                                    title: _deleted.results[i - 1].title,\r\n                                                    assignedTo: _deleted.results[i - 1].assignedTo,\r\n                                                    status: _deleted.results[i - 1].status,\r\n                                                    flag: _deleted.results[i - 1].flag,\r\n                                                    description: _deleted.results[i - 1].description,\r\n                                                    priority: _deleted.results[i - 1].priority,\r\n                                                    dueDate: _deleted.results[i - 1].dueDate\r\n                                                })\r\n                                            }\r\n                                            setRows(data);\r\n                                        }\r\n                                        catch (error) {\r\n                                        }\r\n                                    }\r\n                                } key={5}><Delete />&nbsp;&nbsp;Deleted</MenuItem>\r\n                        </Select>\r\n                    </div>\r\n                    <div style={{ height: \"88%\" }}>\r\n                        <div className=\"btn-div\">\r\n                            <Button\r\n                                style={{ backgroundColor: \"#ef9a9a\", color: \"#263238\", textTransform: \"none\", marginLeft: \"0px\" }}\r\n                                startIcon={<PriorityHighRounded />}\r\n                                onClick={displayPriority('high')}>\r\n                                Priority High</Button>\r\n                            <Button\r\n                                style={{ backgroundColor: \"#FFF59D\", color: \"#263238\", textTransform: \"none\", marginLeft: \"10px\" }}\r\n                                onClick={displayPriority('medium')}>\r\n                                Priority Medium</Button>\r\n                            <Button style={{ backgroundColor: \"#C5E1A5\", color: \"#263238\", textTransform: \"none\", marginLeft: \"10px\" }}\r\n                                startIcon={<LowPriorityRounded />}\r\n                                onClick={displayPriority('low')}>\r\n                                Priority Low</Button>\r\n                        </div>\r\n                        <DataGrid rows={rows} columns={columns} pageSize={10} rowHeight={100}\r\n                            onSelectionChange={handleRowSelection}\r\n                            onRowClick={(row) => {\r\n                                setRowData(row.row);\r\n                                console.log(rowData)\r\n                                { getSelectedDataRow(row.row) }\r\n                                var id = row.row.taskRefId;\r\n                                setTid(id)\r\n                                tempSelectedData = row.row;\r\n                                setSelectedRow(tempSelectedData);\r\n                                //  $('.EditUpdateTask').toggleClass(\"open\")\r\n                            }}\r\n                            page={page}\r\n                            onPageChange={(params) => {\r\n                                console.log(params)\r\n                                setPage(params.page);\r\n                            }}\r\n                            pagination\r\n\r\n                        > </DataGrid>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\nexport default TodoList;\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\PrivateRoute.js",["820","821","822","823","824","825"],"import React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { invokeAPIRequest } from './Request'\r\nimport { ROLE_ACCESS_CHECK } from './inv/constants/Constants'\r\nimport ErrorBoundary from './inv/util/error/ErrorBoundary'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Route } from \"react-router-dom\";\r\n\r\nconst PrivateRoute = ({ component: Component, ...props }) => {\r\n    const navigate = useNavigate()\r\n    // check authentication of the component\r\n    const auth = useSelector(state => state._loginSlice.user.securityToken)\r\n    const roles = useSelector(state => state._loginSlice.user.roles)\r\n    const { path } = props\r\n\r\n    if (!auth) { // if no token redirect to login one more time\r\n    //  navigate(\"/\", { replace: true })\r\n    }\r\n\r\n    useEffect(async () => { // get component access check  with current user role\r\n        try {\r\n          /*  const pathCanAccess = await invokeAPIRequest(ROLE_ACCESS_CHECK, {\r\n                pathName: path,\r\n                roles: roles\r\n            }, true)\r\n            if (!pathCanAccess) { // current component path is not accessible by the user .. DEV :: Redirect to login page -- (need discussion on this point)\r\n                //navigate(\"/\", { replace: true })\r\n                console.log('pathCanAccess')\r\n            }*/\r\n        } catch (error) {\r\n           navigate(\"/\", { replace: true })\r\n           console.log(error)\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <Route\r\n                {...props}\r\n                element={<Component />}\r\n            />\r\n        </ErrorBoundary>\r\n    );\r\n\r\n}\r\nexport default PrivateRoute\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todo\\UpdateTodo.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\viewers\\ContentViewer.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\public\\PartnerRegistration.js",["826","827","828"],"import React, { useEffect, useState } from 'react'\r\nimport './registration.css'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useTranslation } from 'react-i18next'\r\nimport {\r\n  Stepper,\r\n  StepLabel,\r\n  Step\r\n} from '@material-ui/core'\r\nimport { Formik, Form } from 'formik'\r\nimport ContactDetails from './form_steps/ContactDetails'\r\nimport CompanyDetails from './form_steps/CompanyDetails'\r\nimport ReviewDetails from './form_steps/ReviewDetails'\r\nimport { formFields } from './form_steps/formMeta'\r\nimport { formValidationSchema } from './form_steps/formValidationSchema'\r\nimport MultiStepButtons from './form_steps/MultiStepButtons'\r\nimport { invokeGetRequest, invokeAPIRequest } from '../../../Request'\r\nimport { GET_REGISTRATION_DETAILS, POST_REGISTRATION_DETAILS } from '../../constants/Constants'\r\nimport Loader from '../../util/ui/Loader'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst { partnerDetails, contactDetails, gstinDetails, msmeDetails, folderId } = formFields\r\nconst { companyName, firmType, natureOfBusiness, businessFunction, panNo, partnerType, noOfPortalUsersAllowed, noOfInvoiceExpected, offeredServices, establishmentYear, country, webSite } = partnerDetails\r\nconst { personName, address, city, state, personCountry, pinCode, mobileNumber, stdCodePhoneNumber, email } = contactDetails\r\nconst { gstin, businessName, stateCode, registrationYear, gstinCertId } = gstinDetails\r\nconst { msmeRegNo, msmeType, msmeRegDate, msmeDocId, additionalInfo } = msmeDetails\r\n\r\nconst _defaultTime = () => {\r\n  let d = new Date()\r\n  return d.getFullYear() + '-' + (d.getMonth() + 1 > 9 ? (d.getMonth() + 1) : '0' + (d.getMonth() + 1)) + '-' + (d.getDate() > 9 ? d.getDate() :  '0' + d.getDate())\r\n}\r\n\r\nconst _formFieldsInitials = {\r\n  [companyName.name]: '',\r\n  [firmType.name]: '',\r\n  [natureOfBusiness.name]: '',\r\n  [businessFunction.name]: '',\r\n  [panNo.name]: '',\r\n  [partnerType.name]: '',\r\n  [noOfPortalUsersAllowed.name]: 0,\r\n  [noOfInvoiceExpected.name]: 0,\r\n  [offeredServices.name]: '',\r\n  [establishmentYear.name]: _defaultTime(),\r\n  [country.name]: '',\r\n  [webSite.name]: '',\r\n  [personName.name]: '',\r\n  [address.name]: '',\r\n  [city.name]: '',\r\n  [state.name]: '',\r\n  [personCountry.name]: '',\r\n  [pinCode.name]: '',\r\n  [mobileNumber.name]: '',\r\n  [stdCodePhoneNumber.name]: '',\r\n  [email.name]: '',\r\n  [gstin.name]: '',\r\n  [businessName.name]: '',\r\n  [stateCode.name]: '',\r\n  [registrationYear.name]: '',\r\n  [gstinCertId.name]: '',\r\n  [msmeRegNo.name]: '',\r\n  [msmeType.name]: '',\r\n  [msmeRegDate.name]: _defaultTime(),\r\n  [msmeDocId.name]: '',\r\n  [additionalInfo.name]: '',\r\n  [folderId]: ''\r\n}\r\n\r\nconst addMismatches = (key , value ) => {\r\n  if(key === \"partnerContactEmail\")\r\n     _formFieldsInitials[\"email\"] = value\r\n\r\n  if(key === \"partnerCompanyName\")\r\n     _formFieldsInitials[\"companyName\"] = value \r\n\r\n  if(key === \"partnerContactMobileNo\")\r\n     _formFieldsInitials[\"mobileNumber\"] = value \r\n\r\n  if(key === \"partnerFirmType\")\r\n    _formFieldsInitials[\"firmType\"] = value \r\n\r\n  if(key === \"partnerType\")\r\n     _formFieldsInitials[\"partnerType\"] = value \r\n\r\n  if(key === \"partnerContactPersonName\")\r\n     _formFieldsInitials[\"personName\"] = value \r\n}\r\n\r\nconst PartnerRegistration = () => {\r\n  const { resgistrartionId } = useParams()\r\n  const { t } = useTranslation()\r\n  const [canAllowRegister, setCanAllowRegister] = useState(false)\r\n  const [currentStep, setCurrentStep] = useState(0)\r\n  const [gstinDocuments, setGstinDocuments] = useState([])\r\n  const [msmeDocuments, setMsmeDocuments] = useState([])\r\n  const [saved, setSaved] = useState(false)\r\n  const navigate = useNavigate()\r\n  const [ isLoading , setIsLoading ] = useState(false)\r\n\r\n  const steps = [\r\n    {\r\n      stepId: 1,\r\n      stepLabel: t('contact_details'),\r\n      stepIconName: 'BusinessIcon'\r\n    },\r\n    {\r\n      stepId: 2,\r\n      stepLabel: t('company_details'),\r\n      stepIconName: 'BusinessIcon'\r\n    },\r\n    {\r\n      stepId: 3,\r\n      stepLabel: t('preview'),\r\n      stepIconName: 'BusinessIcon'\r\n    }\r\n  ]\r\n  useEffect(() => {\r\n    // get registration details from DB\r\n    let regId = null\r\n    if (resgistrartionId.indexOf(\"=\") > 0)\r\n      regId = resgistrartionId.split(\"=\")[1]\r\n    else\r\n      regId = resgistrartionId\r\n\r\n    // call service and show loading in UI\r\n    setIsLoading(true)\r\n    setTimeout(() => {\r\n      invokeGetRequest(GET_REGISTRATION_DETAILS.concat(regId), {}, false)\r\n            .then((response) => {\r\n              setIsLoading(false)\r\n              if (response && response.hasError === false) {\r\n                let json = JSON.parse(response.results.profileJsonDetails)\r\n                // iterate object and set default values\r\n                for (var key in json) {\r\n                  if (json.hasOwnProperty(key)) {\r\n                    var val = json[key];\r\n                    // add missed key values ... MISMATCH JSON KEYS\r\n                    addMismatches(key , val)\r\n                    _formFieldsInitials[key] = val\r\n                  }\r\n                }\r\n                formFields.folderId = json.folderID\r\n                if (json.gstinDocuments !== undefined)\r\n                  setGstinDocuments(json.gstinDocuments)\r\n                if (json.msmeDocuments !== undefined)\r\n                  setMsmeDocuments(json.msmeDocuments)\r\n\r\n                setCanAllowRegister(true)\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              setIsLoading(false)\r\n              setCanAllowRegister(false)\r\n            })\r\n          },5000) // for demo to show loader functionality.. remove setTimeout once completed - \r\n    \r\n  }, [])\r\n\r\n\r\n  const formSubmission = (values) => {\r\n    let regId = null\r\n    if (resgistrartionId.indexOf(\"=\") > 0)\r\n      regId = resgistrartionId.split(\"=\")[1]\r\n    else\r\n      regId = resgistrartionId\r\n\r\n    // append msme documents and gstin documents to values\r\n    values.msmeDocuments = msmeDocuments\r\n    values.gstinDocuments = gstinDocuments\r\n    if(values.hasOwnProperty(\"null\") || values.hasOwnProperty(null))  // fallback code\r\n      delete values.null\r\n\r\n    let params = {\r\n      \"activityStatus\": saved ? \"Draft\" : \"Submit\",\r\n      \"activityType\": saved ? \"Draft\" : \"Submit\",\r\n      \"partnerProfileTransactions\": [\r\n        {\r\n          \"actionBy\": values.personName,\r\n          \"actionComments\": saved ? \"draft save\" : \"registration submitted\",\r\n          \"actionTaken\": saved ? \"Draft\" : \"Submit\"\r\n        }\r\n      ],\r\n      \"profileJsonDetails\": JSON.stringify(values)\r\n    }\r\n\r\n    setIsLoading(true)\r\n    setTimeout(() => {\r\n      invokeAPIRequest(POST_REGISTRATION_DETAILS.concat(regId), params, false)\r\n      .then((response) => {\r\n        setIsLoading(false)\r\n        if (response && response.hasError === false) {\r\n          navigate(`/partner/invitations/response/resgistrartionId=${regId}`, { replace: true })\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setIsLoading(false)\r\n        alert('there is an error while submitting registration form');\r\n      })\r\n    },5000)   // this is for demo purpose only \r\n  }\r\n\r\n  const handleRegistrationSubmission = (values, actions) => {\r\n    if (currentStep === steps.length - 1) {\r\n      actions.setSubmitting(true)\r\n      formSubmission(values)\r\n    } else {\r\n      // move to next step\r\n      if (saved) {\r\n        actions.setSubmitting(true)\r\n        formSubmission(values)\r\n      } else {\r\n        actions.setSubmitting(false)\r\n        setCurrentStep(currentStep + 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  const loadStepPane = () => {\r\n\r\n    switch (currentStep) {\r\n\r\n      case 0:\r\n        return <ContactDetails formFields={formFields} />\r\n      case 1:\r\n        return <CompanyDetails formFields={formFields} gstinDocuments={gstinDocuments} setGstinDocuments={setGstinDocuments} msmeDocuments={msmeDocuments} setMsmeDocuments={setMsmeDocuments} />\r\n      case 2:\r\n        return <ReviewDetails formFields={formFields} />\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"registration\">\r\n      {canAllowRegister && (\r\n        <>\r\n          <div className=\"user_details\">\r\n            <h5> {t('partnerContactEmail')} : {_formFieldsInitials.email}</h5>\r\n          </div>\r\n          <div>\r\n            <Stepper activeStep={currentStep} alternativeLabel={true} orientation=\"horizontal\">\r\n              {steps.map((step) => (\r\n                <Step key={step.stepId}>\r\n                  <StepLabel>{step.stepLabel}</StepLabel>\r\n                </Step>\r\n              ))}\r\n            </Stepper>\r\n            <Formik\r\n              initialValues={_formFieldsInitials}\r\n              onSubmit={handleRegistrationSubmission}\r\n            >\r\n              {({  isSubmitting }) => (\r\n                <Form id=\"registrationform\">\r\n                  {loadStepPane()}\r\n                  <MultiStepButtons currentStep={currentStep} setCurrentStep={setCurrentStep} isSubmitting={isSubmitting} steps={steps} setSaved={setSaved} />\r\n                </Form>\r\n              )}\r\n\r\n            </Formik>\r\n          </div>\r\n        </>\r\n      )}\r\n      <Loader isLoading={isLoading}/>\r\n    </div>\r\n  )\r\n}\r\nexport default PartnerRegistration\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\authentication\\Login.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\layouts\\Layout.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\InvoiceList.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\Dashboard.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\InvoiceQueries.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\Knowledge.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\Users.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\Recipients.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\themes\\shadows.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\internal\\manager\\PartnerInvite.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\internal\\manager\\ViewInvitation.js",["829"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport { useParams , useNavigate } from 'react-router-dom'\r\nimport { useTranslation } from 'react-i18next'\r\nimport {\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Table,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  Box,\r\n  makeStyles\r\n} from '@material-ui/core'\r\nimport TabPanel from '../../../util/ui/tab/TabPanel'\r\nimport Loader from '../../../util/ui/Loader'\r\nimport './invitation.css'\r\nimport { invokeGetRequest, invokeAPIRequest } from '../../../../Request'\r\nimport { GET_REGISTRATION_DETAILS, POST_REGISTRATION_DETAILS } from '../../../constants/Constants'\r\nimport { formFields } from '../../../components/public/form_steps/formMeta'\r\nimport { DataGrid } from '@material-ui/data-grid'\r\nimport { useSelector } from 'react-redux'\r\nimport ArtTrackOutlinedIcon from '@material-ui/icons/ArtTrackOutlined'\r\nimport DescriptionOutlinedIcon from '@material-ui/icons/DescriptionOutlined'\r\nimport HistoryOutlinedIcon from '@material-ui/icons/HistoryOutlined'\r\nimport {\r\n  selectUser\r\n}  from '../../common/authentication/slice/selectors'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  theme_color : {\r\n    color:theme.palette.primary.main\r\n  },\r\n  border_color : {\r\n    borderRight : `1px solid ${theme.palette.primary.main}`\r\n  }\r\n}))\r\n\r\n\r\nconst ViewInvitation = () => {\r\n\r\n  let { registrartionId } = useParams()\r\n  const { t } = useTranslation()\r\n  const [value, setValue] = useState(0)\r\n  const [invitations, setInvitations] = useState(null)\r\n  const [history, setHistory] = useState(null)\r\n  const { partnerDetails, contactDetails, gstinDetails, msmeDetails } = formFields\r\n  const { companyName, firmType, natureOfBusiness, panNo, partnerType, noOfPortalUsersAllowed, noOfInvoiceExpected, offeredServices, establishmentYear, country, webSite } = partnerDetails\r\n  const { personName, address, city, state, personCountry, pinCode, mobileNumber, stdCodePhoneNumber, email } = contactDetails\r\n  const { gstin, businessName, stateCode, registrationYear, gstinCertId } = gstinDetails\r\n  const { msmeRegNo, msmeType, msmeRegDate, msmeDocId, additionalInfo } = msmeDetails\r\n  const [msmeDocuments, setMsmeDocuments] = useState([])\r\n  const [gstinDocuments, setGstinDocuments] = useState([])\r\n  const user = useSelector(selectUser)\r\n  const [openDialog, setOpenDialog] = useState(false)\r\n  const commentsRef = useRef()\r\n  const CONTENT_VIEWER_URL = \"/viewer\"\r\n  const view_params = \"location=yes,height=570,width=850,scrollbars=yes,status=yes,location=no\"\r\n  const [actionName, setActionName] = useState(null)\r\n  const _resgistrartionId = useRef(null)\r\n  const [ isLoading , setIsLoading ] = useState(false)\r\n  const navigate =  useNavigate()\r\n  const classes = useStyles()\r\n\r\n\r\n  useEffect(() => {\r\n    async function initLoad() {\r\n      if (registrartionId.indexOf(\"=\") > 0) {\r\n       // resgistrartionId = undefined\r\n        _resgistrartionId.current = registrartionId.split(\"=\")[1]\r\n        setIsLoading(true)\r\n        await invokeGetRequest(GET_REGISTRATION_DETAILS.concat(_resgistrartionId.current), {}, false)\r\n          .then((response) => {\r\n            setIsLoading(false)\r\n            if (response && response.hasError === false) {\r\n              let _profileJsonDetails = JSON.parse(response.results.profileJsonDetails)\r\n              setInvitations(_profileJsonDetails)\r\n              setHistory(response.results.partnerProfileTransactions)\r\n              if (_profileJsonDetails.msmeDocuments !== undefined)\r\n                setMsmeDocuments(_profileJsonDetails.msmeDocuments)\r\n              if (_profileJsonDetails.gstinDocuments !== undefined)\r\n                setGstinDocuments(_profileJsonDetails.gstinDocuments)\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            setIsLoading(false)\r\n            alert('An error while fetching details');\r\n          })\r\n      }\r\n    }\r\n    initLoad()\r\n  }, []) // load once per page . If error ignore UI \r\n\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setValue(newValue)\r\n  }\r\n\r\n  const completeStep = () => {\r\n    let params = {\r\n      \"activityStatus\": actionName,\r\n      \"activityType\": actionName,\r\n      \"partnerProfileTransactions\": [\r\n        {\r\n          \"actionBy\": user.userId,\r\n          \"actionComments\": commentsRef.current.value,\r\n          \"actionTaken\": actionName\r\n        }\r\n      ],\r\n      \"profileJsonDetails\": JSON.stringify(invitations)\r\n    }\r\n    invokeAPIRequest(POST_REGISTRATION_DETAILS.concat(_resgistrartionId.current), params, false)\r\n      .then((response) => {\r\n        if (response && response.hasError === false) {\r\n          navigate(`/app/${user.roles[0]}/partners`,{replace:false})\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        alert('there is an error while submitting registration form');\r\n      })\r\n  }\r\n\r\n\r\n  const Attachments = () => {\r\n\r\n    const columns = [\r\n      { field: 'id', headerName: t('id'), width: 200, hide: true },\r\n      { field: 'documentName', headerName: t('documentName'), width: 200 },\r\n      { field: 'documentAddedBy', headerName: t('documentAddedBy'), width: 200 },\r\n      { field: 'documentAddedOn', headerName: t('documentAddedOn'), width: 200 }\r\n    ]\r\n\r\n    const rows = []\r\n\r\n    msmeDocuments.forEach((msmeDocument) => {\r\n      rows.push({\r\n        id: msmeDocument.documentId,\r\n        documentName: msmeDocument.documentName,\r\n        documentAddedBy: msmeDocument.documentAddedBy,\r\n        documentAddedOn: msmeDocument.documentAddedOn\r\n      })\r\n    })\r\n\r\n    gstinDocuments.forEach((gstinDocument) => {\r\n      rows.push({\r\n        id: gstinDocument.documentId,\r\n        documentName: gstinDocument.documentName,\r\n        documentAddedBy: gstinDocument.documentAddedBy,\r\n        documentAddedOn: gstinDocument.documentAddedOn\r\n      })\r\n    })\r\n\r\n    const openDocument = (document) => {\r\n      const pathsParams = CONTENT_VIEWER_URL.concat(\"/\").concat(\"documentId=\").concat(document.id)\r\n      window.open(pathsParams, \"_blank\", view_params)\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"attachmentGrid\">\r\n          <DataGrid columns={columns} rows={rows} pageSize={10}\r\n            onRowClick={(_row) => { openDocument(_row.row) }}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const History = () => {\r\n\r\n    const columns = [\r\n      { field: 'id', headerName: t('id'), width: 200, hide: true },\r\n      { field: 'actionBy', headerName: t('actionBy'), width: 200 },\r\n      { field: 'actionComments', headerName: t('actionComments'), width: 200 },\r\n      { field: 'actionOn', headerName: t('actionOn'), width: 200 },\r\n      { field: 'actionTaken', headerName: t('actionTaken'), width: 200 }\r\n    ]\r\n\r\n    const rows = []\r\n    history.forEach((_history) => {\r\n      rows.push({\r\n        id: _history.id,\r\n        actionBy: _history.actionBy,\r\n        actionComments: _history.actionComments,\r\n        actionOn: _history.actionOn,\r\n        actionTaken: _history.actionTaken\r\n      })\r\n    })\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"historyGrid\">\r\n          <DataGrid columns={columns} rows={rows} pageSize={10} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const Invitations = () => {\r\n\r\n    return (\r\n      <Box className=\"invitations_view\">\r\n\r\n        { invitations && (\r\n          <div className=\"company_details_container\">\r\n            <div className={`company_details_review_container ${classes.border_color}`}>\r\n              <h5 className={`section_title ${classes.theme_color}`}>{t('company_partner_details')}</h5>\r\n              <Table>\r\n                <TableBody>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{companyName.label}</TableCell>\r\n                    <TableCell>{invitations.companyName}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{firmType.label}</TableCell>\r\n                    <TableCell>{invitations.firmType}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{natureOfBusiness.label}</TableCell>\r\n                    <TableCell>{invitations.natureOfBusiness}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{panNo.label}</TableCell>\r\n                    <TableCell>{invitations.panNo}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{partnerType.label}</TableCell>\r\n                    <TableCell>{invitations.partnerType}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{noOfPortalUsersAllowed.label}</TableCell>\r\n                    <TableCell>{invitations.noOfPortalUsersAllowed}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{noOfInvoiceExpected.label}</TableCell>\r\n                    <TableCell>{invitations.noOfInvoiceExpected}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{offeredServices.label}</TableCell>\r\n                    <TableCell>{invitations.offeredServices}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{establishmentYear.label}</TableCell>\r\n                    <TableCell>{invitations.establishmentYear}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{country.label}</TableCell>\r\n                    <TableCell>{invitations.country}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{webSite.label}</TableCell>\r\n                    <TableCell>{invitations.webSite}</TableCell>\r\n                  </TableRow>\r\n\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n            <div className=\"contact_details_container\">\r\n              <h5 className={`section_title ${classes.theme_color}`}>{t('company_contact_person_details')}</h5>\r\n              <Table>\r\n                <TableBody>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{personName.label}</TableCell>\r\n                    <TableCell>{invitations.personName}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{email.label}</TableCell>\r\n                    <TableCell>{invitations.email}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{mobileNumber.label}</TableCell>\r\n                    <TableCell>{invitations.mobileNumber}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{stdCodePhoneNumber.label}</TableCell>\r\n                    <TableCell>{invitations.stdCodePhoneNumber}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{address.label}</TableCell>\r\n                    <TableCell>{invitations.address}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{personCountry.label}</TableCell>\r\n                    <TableCell>{invitations.personCountry}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{state.label}</TableCell>\r\n                    <TableCell>{invitations.state}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{city.label}</TableCell>\r\n                    <TableCell>{invitations.city}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{pinCode.label}</TableCell>\r\n                    <TableCell>{invitations.pinCode}</TableCell>\r\n                  </TableRow>\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n            <div className={`gstin_details_container ${classes.border_color}`} aria-label=\"gstin details\">\r\n              <h5 className={`section_title ${classes.theme_color}`}>{t('gstin_details')}</h5>\r\n              <Table>\r\n                <TableBody>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{gstin.label}</TableCell>\r\n                    <TableCell>{invitations.gstin}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{businessName.label}</TableCell>\r\n                    <TableCell>{invitations.businessName}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{stateCode.label}</TableCell>\r\n                    <TableCell>{invitations.stateCode}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{registrationYear.label}</TableCell>\r\n                    <TableCell>{invitations.registrationYear}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{gstinCertId.label}</TableCell>\r\n                    <TableCell>{invitations.gstinCertId}</TableCell>\r\n                  </TableRow>\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n            <div className=\"msme_details_container\" aria-label=\"gstin details\">\r\n              <h5 className={`section_title ${classes.theme_color}`}>{t('msme_details')}</h5>\r\n              <Table>\r\n                <TableBody>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{msmeRegNo.label}</TableCell>\r\n                    <TableCell>{invitations.msmeRegNo}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{msmeType.label}</TableCell>\r\n                    <TableCell>{invitations.msmeType}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{msmeRegDate.label}</TableCell>\r\n                    <TableCell>{invitations.msmeRegDate}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{msmeDocId.label}</TableCell>\r\n                    <TableCell>{invitations.msmeDocId}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{additionalInfo.label}</TableCell>\r\n                    <TableCell>{invitations.additionalInfo}</TableCell>\r\n                  </TableRow>\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n            <div style={{ clear: 'both'}}></div>\r\n          </div>\r\n        )}\r\n      </Box>\r\n    )\r\n  }\r\n\r\n  return (\r\n  <div className=\"body_background\">\r\n    <div className=\"viewInvitation\">\r\n      <div className=\"viewTabs\">\r\n        <Tabs value={value} onChange={handleTabChange}>\r\n          <Tab icon = {<ArtTrackOutlinedIcon /> } label={t('invitations_details')} />\r\n          <Tab icon = {<DescriptionOutlinedIcon/>} label={t('attachments')} />\r\n          <Tab icon = {<HistoryOutlinedIcon/>} label={t('history')} />\r\n        </Tabs>\r\n        <TabPanel value={value} index={0}>\r\n          <Invitations />\r\n        </TabPanel>\r\n        <TabPanel value={value} index={1}>\r\n          <Attachments />\r\n        </TabPanel>\r\n        <TabPanel value={value} index={2}>\r\n          <History />\r\n        </TabPanel>\r\n      </div>\r\n      <div className=\"viewButtons\">\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            setOpenDialog(!openDialog)\r\n            setActionName(\"NeedMoreInformation\")\r\n          }}\r\n        >\r\n          {t('need_more_information')}\r\n        </Button>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            setOpenDialog(!openDialog)\r\n            setActionName(\"Approve\")\r\n          }}\r\n        >\r\n          {t('approve')}\r\n        </Button>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            setOpenDialog(!openDialog)\r\n            setActionName(\"Discard\")\r\n          }}\r\n        >\r\n          {t('discard')}\r\n        </Button>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n             navigate(`/app/${user.roles[0]}/partners`,{replace:false})\r\n          }}\r\n        >\r\n          {t('close')}\r\n        </Button>\r\n      </div>\r\n\r\n      <div className=\"view_action_dialog\">\r\n        <Dialog open={openDialog} fullWidth={true} maxWidth=\"sm\">\r\n          <DialogTitle>{t('add_comments')}</DialogTitle>\r\n          <DialogContent>\r\n            <div className=\"view_action_dialog_content\">\r\n              <TextField multiline type=\"text\" rows={5} rowsMax={8} inputRef={commentsRef} variant=\"outlined\" label={t('comments')} fullWidth />\r\n            </div>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                completeStep()\r\n              }}\r\n            >\r\n              {t('ok_button')}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                setOpenDialog(!setOpenDialog)\r\n              }}\r\n            >\r\n              {t('cancel_button')}\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    \r\n    </div>\r\n    <div style={{paddingBottom:'70px'}}></div>\r\n    <Loader  isLoading = {isLoading}/>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default ViewInvitation\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\internal\\manager\\InvitationResponse.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\internal\\manager\\Partners.js",["830","831","832"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\actions\\Action.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\Request.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todo\\Todo.js",["833","834","835","836","837","838","839","840","841","842","843","844"],"import React, { useEffect, useState } from 'react'\r\nimport { Form, Formik } from 'formik'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport { TODO } from '../../../constants/Constants';\r\nimport * as moment from 'moment';\r\nimport {\r\n    Grid,\r\n    TextField,\r\n    Button,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    Checkbox\r\n} from '@material-ui/core';\r\nimport * as Yup from 'yup';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nimport { invokeAPIRequest } from '../../../../Request';\r\nimport { Close, Star, StarBorder } from '@material-ui/icons';\r\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles';\r\nimport getMuiTheme from '@material-ui/core/styles/createMuiTheme';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport $ from 'jquery';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        // backgroundColor:'grey',\r\n        flexWrap: 'wrap',\r\n        // '& > *': {\r\n        //     margin: theme.spacing(1),\r\n        //     width: theme.spacing(16),\r\n        //     height: theme.spacing(16),\r\n        // }\r\n    },\r\n    style: { fill: \"green\" }\r\n}));\r\nconst handleCreateClose = () => {\r\n    $('.CreateNewTask').toggleClass(\"open\")\r\n}\r\n\r\nconst Todo = () => {\r\n    const navigate = useNavigate()\r\n    const [] = React.useState(true);\r\n    const starred = useState(\r\n        {\r\n            flag: false,\r\n        });\r\n\r\n    const StarredCheckbox = withStyles({\r\n        root: {\r\n            color: \"Black\",\r\n            '&$checked': {\r\n                color: \"#FFD740\",\r\n            },\r\n        },\r\n        checked: {},\r\n    })((props) => <Checkbox color=\"default\" {...props} />);\r\n    var today = new Date();\r\n    var datedate = moment(today).format('YYYY-MM-DD');\r\n    const formcontrolstyle = { padding: '0px 0px', width: 400, margin: '2px auto' }\r\n    const stylepaper = { padding: '50px 50px', width: 500, height: 700, margin: '0px auto' }\r\n    const todo = {\r\n        title: '',\r\n        description: '',\r\n        assignedTo: '',\r\n        priority: '',\r\n        flag: '',\r\n        dueDate: datedate, // YYYY-MM-DD\r\n        status: '',\r\n        taskActivities: [{\r\n            action: '',\r\n            comments: ''\r\n        }\r\n        ]\r\n    }\r\n    const { t } = useTranslation()\r\n\r\n    // set up form validaion schema wih YUP API\r\n    const _validationSchema = Yup.object().shape({\r\n        title: Yup.string().max(75).required(('Title Require')),\r\n        description: Yup.string().max(250).required(('Description Require')),\r\n        assignedTo: Yup.string().max(50).required(('Assign To Require')),\r\n        priority: Yup.string().required(('Priority Require')),\r\n        dueDate: Yup.string().required(('Due Date Require')),\r\n    })\r\n    const classes = useStyles();\r\n    const myTheme = getMuiTheme({\r\n        checkbox: {\r\n            checkedColor: '#FFD740'\r\n        }\r\n    });\r\n    return (\r\n        <Grid container  >\r\n            <div className=\"CreateNewTask\">\r\n                <Button variant=\"contained\" color=\"primary\" style={{ textTransform: \"none\", justifyItems: \"flex-end\", margin: \"-50px 0px 0px 200px\" }} onClick={handleCreateClose}>\r\n                    <Close fontSize=\"large\" style={{ fontSize: \"20px\" }} />\r\n                </Button>\r\n                <label>Create Task</label>\r\n\r\n                <Formik\r\n                    initialValues={todo}\r\n                    validationSchema={_validationSchema}\r\n                    onSubmit={async (\r\n                        values\r\n                    ) => {\r\n\r\n                        // setSubmitting(true)\r\n                        console.log(\"@@@@@@\", values)\r\n                        try {\r\n                            let _login = await invokeAPIRequest(TODO, {\r\n                                title: values.title,\r\n                                description: values.description,\r\n                                assignedTo: values.assignedTo,\r\n                                priority: values.priority,\r\n                                dueDate: values.dueDate,\r\n                                flag: values.flag,\r\n                                status: values.status,\r\n                                taskActivities: [{\r\n                                    action: values.action,\r\n                                    comments: values.comments\r\n                                }]\r\n                            },\r\n                                true, \"post\");\r\n                            console.log(_login)\r\n\r\n                            navigate('/app/partner_manager/todo', { replace: true })\r\n                        } catch (error) {\r\n                            //   let message = t(error.errorCode)\r\n                            //   setLoginError(message)\r\n                        }\r\n                    }}\r\n                >\r\n                    {({ values,\r\n                        errors,\r\n                        touched,\r\n                        isSubmitting,\r\n                        handleBlur,\r\n                        handleChange,\r\n                        handleSubmit\r\n                    }) => (\r\n                        <Form onSubmit={handleSubmit}>\r\n\r\n                            <Grid item xs={12}>                                \r\n                                <FormControl style={{ width: '100%' }} >\r\n                                {/* {/ <InputLabel >Title:</InputLabel> /} */}\r\n                                    <TextField\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        name=\"title\"                                       \r\n                                        color=\"primary\"\r\n                                        label={t(\"title\")}\r\n                                        fullWidth\r\n                                        error={Boolean(touched.title && errors.title)}\r\n                                        helperText={touched.title && errors.title}\r\n                                    />\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <FormControl style={{ width: '100%' }}>\r\n                                <InputLabel >Assign To:</InputLabel>\r\n                                    <Select\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        name=\"assignedTo\"\r\n                                        displayEmpty                                                                    \r\n                                        label={t(\"assign_to\")}\r\n                                        color=\"primary\"                                    >\r\n                                        <MenuItem aria-label=\"None\" disabled key={1} >{t(\"assign_to\")}</MenuItem>\r\n                                        <MenuItem value=\"Swathi\" key={2}>Swathi</MenuItem>\r\n                                        <MenuItem value=\"Farooq\" key={3}>Farooq</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n\r\n                            <Grid item xs={12}>\r\n                               \r\n                                <FormControl style={{ width: '100%' }}>\r\n                                <InputLabel >Priority:</InputLabel>\r\n                                    <Select\r\n                                        name=\"priority\"\r\n                                        displayEmpty                                       \r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        label={t(\"priority\")}\r\n                                        color=\"primary\"\r\n\r\n                                    >\r\n                                        <MenuItem aria-label=\"None\" disabled key={1} >{t(\"priority\")}</MenuItem>\r\n                                        <MenuItem value=\"high\" key={2}>High</MenuItem>\r\n                                        <MenuItem value=\"medium\" key={3}>Medium</MenuItem>\r\n                                        <MenuItem value=\"low\" key={4}>Low</MenuItem>\r\n                                    </Select>\r\n                                    <FormHelperText error={Boolean(touched.priority && errors.priority)}>{touched.priority && errors.priority}</FormHelperText>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12} >\r\n                                <InputLabel >{t(\"due_date\")}:</InputLabel>\r\n                                <FormControl style={{ width: '100%' }} >\r\n                                    <TextField\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        name=\"dueDate\"\r\n                                           label={t('due_date')}\r\n                                        //    defaultValue={initialValues.dueDate}\r\n                                        // defaultValue={initialValuesG.dueDate}\r\n                                        color=\"primary\"\r\n\r\n                                        type=\"date\"\r\n                                        //  defaultValue=\"2021-10-17\"\r\n\r\n                                        error={Boolean(touched.dueDate && errors.dueDate)}\r\n                                        helperText={touched.dueDate && errors.dueDate}\r\n                                    />\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n\r\n                            <Grid item xs={12}>\r\n                                <FormControl style={{ width: '100%' }}>\r\n                                    <InputLabel >{t(\"status\")}:</InputLabel>\r\n                                    <Select\r\n                                        name=\"status\"\r\n                                        displayEmpty\r\n                                        //    defaultValue={initialValuesG.status}\r\n                                        //    value={initialValuesG.status}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        label={t(\"status\")}\r\n                                        color=\"status\"\r\n                                    >\r\n                                        <MenuItem aria-label=\"None\" disabled key={1} >{t(\"status\")}</MenuItem>\r\n                                        <MenuItem value=\"Inprogress\" key={2}>InProgress</MenuItem>\r\n                                        <MenuItem value=\"Completed\" key={3}>Completed</MenuItem>\r\n                                    </Select>\r\n                                    <FormHelperText error={Boolean(touched.status && errors.status)}>{touched.status && errors.status}</FormHelperText>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n\r\n                                <FormControl style={{ width: '100%' }}>\r\n                                    <TextField\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        name=\"description\"\r\n                                        label={t('description')}\r\n                                        //  defaultValue={initialValues.description}\r\n                                        //  value={initialValuesG.description}\r\n                                        color=\"primary\"\r\n\r\n                                        multiline\r\n                                        rows={5}\r\n\r\n                                        error={Boolean(touched.description && errors.description)}\r\n                                        helperText={touched.description && errors.description}\r\n                                    />\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <FormControl style={{ width: '100%' }}>\r\n                                    <InputLabel >Action:</InputLabel>\r\n                                    <Select\r\n                                        name=\"action\"\r\n                                        displayEmpty\r\n                                        // defaultValue={initialValuesG.action}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        //  label=\"action\"\r\n                                        color=\"primary\"\r\n                                    >\r\n                                        <MenuItem aria-label=\"None\" disabled key={1} >Action</MenuItem>\r\n                                        <MenuItem value=\"submit\" key={2}>Submit</MenuItem>\r\n                                        <MenuItem value=\"updated\" key={3}>Updated</MenuItem>\r\n                                        <MenuItem value=\"commented\" key={4}>Commented</MenuItem>\r\n                                    </Select>\r\n                                    <FormHelperText error={Boolean(touched.action && errors.action)}>{touched.action && errors.action}</FormHelperText>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <FormControl style={{ width: '100%' }}>\r\n                                    {/* {/ <InputLabel >Comments:</InputLabel> /} */}\r\n                                    <TextField\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        name=\"comments\"\r\n                                        color=\"primary\"\r\n                                        label=\"Comments\"\r\n                                        type=\"comments\"\r\n                                        multiline\r\n                                        rows={5}\r\n\r\n                                        error={Boolean(touched.comments && errors.comments)}\r\n                                        helperText={touched.comments && errors.comments}\r\n                                    />\r\n\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <MenuItem className=\"addTaskHolder\">\r\n                                    <Button color=\"primary\" variant=\"contained\" style={{\r\n                                        width: \"100%\",\r\n                                        borderRadius: \"20px\",\r\n                                        marginTop: \"20px\"\r\n                                    }}\r\n                                        type=\"submit\"\r\n                                        disabled={isSubmitting}\r\n                                    >Submit</Button>\r\n                                    <Button\r\n                                    style={{ marginLeft: \"600px\" }}\r\n                                    color=\"primary\"\r\n                                    variant=\"contained\"\r\n                                    type=\"submit\"\r\n                                    disabled={isSubmitting}\r\n                                >{t('update_task')}</Button>\r\n\r\n                                </MenuItem>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Button\r\n                                    style={{ marginLeft: \"600px\" }}\r\n                                    color=\"primary\"\r\n                                    variant=\"contained\"\r\n                                    type=\"submit\"\r\n                                    disabled={isSubmitting}\r\n                                >{t('update_task')}</Button>\r\n                            </Grid>\r\n\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\nexport default Todo;","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\constants\\Constants.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\layouts\\NavBar.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\BreadCrumb.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\layouts\\TopBar.js",["845","846"],"import React, { useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport './layout.css'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { LOGOUT_ACTION , TOGGLE_MENU } from '../../../actions/Action'\r\nimport NotificationsIcon from '@material-ui/icons/Notifications'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport {\r\n  Badge,\r\n  Avatar,\r\n  Menu,\r\n  MenuItem,\r\n  AppBar,\r\n  Toolbar,\r\n  Hidden,\r\n  IconButton\r\n} from '@material-ui/core'\r\nimport ProfileLogo from '../../../images/avatar.jpg'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\r\nimport logo from '../../../images/logo.png'\r\nimport MenuOpenOutlinedIcon from '@material-ui/icons/MenuOpenOutlined'\r\nimport AssignmentTurnedInOutlinedIcon from '@material-ui/icons/AssignmentTurnedInOutlined'\r\nimport { useLoginSlice }  from '../authentication/slice'// inject login slice to get _loginSlice state \r\nimport {\r\n  selectUser\r\n}  from '../authentication/slice/selectors'\r\nimport {\r\n  useLayoutSlice\r\n} from './slice'\r\nimport {\r\n  selectMenuToggle\r\n} from './slice/selectors'\r\n\r\n\r\nconst TopBar = (props) => {\r\n  const { onMobielViewOpen} = props\r\n  let navigate = useNavigate();\r\n  useLoginSlice() // initialize to push initial state / upated state of login slice\r\n  const user = useSelector(selectUser)\r\n  const dispatch = useDispatch()\r\n  const [anchorEl, setAnchorEl] = useState(null)\r\n  const [mobileAnchorEl, setMobileAnchorEl] = useState(null)\r\n  const [toggle , setToggle] = useState(true)\r\n  const { actions }  =  useLayoutSlice()\r\n  const toggled =  useSelector(selectMenuToggle)\r\n  \r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('appUser')\r\n    window.location.href = \"/\"\r\n  }\r\n\r\n  const handleAvatarClick = (event) => {\r\n    setAnchorEl(event.currentTarget)\r\n  }\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null)\r\n  }\r\n\r\n  const handleMobileMenuClose = () => {\r\n    setMobileAnchorEl(null)\r\n  }\r\n\r\n  const handleMobileMenuClick = (event) => {\r\n    setMobileAnchorEl(event.currentTarget)\r\n  }\r\n\r\n  const handleToggleClick = () => {\r\n      setToggle(!toggle) // change toggle \r\n      dispatch(actions.toggleMenu(!toggled))\r\n  }\r\n\r\n  const mobileMenuItems = (\r\n    <Menu\r\n      anchorEl={mobileAnchorEl}\r\n      keepMounted\r\n      open={Boolean(mobileAnchorEl)}\r\n      onClose={handleMobileMenuClose}\r\n    >\r\n      <MenuItem onClick={handleMobileMenuClose}>\r\n        <IconButton>\r\n          <Badge badgeContent={7} color=\"primary\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton>\r\n      </MenuItem>\r\n      <MenuItem>\r\n        <IconButton onClick={handleLogout}>\r\n          <ExitToAppIcon />\r\n        </IconButton>\r\n      </MenuItem>\r\n    </Menu>\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <AppBar color=\"secondary\" position=\"fixed\">\r\n        <Toolbar className=\"top_toolbar\">\r\n          <Hidden mdDown>\r\n            <div className=\"top_bar\">\r\n                <div className=\"top_bar_left\">\r\n                      <span className={toggle ? 'toggleRotate' : ''}>\r\n                        <IconButton onClick={handleToggleClick}>\r\n                            <MenuOpenOutlinedIcon/>\r\n                        </IconButton>\r\n                      </span>\r\n                      <IconButton className=\"todo_list\"\r\n                        onClick={() => {\r\n                          navigate(`/app/${user.roles[0]}/todo`,{replace:false})\r\n                        }}\r\n                      >\r\n                        <AssignmentTurnedInOutlinedIcon/>\r\n                      </IconButton>\r\n                </div>\r\n                <img src={logo} alt=\"Logo\" className=\"top_bar_logo\"/>\r\n                <div className=\"top_bar_right\">\r\n                  <div>\r\n                    <IconButton>\r\n                      <Badge badgeContent={7} color=\"primary\">\r\n                          <NotificationsIcon />\r\n                      </Badge>\r\n                    </IconButton>\r\n                  </div>\r\n                  <div>\r\n                        <Avatar alt={user.userId} src={ProfileLogo} onClick={(e) => handleAvatarClick(e)} />\r\n                        <Menu\r\n                          anchorEl={anchorEl}\r\n                          keepMounted\r\n                          open={Boolean(anchorEl)}\r\n                          onClose={handleMenuClose}\r\n                        >\r\n                          <MenuItem onClick={handleLogout}>Logout</MenuItem>\r\n                        </Menu>\r\n                    </div>\r\n                    <div className=\"top_bar_right_name\">\r\n                      <span>shashi kumar</span> <br/>\r\n                      <span className=\"user_role\">Admin</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          </Hidden>\r\n\r\n          <Hidden lgUp>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              onClick={() => {\r\n                onMobielViewOpen()\r\n              }}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              color=\"inherit\"\r\n              onClick={(e) => {\r\n                handleMobileMenuClick(e)\r\n              }}\r\n            >\r\n              <MoreVertIcon />\r\n            </IconButton>\r\n          </Hidden>\r\n          {mobileMenuItems}\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TopBar\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\tab\\TabPanel.js",["847"],"import React from 'react'\r\n\r\nconst TabPanel = (props) => {\r\n\r\n  const {index , value , children , ...rest} = props\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`tabpanel-${index}`}\r\n      aria-labelledby={`tab-${index}`}\r\n    >\r\n      {value === index && (\r\n          <div>{children}</div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\nexport default TabPanel\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\Loader.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\public\\form_steps\\formMeta.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\dialog\\MessageDialog.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\public\\form_steps\\MultiStepButtons.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\public\\form_steps\\formValidationSchema.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\public\\form_steps\\ReviewDetails.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\public\\form_steps\\CompanyDetails.js",["848"],"import React from 'react'\r\nimport {\r\n  Grid\r\n} from '@material-ui/core'\r\nimport './formfields.css'\r\nimport InputField from '../../../util/ui/form/InputField'\r\nimport DateField from '../../../util/ui/form/DateField'\r\nimport FileUploader from '../../../util/ui/uploader/FileUploader'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\n\r\nconst CompanyDetails = (props) => {\r\n\r\n  const { formFields } = props\r\n  const { gstinDetails, msmeDetails, folderId } = formFields\r\n  const { t } = useTranslation()\r\n  const { gstin, businessName, stateCode, registrationYear, gstinCertId } = gstinDetails\r\n  const { msmeRegNo, msmeType, msmeRegDate, msmeDocId, additionalInfo } = msmeDetails\r\n  const { gstinDocuments, setGstinDocuments } = props\r\n  const { msmeDocuments, setMsmeDocuments } = props\r\n  const gstin_props = [\r\n    {\r\n      \"name\": \"document_type\",\r\n      \"value\": \"Registration\"\r\n    },\r\n    {\r\n      \"name\": \"document_sub_type\",\r\n      \"value\": \"GSTIN document\"\r\n    }\r\n  ]\r\n\r\n  const msme_props = [\r\n    {\r\n      \"name\": \"document_type\",\r\n      \"value\": \"Registration\"\r\n    },\r\n    {\r\n      \"name\": \"document_sub_type\",\r\n      \"value\": \"MSME\"\r\n    }\r\n  ]\r\n\r\n  const allowedMimeTypes = ['image/*', 'application/pdf']\r\n\r\n  return (\r\n    <div className=\"company_details\">\r\n      <div arial-label=\"ccompany_details\" className=\"company_main\">\r\n        <div className=\"company_title\">{t('gstin_details')}</div>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={4}>\r\n            <InputField name={gstin.name} label={gstin.label} />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <InputField name={businessName.name} label={businessName.label} />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <InputField name={stateCode.name} label={stateCode.label} />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={4}>\r\n            <InputField name={registrationYear.name} label={registrationYear.label} />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <InputField name={gstinCertId.name} label={gstinCertId.label} />\r\n          </Grid >\r\n          <Grid item xs={4}>\r\n            <FileUploader documents={gstinDocuments} title={t('upload_gstin_docs')} setDocuments={setGstinDocuments} folderId={folderId} documentProperties={gstin_props} maxUplods={1} allowedMimeTypes={allowedMimeTypes} />\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n      <div aria-label=\"contact person details\" className=\"contact_person\">\r\n        <div className=\"msme_title\">{t('msme_details')}</div>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={4}>\r\n            <InputField name={msmeRegNo.name} label={msmeRegNo.label} />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <InputField name={msmeType.name} label={msmeType.label} />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <DateField name={msmeRegDate.name} label={msmeRegDate.label} />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={4}>\r\n            <InputField name={additionalInfo.name} label={additionalInfo.label} />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <FileUploader documents={msmeDocuments} title={t('upload_msme_docs')} setDocuments={setMsmeDocuments} folderId={folderId} documentProperties={msme_props} maxUplods={1} allowedMimeTypes={allowedMimeTypes} />\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CompanyDetails\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\public\\form_steps\\ContactDetails.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todo\\StatusChip.js",["849","850","851","852"],"import React from \"react\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport BlockedIcon from \"@material-ui/icons/Block\";\r\nimport ProgressIcon from \"@material-ui/icons/DonutLarge\";\r\n\r\nimport { green, blue, grey, red } from \"@material-ui/core/colors\";\r\n\r\nfunction colorForStatus(status) {\r\n  switch (status) {\r\n    case \"completed\":\r\n      return green;\r\n    // case \"Inprogress\":\r\n    //   return blue;\r\n    // case \"blocked\":\r\n    //   return red;\r\n    default:\r\n      return blue;\r\n  }\r\n}\r\n\r\nfunction StatusChip({ status }) {\r\n  return (\r\n    <Chip\r\n      label={status}\r\n     // avatar={<DoneIcon style={{ color: \"white\" }}/>}\r\n\r\n       avatar={status === \"completed\" && <DoneIcon style={{ color: \"white\" }}/>}\r\n    //   avatar={status === \"blocked\" && <BlockedIcon style={{ color: \"white\" }} />}\r\n    //   avatar={status === \"in progress\" && <ProgressIcon style={{ color: \"white\" }} />}\r\n      style={{ backgroundColor: colorForStatus(status)[300], color: \"white\"}}\r\n    />\r\n  );\r\n}\r\n\r\nexport default StatusChip;\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\layouts\\NavItems.js",["853","854"],"import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useEffect, useState } from 'react'\r\nimport { invokeAPIGetRequest, invokeAPIRequest } from '../../../../Request'\r\nimport { GET_NAVIGATION_ITEMS } from '../../../constants/Constants'\r\nimport { ADD_NAVIGATION_LINKS } from '../../../actions/Action'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport './layout.css'\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText\r\n} from '@material-ui/core'\r\nimport { NavLink as NavigationLink } from 'react-router-dom'\r\nimport images from '../../../images/icons.json'\r\nimport {\r\n  selectMenuToggle\r\n} from './slice/selectors'\r\n\r\n\r\nconst NavItems = () => {\r\n  const navigationItems = useSelector(state => state.navigation)\r\n  const roles = useSelector(state => state._loginSlice.user.roles)\r\n  const dispatch = useDispatch()\r\n  const [navItems, setNavItems] = useState([])\r\n  const [itemIndex, setItemIndex] = useState(-1)\r\n  const toggleMenu = useSelector(selectMenuToggle)\r\n  //const toggleMenu = false\r\n \r\n  useEffect(() => {\r\n    const fetchNavItems = async () => {\r\n      let request = { \"roles\": [] };\r\n      request.roles.push(roles.join(\",\"))\r\n      if (navigationItems === undefined || Object.keys(navigationItems).length === 0) { // there are no navigation items\r\n        const _navItems = await invokeAPIRequest(GET_NAVIGATION_ITEMS, request, true);\r\n        if (!_navItems.hasError) { //save navigation items in Redux store\r\n          dispatch({\r\n            type: ADD_NAVIGATION_LINKS,\r\n            payload: _navItems.results\r\n          })\r\n          setNavItems(_navItems.results)\r\n        }\r\n      } else {\r\n        setNavItems(navigationItems)\r\n      }\r\n    }\r\n    fetchNavItems()\r\n  }, [])\r\n\r\n  const canHighlight = (navItem) => {\r\n    if (navItem.childs.length > 0) {\r\n      navItem.childs.map((_navItem) => {\r\n        return  _navItem.itemId === itemIndex\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className={toggleMenu ? `main_menu dynamicMenu` : `main_menu`}>\r\n        <PerfectScrollbar>\r\n          <List className=\"list_main nav_item\" component=\"ul\">\r\n            {navItems.map((navItem) => (\r\n              <>\r\n                {navItem.childs.length > 0 ? (\r\n                  <ListItem\r\n                    button\r\n                    key={navItem.itemId}\r\n                    onClick={() => { setItemIndex(navItem.itemId) }}\r\n                    className=\"list_item\"\r\n                    component=\"a\"\r\n                    selected={canHighlight(navItem)}\r\n                    activeClassName=\"Mui-selected active\"\r\n                  >\r\n                    <SVGIcon icon={navItem.itemIcon} />\r\n                    <ListItemText>{navItem.itemName}</ListItemText>\r\n                  </ListItem>\r\n                ) : (\r\n                    <ListItem\r\n                      button\r\n                      key={navItem.itemId}\r\n                      onClick={() => { setItemIndex(navItem.itemId) }}\r\n                      component={NavigationLink}\r\n                      to={navItem.itemRoute}\r\n                      selected={navItem.itemId === itemIndex}\r\n                      className=\"list_item\"\r\n                      activeClassName=\"Mui-selected active\"\r\n                    >\r\n                      <SVGIcon icon={navItem.itemIcon} />\r\n                      <ListItemText>{navItem.itemName}</ListItemText>\r\n                    </ListItem>\r\n                  )}\r\n              </>\r\n            ))}\r\n          </List>\r\n        </PerfectScrollbar>\r\n      </div>\r\n      {\r\n        navItems.map((navItem) => (\r\n          <PerfectScrollbar>\r\n            <div id=\"sub_items\" className={navItem.childs.length > 0 && itemIndex === navItem.itemId ? \"sub_menu show_item\" : \"sub_menu hide_item\"} >\r\n              <List className=\"list_main\" component=\"ul\">\r\n                {navItem.childs.map((_navItem) => (\r\n                  <ListItem\r\n                    button\r\n                    key={_navItem.itemId}\r\n                    component={NavigationLink}\r\n                    to={_navItem.itemRoute}\r\n                    className=\"nav_item sub_nav_item sub_menu_item\"\r\n                    onClick={() => {\r\n                      setItemIndex(_navItem.itemId)\r\n                    }}\r\n                    activeClassName=\"Mui-selected active\"\r\n                  >\r\n                    <SVGIcon icon={_navItem.itemIcon} />\r\n                    <ListItemText>{_navItem.itemName}</ListItemText>\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </div>\r\n          </PerfectScrollbar>\r\n        ))\r\n      }\r\n    </div >\r\n  )\r\n}\r\n\r\nconst SVGIcon = (props) => {\r\n  const { icon } = props\r\n  return <span dangerouslySetInnerHTML={{ __html: images[icon] }} /> // return svg format of icon\r\n}\r\n\r\nexport default NavItems\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\form\\DateField.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\form\\InputField.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\form\\SelectField.js",["855","856"],"import React , { useEffect , useState }from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { at } from 'lodash';\r\nimport { useField } from 'formik';\r\nimport {\r\n  InputLabel,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText\r\n} from '@material-ui/core';\r\nimport {LOOKUP_FIELDS} from '../../../constants/Constants'\r\nimport {invokeGetRequest} from '../../../../Request'\r\n\r\n\r\n\r\nfunction SelectField(props) {\r\n  const { label, fieldOf , dependentOn , dependentValue , moduleName ,...rest } = props;\r\n  const [field, meta] = useField(props);\r\n  const { value: selectedValue } = field;\r\n  const [touched, error] = at(meta, 'touched', 'error');\r\n  const isError = touched && error && true;\r\n  const [data,setData] = useState([])\r\n\r\n  useEffect(()=>{\r\n    let URL = LOOKUP_FIELDS.concat(\"?fieldName=\").concat(fieldOf).concat(\"&moduleName=\").concat(moduleName)\r\n    invokeGetRequest(URL,{},false)\r\n    .then((response) => {\r\n      if(response && response.hasError === false) {\r\n        let _data = []\r\n        response.results.map((result) => {\r\n          _data.push({\r\n            label : result.fieldValue.trim(),\r\n            value : result.fieldValue.trim()\r\n          })\r\n        })\r\n        setData(_data)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n    })\r\n  },[])\r\n\r\n  function _renderHelperText() {\r\n    if (isError) {\r\n      return <FormHelperText>{error}</FormHelperText>;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <FormControl variant=\"standard\" fullWidth {...rest} error={isError}>\r\n      <InputLabel>{label}</InputLabel>\r\n      <Select  {...field} label={label} value={selectedValue ? selectedValue : ''} >\r\n        {data && data.map((item, index) => (\r\n          <MenuItem key={index} value={item.value}>\r\n            {item.label}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n      {_renderHelperText()}\r\n    </FormControl>\r\n\r\n  );\r\n}\r\n\r\nSelectField.defaultProps = {\r\n  data: []\r\n};\r\n\r\nSelectField.propTypes = {\r\n  data: PropTypes.array.isRequired\r\n};\r\n\r\nexport default SelectField;\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\uploader\\FileUploader.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\EnquiryList.js",["857","858","859","860","861"],"\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport { useTranslation } from 'react-i18next'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { ENQUIRY_API_END_URL } from '../../../constants/Constants'\r\nimport { invokeAPIGetRequest } from '../../../../Request'\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Grid } from '@material-ui/core'\r\nfunction EnquiryList(props) {\r\n\r\n  const data = []\r\n  const [rows, setRows] = useState([]);\r\n  const [tid, setTid] = useState(0);\r\n  const { t } = useTranslation();\r\n  const navigation = useNavigate()\r\n  const columns = [\r\n    { field: 'enqRefId', headerName: t('enqRefId'), width: 130, hide: true },\r\n    { field: 'name', headerName: t('name'), width: 200 },\r\n    { field: 'contactNo', headerName: t('contactNo'), width: 180 },\r\n    { field: 'email', headerName: t('email'), width: 200 },\r\n    { field: 'message', headerName: t('message'), width: 500 },\r\n\r\n  ];\r\n\r\n  useEffect(async () => {\r\n    try {\r\n      console.log(\"OMG\")\r\n      const _contact = await invokeAPIGetRequest(ENQUIRY_API_END_URL, {}, false);\r\n      console.log(_contact)\r\n      let results = _contact.results;\r\n      for (let i = 1; i <= results.length; i++) {\r\n\r\n        data.push({\r\n          id: i,\r\n          enqRefId: results[i - 1].enqRefId,\r\n          name: results[i - 1].name,\r\n          contactNo: results[i - 1].contactNo,\r\n          email: results[i - 1].email,\r\n          message: results[i - 1].message\r\n        })\r\n      }\r\n      console.log(_contact)\r\n      setRows(data);\r\n    } catch (error) {\r\n      let message = t(error.errorCode)\r\n    }\r\n  }, [])\r\n  return (\r\n    <>\r\n      <Grid container  >\r\n        <div style={{ height: '500px', width: '115%' }}>\r\n\r\n          <DataGrid rows={rows} columns={columns}  pageSize={10} radioSelection\r\n            onRowClick={(row) => {\r\n              console.log('datagrid row clicked')\r\n              uid = row.row.enqRefId\r\n              var uid = row.row.enqRefId;\r\n              setTid(uid);\r\n              navigation(\"/app/partner_manager/enquiryview/\" + uid, { replace: true })\r\n            }}\r\n          ></DataGrid>\r\n        </div>\r\n        <div>\r\n        </div>\r\n      </Grid>\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EnquiryList;\r\n",["862","863"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\Enquiry_1.js",["864","865","866","867","868","869","870","871","872","873","874"],"import React from 'react'\r\nimport { TextField, Button, Select, InputLabel, FormControl,MenuItem } from '@material-ui/core'\r\nimport { Formik} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { invokeAPIRequest } from '../../../../Request'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { ENQUIRY_API_END_URL } from '../../../constants/Constants';\r\nimport logosmall from '../../../images/logosmall.png';\r\nimport socialmedia from '../../../images/socialmedia.png';\r\nimport './Styles.css';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\r\nimport PeopleAltOutlinedIcon from '@material-ui/icons/PeopleAltOutlined';\r\nimport { useSelector } from 'react-redux'\r\nimport $ from 'jquery'\r\n\r\nconst Enquiry_1 = () => {\r\n  const enquires = {\r\n    name: \"\",\r\n    contactNo: \"\",\r\n    email: \"\",\r\n    message: \"\",\r\n    partnerType: \"\",\r\n    status: \"Inprogress\",\r\n  }\r\n\r\n  const { t } = useTranslation()\r\n  // const user = useSelector((state) => state.user)\r\n  const navigation = useNavigate()\r\n\r\n\r\n  const _validationSchema = Yup.object().shape({\r\n    name: Yup.string().min(3).max(20).required(t('name_required')),\r\n    contactNo: Yup.string().min(10).max(15).required(t('contact_no_required')),\r\n    email: Yup.string().email(t('param_email_invalid')).required(t('param_require')),\r\n    message: Yup.string().max(500).required(t('message_required')),\r\n    partnerType: Yup.string().required(t('param_require')),\r\n  })\r\n  const testicon = (e) => {\r\n    e.target.style.color = 'blue'\r\n    console.log(\"clicked icon\")\r\n  }\r\n  const facebookclick = (e) => {\r\n\r\n    window.location.href = \"https://www.facebook.com/\"\r\n    console.log(\"facebook icon clicked\")\r\n\r\n  }\r\n  const twitterclick = (e) => {\r\n    window.location.href = \"https://twitter.com/login?lang=en\"\r\n    console.log(\"twitter\")\r\n  }\r\n  const linkedclick = (e) => {\r\n    window.location.href = \"https://www.linkedin.com/login\"\r\n    console.log(\"linked\")\r\n  }\r\n   const countWords=(e)=>{\r\n     var val=e.target.value;\r\n     console.log(val.length)\r\n     if(val.length == 500){\r\n      alert('entered more than 500..');\r\n  }\r\n   }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"contactUsSection\">\r\n        &nbsp;\r\n      <div className=\"main\">\r\n          <div className=\"main-inner\">\r\n            <div className=\"logo\">\r\n              <img src={logosmall} alt={logosmall} />\r\n            </div>\r\n            <div className=\"left\">\r\n              <Formik\r\n                initialValues={enquires}\r\n                validationSchema={_validationSchema}\r\n                onSubmit={async (values, { setSubmitting }) => {\r\n                  console.log(values)\r\n                  let params = {\r\n                    \"name\": values.name,\r\n                    \"contactNo\": values.contactNo,\r\n                    \"email\": values.email,\r\n                    \"message\": values.message,\r\n                    \"partnerType\": values.partnerType,\r\n                    \"status\": \"Inprogress\",\r\n                    \"enquiryActivities\": [\r\n                      {\r\n                        \"action\": \"\",\r\n                        \"remarks\": \"\"\r\n                      }\r\n                    ]\r\n                  }\r\n                  setSubmitting(true)\r\n                  console.log(\"start of post api\")\r\n                  console.log(params)\r\n                  let _contact = await invokeAPIRequest(ENQUIRY_API_END_URL, params, false);\r\n                  console.log(_contact)\r\n                  navigation('/contact/success', { replace: true })\r\n                  //     .catch((error) => {\r\n                  //       setSubmitting(false)\r\n                  //  })\r\n                }}\r\n              >\r\n                {({ values, handleBlur, handleChange, touched, errors, isSubmitting, handleSubmit }) => (\r\n                \r\n                  <form onSubmit={handleSubmit}>\r\n                    <TextField\r\n                      type=\"text\"\r\n                      variant=\"standard\"\r\n                      onBlur={handleBlur}\r\n                      onChange={handleChange}\r\n                      name=\"name\"\r\n                      fullWidth\r\n                      value={values.name}\r\n                      margin=\"normal\"\r\n                      helperText={touched.name && errors.name}\r\n                      error={Boolean(touched.name && errors.name)}\r\n                      label={t('name_enter')}\r\n                      variant=\"outlined\"\r\n\r\n                    />\r\n\r\n                    <TextField\r\n                      className=\"mt-20\"\r\n                      type=\"text\"\r\n                      variant=\"standard\"\r\n                      onBlur={handleBlur}\r\n                      onChange={handleChange}\r\n                      name=\"contactNo\"\r\n                      fullWidth\r\n                      label={t('contactNo_enter')}\r\n                      variant=\"outlined\"\r\n                      value={values.contactNo}\r\n                      error={Boolean(touched.contactNo && errors.contactNo)}\r\n                      helperText={touched.contactNo && errors.contactNo}\r\n                    />\r\n                    <TextField\r\n                      className=\"mt-20\"\r\n                      type=\"text\"\r\n                      variant=\"standard\"\r\n                      onBlur={handleBlur}\r\n                      onChange={handleChange}\r\n                      name=\"email\"\r\n                      fullWidth\r\n                      label={t('email_enter')}\r\n                      variant=\"outlined\"\r\n                      value={values.email}\r\n                      error={Boolean(touched.email && errors.email)}\r\n                      helperText={touched.email && errors.email}\r\n                    />\r\n                    <TextField\r\n                      className=\"mt-20\"\r\n                      type=\"text\"\r\n                      variant=\"standard\"\r\n                      onBlur={handleBlur}\r\n                      onChange={handleChange}\r\n                      name=\"message\"\r\n                      fullWidth\r\n                      multiline\r\n                      rows={4}\r\n                      label={t('message_enter')}\r\n                      variant=\"outlined\"\r\n                      value={values.message}\r\n                      onKeyDown={countWords}\r\n                      error={Boolean(touched.message && errors.message)}\r\n                      helperText={touched.message && errors.message}\r\n                    />\r\n                    <div className=\"col-md-6\" style={{ 'margin-top': '22px' }}>\r\n                      <FormControl\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                      >\r\n                        <InputLabel>{t('partnerType')}</InputLabel>\r\n                        <Select\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          name=\"partnerType\"\r\n                          label={t('partnerType')}\r\n                          value={values.partnerType}\r\n                          color=\"primary\"\r\n                          variant=\"outlined\"\r\n                        //   error={Boolean(touched.partner_type && errors.partner_type)}\r\n                        //   helperText={touched.partner_type && errors.partner_type}\r\n                        >\r\n                           <MenuItem value=\"Supplier\">Supplier</MenuItem>\r\n                           <MenuItem value=\"Customer\">Customer</MenuItem>\r\n                           <MenuItem value=\"SupplierCustomer\">SupplierCustomer</MenuItem>\r\n                           <MenuItem value=\"Other\">Other</MenuItem>\r\n                        </Select>\r\n\r\n                      </FormControl>\r\n                    </div>\r\n\r\n\r\n\r\n                    <Button color=\"secondary\" type=\"submit\" disabled={isSubmitting}\r\n                      className=\"btn-blue btn-login\"\r\n                    >Send\r\n                  </Button>\r\n\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </div>\r\n            <div className=\"right\">\r\n              <h3>Get in Touch With Us</h3>\r\n              <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Dolore natus qui nemo ea sint totam, non, quo distinctio itaque, nesciunt cum.</p>\r\n              <p className=\"text-center\">\r\n                <img src={socialmedia} alt={socialmedia} />\r\n              </p>\r\n              <div className=\"SocialMedia\">\r\n                <em>Social Media </em> :\r\n                <FacebookIcon onClick={facebookclick} style={{ fontSize: 30, color: \"#3b5a9a\" }} />\r\n                <TwitterIcon onClick={twitterclick} style={{ fontSize: 30, color: \"#2ea0e7\" }} />\r\n                <LinkedInIcon onClick={linkedclick} style={{ fontSize: 30, color: \"#007bb6\" }} />\r\n              </div>\r\n            </div>\r\n            <p className=\"text-right\"><i>© Tecnics.com</i></p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>)\r\n}\r\nexport default Enquiry_1;",["875","876"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\EnqSuccess.js",["877","878","879"],"import React from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { useDispatch } from \"react-redux\"\r\nimport './enquiry.css'\r\nimport logosmall from '../../../images/logosmall.png';\r\n\r\nconst EnqSuccess = () => {\r\n \r\n  return (\r\n    <>\r\n  <div>\r\n      <div className=\"contactUsSection\">\r\n        &nbsp;\r\n      <div className=\"main\">\r\n          <div className=\"main-inner\">\r\n            <div className=\"logo\">\r\n              <img src={logosmall} alt={logosmall} />\r\n              <h1 align=\"center\">Thank you</h1>\r\n              <h2 align=\"center\">Will get back to you soon</h2>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n  </>\r\n  )\r\n}\r\n\r\n\r\nexport default EnqSuccess\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\EnquiryView.js",["880","881","882","883","884","885","886","887","888"],"import React, { useState, useEffect } from 'react'\r\nimport { TextField, Button, Grid, Typography, InputLabel, Select, FormControl ,Table,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,MenuItem} from '@material-ui/core'\r\nimport { Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { invokeAPIRequest, invokeAPIGetRequest } from '../../../../Request'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { ENQUIRY_API_END_URL } from '../../../constants/Constants'\r\nimport './enquiry.css';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport InputField from '../../../util/ui/form/InputField'\r\nimport formData from '../enquiry/formData'\r\nimport { DataGrid } from '@material-ui/data-grid';\r\n\r\nconst EnquiryView = (props) => {\r\n  const recipientsview = {\r\n    remarks: \"\",\r\n  }\r\n\r\n  let { uid } = useParams();\r\n  const { t } = useTranslation()\r\n  const [data, setData] = useState([]);\r\n  const [display, setDisplay] = useState([]);\r\n  // const [invitations, setInvitations] = useState(null)\r\n  const {enquiryDetails} = formData\r\n  const {contactNo, message, email,enquiryName,partnerType} = enquiryDetails\r\n  const navigation = useNavigate()\r\n  const columns = [\r\n    { field: 'enqRefId', headerName: t('enqRefId'), width: 130, hide: true },\r\n    { field: 'name', headerName: t('name'), width: 150 },\r\n    { field: 'contactNo', headerName: t('contactNo'), width: 150 },\r\n    { field: 'email', headerName: t('email'), width: 100 },\r\n    { field: 'message', headerName: t('message'), width: 200 },\r\n  ];\r\n  const [rows, setRows] = useState([]);\r\n  const replyView = (e) => {\r\n    console.log(\"reply clicked\")\r\n  }\r\n\r\n  const _validationSchema = Yup.object().shape({\r\n    status: Yup.string().required(t('status_require')),\r\n    remarks: Yup.string().max(500).required(t('remarks_required')),\r\n  })\r\n\r\n  useEffect(async () => {\r\n    try {\r\n      let url = ENQUIRY_API_END_URL + \"/\";\r\n      const _contactview = await invokeAPIGetRequest(url + uid, false);\r\n      console.log(\"RESPONE Data get by ID: \")\r\n      console.log(_contactview.results)\r\n      let resultsss = _contactview.results\r\n      console.log(resultsss)\r\n      setDisplay(resultsss)\r\n      console.log(display)\r\n      console.log(display.name)\r\n    } catch (error) {\r\n      let message = t(error.errorCode)\r\n\r\n    }\r\n  }, [])\r\n  return (\r\n    <Formik\r\n      initialValues={recipientsview}\r\n      validationSchema={_validationSchema}\r\n      onSubmit={async (values, { setSubmitting }) => {\r\n        console.log(values)\r\n        let params = {\r\n          \"name\": display.name,\r\n          \"contactNo\": display.contactNo,\r\n          \"email\": display.email,\r\n          \"message\": display.message,\r\n          \"partner_type\": display.partner_type,\r\n          \"status\": values.status,\r\n          \"enquiryActivities\": [\r\n            {\r\n              \"action\": \"\",\r\n              \"actionBy\": \"100001\",\r\n              \"remarks\": values.remarks\r\n            }\r\n          ]\r\n        }\r\n        setSubmitting(true)\r\n        let url = ENQUIRY_API_END_URL + \"/\";\r\n        console.log(\"put of enquiry called\")\r\n        const _data = await invokeAPIRequest(url + uid, params, false, \"put\");\r\n        console.log(\"api post request end\")\r\n        console.log(_data)\r\n        console.log(values.remarks)\r\n        console.log(\"RESPONE Data get by ID: \")\r\n        console.log(_data)\r\n        setData(_data)\r\n        console.log(data)\r\n        navigation(\"/app/partner_manager/enquires\", { replace: true })\r\n        // } catch (error) {\r\n        //   let message = t(error.errorCode)\r\n        // }\r\n      }\r\n      }\r\n    >\r\n      {({ values, handleBlur, handleChange, touched, errors, isSubmitting, handleSubmit }) => (\r\n<Grid container>\r\n<Grid xs={6}>\r\n        <form onSubmit={handleSubmit}>\r\n          {/* <div className=\"form text-center\"> */}\r\n        \r\n          <div>\r\n            \r\n          <Table>\r\n                <TableBody>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{enquiryName.label}</TableCell>\r\n                    <TableCell>{display.name}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{contactNo.label}</TableCell>\r\n                    <TableCell>{display.contactNo}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{email.label}</TableCell>\r\n                    <TableCell>{display.email}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{message.label}</TableCell>\r\n                    <TableCell>{display.message}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell className=\"rowLabel\">{partnerType.label}</TableCell>\r\n                    <TableCell>{display.partnerType}</TableCell>\r\n                  </TableRow>\r\n                  </TableBody>\r\n                  </Table>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={6}>\r\n                <div className=\"col-md-6\" style={{ 'margin-top': '22px' }}>\r\n                  <FormControl\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                  >\r\n                    <InputLabel>{t('status')}</InputLabel>\r\n                    <Select\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      name=\"status\"\r\n                      label={t('status')}\r\n                      value={values.status}\r\n                      defaultValue=\"open\"\r\n                      color=\"primary\"\r\n                      variant=\"outlined\"\r\n                      error={Boolean(touched.status && errors.status)}\r\n                    // helperText={touched.status && errors.status}\r\n                    >\r\n                       <MenuItem value=\"open\">Open</MenuItem>\r\n                           <MenuItem value=\"inprogress\">Inprogress</MenuItem>\r\n                           <MenuItem value=\"closed\">Closed</MenuItem>\r\n                    </Select>\r\n\r\n                  </FormControl>\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n            <TextField\r\n              className=\"mt-20\"\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"remarks\"\r\n              //   placeholder={t('message_enter')}\r\n              fullWidth\r\n              multiline\r\n              rows={4}\r\n              label={t('remarks_enter')}\r\n              variant=\"outlined\"\r\n              value={values.remarks}\r\n              error={Boolean(touched.remarks && errors.remarks)}\r\n            // helperText={touched.remarks && errors.remarks}\r\n            />\r\n\r\n\r\n            <Button onClick={replyView} color=\"secondary\" type=\"submit\" disabled={isSubmitting}\r\n              className=\"btn-blue btn-login\"\r\n            >Reply\r\n                  </Button>\r\n                  \r\n          </div>\r\n        </form>\r\n        </Grid>\r\n\r\n\r\n\r\n        <div>\r\n          {/* Right side grid start */}\r\n            <Grid xs={6}>    \r\n        <div style={{  height: '500px', width: '1000%',\r\n    flexgrow: \"100\",\r\n    maxwidth: \"100\",\r\n    flexbasis: \"50%\" }}>\r\n          <DataGrid rows={rows} columns={columns}  pageSize={10}\r\n            onRowClick={(row) => {\r\n              console.log('datagrid row clicked')\r\n              uid = row.row.enqRefId\r\n              var uid = row.row.enqRefId;\r\n              // setTid(uid);\r\n              // navigation(\"/app/partner_manager/enquiryview/\" + uid, { replace: true })\r\n            }}\r\n          ></DataGrid>\r\n        </div>\r\n        <div>\r\n        </div>\r\n      \r\n            </Grid>\r\n          </div>\r\n        </Grid>\r\n      \r\n\r\n     \r\n\r\n      \r\n      )}\r\n    </Formik>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default EnquiryView\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipient\\NewRecipientForm.js",["889","890","891","892","893","894","895","896","897","898","899","900","901"],"import React, { useState,useEffect } from 'react'\r\nimport { TextField, Button, Grid, Typography,InputLabel,Select,FormControl } from '@material-ui/core'\r\nimport { Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { invokeAPIGetRequest, invokeAPIRequest } from '../../../../../Request'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { RECIPIENTID_API_END_URL, RECIPIENT_API_END_URL } from '../../../../constants/Constants'\r\nimport RecipientEmail from './RecipientEmail'\r\nimport RecipientFTP from './RecipientFTP'\r\nimport RecipientWeb from './RecipientWeb'\r\nimport axios from \"axios\";\r\n//import Store from '../../../../redux/Store'\r\n\r\n\r\nconst NewRecipientForm = (props) => {\r\n\r\n  const recipients = {\r\n    recipientId: \"\",\r\n    recipientTag: \"\",\r\n    deliveryMode: \"\",\r\n    description: \"\",\r\n    isActive: 'yes',\r\n    recipientGstinMappings: \"\"\r\n  }\r\n\r\n  \r\n  const { t } = useTranslation()\r\n  const [data, setData] = useState([]);\r\n  const [recipientid,setRecipientid]=useState(\"\")\r\n  const [getValue,setGetValue]= useState(\"\");\r\n \r\n\r\n \r\n   const _validationSchema = Yup.object().shape({\r\n    recipientId: Yup.string().max(7).required(t('recipient_id_required')),\r\n    recipientTag: Yup.string().max(15).required(t('recipient_tag_required')),\r\n    // deliveryMode: Yup.string().max(255).required(t('delivery_mode_required')),\r\n    recipientGstinMappings:Yup.string().required(t('GSTN_mapping_require')),\r\n    description:Yup.string().required(t('description_require')),\r\n    isActive:Yup.string().max(255).required(t('is_active_required')),\r\n\r\n   })\r\n \r\n\r\n\r\n const  handleChanged=(e)=>{\r\n    const selectedValue=e.target.value;\r\n    setGetValue(selectedValue)\r\n    console.log(selectedValue)\r\n    console.log(getValue)\r\n   \r\n  }\r\n  \r\n  useEffect(async () => {\r\n    try {\r\n      const _recipientID = await invokeAPIGetRequest(RECIPIENTID_API_END_URL,true);\r\n      console.log(_recipientID.results)\r\n      setRecipientid(_recipientID.results)\r\n    } catch (error) {\r\n      let message = t(error.errorCode)\r\n    }\r\n  }, [])\r\n  // useEffect(async () => {\r\n  //   console.log(\"USEEFFECT\")\r\n  //   try {\r\n  //     let myparams=  \r\n  //     {\r\n  //         \"deliveryMode\": \"email\",\r\n  //                \"description\": \"mytest request here\",\r\n  //                \"recipientActivities\": [\r\n  //                    {\r\n  //                        \"actionBy\": \"010001\",\r\n  //                        \"actionComments\": \"testing\",\r\n  //                        \"activityType\": \"submit\"\r\n  //                    }\r\n  //                ],\r\n  //                \"recipientEmailMappings\": [\r\n  //                    {\r\n  //                        \"emailAddress\": \"test@gmail.com\"\r\n  //                    }\r\n  //                ],\r\n  //                \"recipientFtpMappings\": [],\r\n  //                \"recipientGstinMappings\": [{\r\n  //                    \"gstin_tag\":\"test\"\r\n     \r\n  //                }],\r\n  //                \"recipientTag\": \"test\",\r\n  //                \"recipientWebserviceMappings\": []\r\n  //            };\r\n\r\n  //            console.log(myparams)\r\n  //          //const _data = await invokeAPIRequest(RECIPIENT_API_END_URL,myparams,true,\"post\");\r\n  //          const securityToken = Store.getState().user.securityToken\r\n  //         //  options.headers[\"Authorization\"] = \"Bearer \" + securityToken\r\n  //         //  options.headers[\"Access-Control-Allow-Origin\"] = \"*\"\r\n\r\n  //          const config = {\r\n  //           headers: {\r\n  //             \"Authorization\":   \"Bearer \" + securityToken,\r\n  //             \"Access-Control-Allow-Origin\": \"*\",\r\n  //             \"Accept\": \"application/json, text/plain, */*\", \r\n  //             \"Content-Type\": \"application/json;charset=utf-8\"\r\n  //           }\r\n  //         }\r\n  //         console.log(\"request ::: =================\")\r\n  //         console.log(myparams)\r\n\r\n\r\n  //          axios\r\n  //          .post(RECIPIENT_API_END_URL,myparams,config).then((response) => {\r\n  //            console.log(\"response ::: =================\")\r\n  //            console.log(response)\r\n  //          }).catch(error => {\r\n  //           console.log(error)\r\n  //         })\r\n          \r\n  //   } catch (error) {\r\n  //     let message = t(error.errorCode)\r\n\r\n  //   }\r\n  // }, [])\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={recipients}\r\n      validationSchema={_validationSchema}\r\n      onSubmit={async (values, { setSubmitting}) => {\r\n      \r\n        let params={\r\n          \"deliveryMode\": \"email\",\r\n          \"description\": values.description,\r\n          \"isActive\": values.isActive,\r\n          \"recipientActivities\": [\r\n            \r\n              {\r\n                \"actionComments\": \"testing\",\r\n                \"activityType\": \"submit\",\r\n            }\r\n            \r\n          ],\r\n          \"recipientEmailMappings\": [\r\n              {\r\n                  \"emailAddress\": \"test\",\r\n              }\r\n          ],\r\n          \"recipientFtpMappings\": [{\r\n            // \"recipientId\":values.recipientId,\r\n            \"ftp_server\": \"\",\r\n            \"ftp_location\": \"\",\r\n            \"user_name\": \"\",\r\n            \"password\":\" \"\r\n          }],\r\n          \"recipientGstinMappings\": [{\r\n            \"gstin\": null,\r\n            \"gstinTag\": null,     \r\n          }],\r\n          // \"recipientId\": values.recipientId,\r\n          \"recipientTag\": values.recipientTag,\r\n          \"recipientWebserviceMappings\": [{\r\n            // \"recipientId\":values.recipientId,\r\n            \"url\":\"\",\r\n            \"user_name\":\"\",\r\n            \"password\":\"\"\r\n          }]\r\n      } ;\r\n      // setSubmitting(true)\r\n      let _contact = await invokeAPIRequest(RECIPIENT_API_END_URL, params, true, \"post\");\r\n      console.log(_contact)\r\n      // navigation('/contact/success', { replace: true })\r\n      //     .catch((error) => {\r\n      //       setSubmitting(false)\r\n      //  })\r\n    }}\r\n  \r\n      //  setSubmitting(true)\r\n      //     const securityToken = Store.getState().user.securityToken;\r\n      //      const config = {\r\n      //       headers: {\r\n      //         \"Authorization\":   \"Bearer \" + securityToken,\r\n      //         \"Access-Control-Allow-Origin\": \"*\",\r\n      //         \"Accept\": \"application/json, text/plain, */*\", \r\n      //         \"Content-Type\": \"application/json;charset=utf-8\"\r\n      //       }\r\n      //     }\r\n      //     console.log(\"request ::: =================\")\r\n      //     console.log(params)\r\n      //     console.log(config)\r\n         \r\n      //      axios\r\n      //      .post(RECIPIENT_API_END_URL,params,config).then((response) => {\r\n      //        console.log(\"response ::: =================\");\r\n      //        console.log(response)\r\n      //      }).catch(error => {\r\n      //       console.log(error)\r\n      //     })\r\n    >\r\n      {({ values, handleBlur, handleChange, touched, errors, isSubmitting, handleSubmit }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form text-center\">\r\n            {/* <div className=\"logo \">\r\n              <div className=\"col-md-12\">\r\n                <Typography variant='h3' style={{\r\n                  color: \"#7f3d9a\", fontWeight: \"Bold\",\r\n                  fontSize: \"34px\",\r\n                  float: \"left\"\r\n                }}> New Recipient Form</Typography>\r\n              </div>\r\n            </div> */}\r\n            <Grid container spacing={3}>\r\n            <Grid item xs={6}>\r\n            <TextField\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"recipientId\"\r\n              // placeholder={t('name_enter')}\r\n              fullWidth\r\n              value={recipientid}\r\n              margin=\"normal\"\r\n              helperText={touched.recipientId && errors.recipientId}\r\n              error={Boolean(touched.recipientId && errors.recipientId)}\r\n              label={t('recipientId')}\r\n              variant=\"outlined\"\r\n            />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n            <TextField\r\n              className=\"mt-20\"\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"partnerId\"\r\n              //   placeholder={t('contactNo_enter')}\r\n              fullWidth\r\n              label={t('partnerId')}\r\n              variant=\"outlined\"\r\n              value={values.partnerId}\r\n              error={Boolean(touched.partnerId && errors.partnerId)}\r\n              helperText={touched.partnerId && errors.partnerId}\r\n            />\r\n            </Grid>\r\n            </Grid>\r\n            <TextField\r\n              className=\"mt-20\"\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"recipientTag\"\r\n              //   placeholder={t('email_enter')}\r\n              fullWidth\r\n              label={t('recipientTag')}\r\n              variant=\"outlined\"\r\n              value={values.recipientTag}\r\n              error={Boolean(touched.recipientTag && errors.recipientTag)}\r\n              helperText={touched.recipientTag && errors.recipientTag}\r\n            />\r\n            <TextField\r\n              className=\"mt-20\"\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"description\"\r\n              //   placeholder={t('message_enter')}\r\n              fullWidth\r\n              multiline\r\n              rows={4}\r\n              label={t('description')}\r\n              variant=\"outlined\"\r\n              value={values.description}\r\n              error={Boolean(touched.description && errors.description)}\r\n              helperText={touched.description && errors.description}\r\n            />\r\n\r\n<Grid container spacing={3}>\r\n            <Grid item xs={6}>\r\n              <div className=\"col-md-6\" style={{ 'marginTop': '22px'}}>\r\n            <FormControl\r\n              fullWidth\r\n              variant=\"outlined\" >\r\n              <InputLabel>{t('is_active')}</InputLabel>\r\n              <Select\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                name=\"isActive\"\r\n                label={t('isActive')}\r\n                value={values.isActive}\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                error={Boolean(touched.isActive && errors.isActive)}\r\n                // helperText={touched.isActive && errors.isActive}\r\n              >\r\n                <option value=\"yes\">yes</option>\r\n                <option value=\"no\">no</option>\r\n                \r\n              </Select>\r\n\r\n            </FormControl>\r\n            </div>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n            <div className=\"col-md-6\" style={{ 'marginTop': '22px'}}>\r\n            <FormControl\r\n              fullWidth\r\n              variant=\"outlined\"\r\n            >\r\n              <InputLabel>{t('recipientGstinMappings')}</InputLabel>\r\n              <Select\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                name=\"recipientGstinMappings\"\r\n                label={t('recipientGstinMappings')}\r\n                value={values.recipientGstinMappings}\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                error={Boolean(touched.recipientGstinMappings && errors.recipientGstinMappings)}\r\n                // helperText={touched.recipientGstinMappings && errors.recipientGstinMappings}\r\n              >\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n              </Select>\r\n\r\n            </FormControl>\r\n            </div>\r\n            </Grid>\r\n            </Grid>\r\n            <div className=\"col-md-6\" style={{ 'marginTop': '22px'}}>\r\n            <FormControl\r\n              fullWidth\r\n              variant=\"outlined\"\r\n            >\r\n              <InputLabel>{t('deliveryMode')}</InputLabel>\r\n              <Select\r\n                id=\"deliverymode\"\r\n                onChange={handleChanged}\r\n                onBlur={handleBlur}\r\n                name=\"deliveryMode\"\r\n                label={t('deliveryMode')}\r\n                value={values.deliveryMode}\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                error={Boolean(touched.deliveryMode && errors.deliveryMode)}\r\n                // helperText={touched.deliveryMode && errors.deliveryMode}\r\n              >\r\n                <option value=\"email\">Email</option>\r\n                <option value=\"ftp\">FTP</option>\r\n                <option value=\"webservices\">WebServices</option>\r\n              </Select>\r\n              </FormControl>\r\n       \r\n       </div>\r\n        {getValue === 'email'?\r\n    \r\n      <RecipientEmail id={values.recipientId}/>\r\n         : null }\r\n     {getValue==\"ftp\"?\r\n    <RecipientFTP id={values.recipientId}/>\r\n       :null}\r\n           \r\n         {getValue == \"webservices\" ?\r\n           <RecipientWeb id={values.recipientId}/>\r\n         :null\r\n        }\r\n        </div>\r\n\r\n            <Button color=\"secondary\" type=\"submit\" disabled={isSubmitting}\r\n              className=\"btn-blue btn-login\"\r\n            >Submit\r\n                  </Button>\r\n         \r\n        </form>\r\n      )}\r\n    </Formik>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default NewRecipientForm\r\n\r\n\r\n\r\n\r\n\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipient\\RecipientGrid.js",["902","903","904","905","906"],"\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport { invokeAPIGetRequest } from '../../../../../Request'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { RECIPIENT_API_END_URL } from '../../../../constants/Constants'\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Button, Grid } from '@material-ui/core'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nfunction RecipientGrid(props) {\r\nconst data = [];\r\n  const [rows, setRows] = useState([]);\r\n  const [tid, setTid] = useState(0);\r\n  const { t } = useTranslation(); \r\n  const navigation = useNavigate()\r\n\r\nconst columns = [\r\n  { field: 'recipientId', headerName: t('recipientId'), width: 130 ,hide:\"true\"},\r\n  { field: 'recipientTag', headerName: t('recipientTag'), width: 130 },\r\n  { field: 'description', headerName: t('description'), width: 130 },\r\n  { field: 'deliveryMode', headerName: t('deliveryMode'), width: 130 },\r\n];\r\n\r\n  useEffect(async () => {\r\n    try {\r\n      const _recipient = await invokeAPIGetRequest(RECIPIENT_API_END_URL,true);\r\n      console.log(_recipient.results)\r\n     let results= _recipient.results;\r\n      for (let i = 1; i <= results.length; i++) {\r\n\r\n        data.push({\r\n          id: i,\r\n          recipientId: results[i - 1].recipientId,\r\n          recipientTag: results[i - 1].recipientTag,\r\n          description: results[i - 1].description,\r\n          deliveryMode: results[i - 1].deliveryMode\r\n        })\r\n      }\r\n      setRows(data);\r\n    } catch (error) {\r\n      let message = t(error.errorCode)\r\n    }\r\n  }, [])\r\n   const changeForm=(e)=>{\r\n      navigation(\"/app/customer_admin/newrecipientform\", { replace: true })  }\r\n  return (\r\n    <>\r\n    <div className=\"invite_new_button\">\r\n                <Button\r\n                    onClick={changeForm}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                >\r\n                   New Recipient\r\n                    {/* {t('Create_new_recipient ')} */}\r\n                </Button>\r\n            </div>\r\n      <Grid container  >\r\n        <div style={{ height: 300, width: '115%' }}>\r\n          <DataGrid rows={rows} columns={columns} pageSize={5} \r\n            onRowClick={(row) => {\r\n              console.log('datagrid row clicked')\r\n              uid = row.row.recipientId\r\n              var uid = row.row.recipientId;\r\n              setTid(uid);\r\n              navigation(\"/app/customer_admin/recipientview/\" + uid, { replace: true })\r\n            }}\r\n          ></DataGrid>\r\n        </div>\r\n        <div>\r\n        </div>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RecipientGrid;\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipient\\RecipientWeb.js",["907","908","909","910","911","912","913","914","915","916","917","918","919","920","921"],"\r\nimport React, { useState, useEffect } from 'react'\r\nimport { TextField, Button, Grid, Typography, Paper, InputLabel, MenuItem, Select, FormControl } from '@material-ui/core'\r\nimport { Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { invokeAPIRequest } from '../../../../../Request'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { RECIPIENT_API_END_URL } from '../../../../constants/Constants'\r\n\r\n\r\nconst RecipientWeb = (props) => {\r\n  let { uid } = useParams();\r\n  const { t } = useTranslation()\r\n  const [data, setData] = useState([]);\r\n\r\n\r\n  const recipientweb = {\r\n    recipientId:\" \",\r\n    url:\" \",\r\n    user_name:\"\",\r\n    password:\"\"\r\n  }\r\n\r\n   const _validationSchema = Yup.object().shape({\r\n    recipientId: Yup.string().max(20).required(t('recipientId_required')),\r\n    url: Yup.string().max(20).required(t('url_required')),\r\n    user_name:Yup.string().min(3).max(20).required(t('username_required')),\r\n    password:Yup.string().max(20).required(t('password_required'))\r\n   })\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={recipientweb}\r\n      validationSchema={_validationSchema}\r\n      onSubmit={async (values, { setSubmitting}) => {\r\n        let params={\r\n          \"recipientId\":values.recipientId,\r\n          \"url\":values.url,\r\n          \"user_name\":values.user_name,\r\n          \"password\":values.password\r\n        }\r\n   \r\n          const _data = await invokeAPIRequest(RECIPIENT_API_END_URL,params,true,\"post\");\r\n          console.log(\"RESPONE Data get by ID: \")\r\n          console.log(_data)\r\n          setData(_data)\r\n          console.log(data)\r\n      }\r\n      }\r\n    >\r\n      {({ values, handleBlur, handleChange, touched, errors, isSubmitting, handleSubmit }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form text-center\">\r\n            {/* <div className=\"logo \">\r\n              <div className=\"col-md-12\">\r\n                <Typography variant='h+' style={{\r\n                  color: \"#7f3d9a\", fontWeight: \"Bold\",\r\n                  fontSize: \"25px\",\r\n                  float: \"left\"\r\n                }}>WebServices Form</Typography>\r\n              </div>\r\n            </div> */}\r\n            <TextField\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"recipientId\"\r\n              fullWidth\r\n              value={values.recipientId}\r\n              margin=\"normal\"\r\n              helperText={touched.recipientId && errors.recipientId}\r\n              error={Boolean(touched.recipientId && errors.recipientId)}\r\n              label={t('recipientId')}\r\n              variant=\"outlined\"\r\n            />\r\n            <TextField\r\n              className=\"mt-20\"\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"url\"\r\n              fullWidth\r\n              label={t('url')}\r\n              variant=\"outlined\"\r\n              value={values.url}\r\n              error={Boolean(touched.url && errors.url)}\r\n              helperText={touched.url && errors.url}\r\n            />\r\n           \r\n            <TextField\r\n              className=\"mt-20\"\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"user_name\"\r\n              fullWidth\r\n              label={t('user_name')}\r\n              variant=\"outlined\"\r\n              value={values.user_name}\r\n              error={Boolean(touched.user_name && errors.user_name)}\r\n              helperText={touched.user_name && errors.user_name}\r\n            />\r\n            <TextField\r\n              className=\"mt-20\"\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"password\"\r\n              fullWidth\r\n              label={t('password')}\r\n              variant=\"outlined\"\r\n              value={values.password}\r\n              error={Boolean(touched.password && errors.password)}\r\n              helperText={touched.password && errors.password}\r\n            />\r\n          </div>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default RecipientWeb\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipient\\RecipientFTP.js",["922","923","924","925","926","927","928","929","930","931","932","933","934","935","936"],"\r\nimport React, { useState, useEffect } from 'react'\r\nimport { TextField, Button, Grid, Typography, Paper, InputLabel, MenuItem, Select, FormControl } from '@material-ui/core'\r\nimport { Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { invokeAPIRequest } from '../../../../../Request'\r\nimport {  useParams } from 'react-router-dom'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { RECIPIENT_API_END_URL } from '../../../../constants/Constants'\r\n\r\n\r\nconst RecipientFTP = (props) => {\r\n  let { uid } = useParams();\r\n  const { t } = useTranslation()\r\n  const [data, setData] = useState([]);\r\n  const recipientftp = {\r\n    recipientId:\" \",\r\n    ftp_server:\" \",\r\n    ftp_location:\"\",\r\n    user_name:\"\",\r\n    password:\"\"\r\n  }\r\n\r\n \r\n   const formValidationSchema = Yup.object().shape({\r\n    recipientId: Yup.string().max(7).required(t('recipientId_required')),\r\n    ftp_server: Yup.string().max(15).required(t('ftp_server_required')),\r\n    ftp_location:Yup.string().required(t('ftp_location_require')),\r\n    user_name:Yup.string().required(t('user_name_require')),\r\n    password:Yup.string().max(255).required(t('password_required')),\r\n   })\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={recipientftp}\r\n      validationSchema={formValidationSchema}\r\n      onSubmit={async (values, { setSubmitting}) => {\r\n        let params={\r\n          \"recipientId\":values.recipientId,\r\n          \"ftp_server\":values.ftp_server,\r\n          \"ftp_location\":values.ftp_location,\r\n          \"user_name\":values.user_name,\r\n          \"password\":values.password\r\n        }\r\n        // setSubmitting(true)\r\n          const _data = await invokeAPIRequest(RECIPIENT_API_END_URL,params,true,\"post\");\r\n          console.log(\"RESPONE Data get by ID: \")\r\n          console.log(_data)\r\n          setData(_data)\r\n          console.log(data)\r\n      }\r\n      }\r\n    >\r\n      {({ values, handleBlur, handleChange, touched, errors, isSubmitting, handleSubmit }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form text-center\">\r\n            {/* <div className=\"logo \">\r\n              <div className=\"col-md-12\">\r\n                <Typography variant='h6' style={{\r\n                  color: \"#7f3d9a\", fontWeight: \"Bold\",\r\n                  fontSize: \"25px\",\r\n                  float: \"left\"\r\n                }}>FTP Form</Typography>\r\n              </div>\r\n            </div> */}\r\n            <TextField\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"recipientId\"\r\n              fullWidth\r\n              value={values.recipientId}\r\n              margin=\"normal\"\r\n              helperText={touched.recipientId && errors.recipientId}\r\n              error={Boolean(touched.recipientId && errors.recipientId)}\r\n              label={t('recipientId')}\r\n              variant=\"outlined\"\r\n            />\r\n            <TextField\r\n              className=\"mt-20\"\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"ftp_server\"\r\n              fullWidth\r\n              label={t('ftp_server')}\r\n              variant=\"outlined\"\r\n              value={values.ftp_server}\r\n              error={Boolean(touched.ftp_server && errors.ftp_server)}\r\n              helperText={touched.ftp_server && errors.ftp_server}\r\n            />\r\n            <TextField\r\n              className=\"mt-20\"\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"ftp_location\"\r\n              fullWidth\r\n              label={t('ftp_location')}\r\n              variant=\"outlined\"\r\n              value={values.ftp_location}\r\n              error={Boolean(touched.ftp_location && errors.ftp_location)}\r\n              helperText={touched.ftp_location && errors.ftp_location}\r\n            />\r\n            <TextField\r\n              className=\"mt-20\"\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"user_name\"\r\n              fullWidth\r\n              label={t('user_name')}\r\n              variant=\"outlined\"\r\n              value={values.user_name}\r\n              error={Boolean(touched.user_name && errors.user_name)}\r\n              helperText={touched.user_name && errors.user_name}\r\n            />\r\n            <TextField\r\n              className=\"mt-20\"\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"password\"\r\n              fullWidth\r\n              label={t('password')}\r\n              variant=\"outlined\"\r\n              value={values.ftp_server}\r\n              error={Boolean(touched.password && errors.password)}\r\n              helperText={touched.password && errors.password}\r\n            />\r\n          </div>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default RecipientFTP\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipient\\RecipientEmail.js",["937","938","939","940","941","942"],"\r\nimport React, { useState, useEffect } from 'react'\r\nimport { TextField,Typography,Button} from '@material-ui/core'\r\nimport { Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { invokeAPIRequest } from '../../../../../Request'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { RECIPIENT_API_END_URL } from '../../../../constants/Constants'\r\n\r\n\r\nconst RecipientEmail = (props) => {\r\n  let { id } = useParams();\r\n  const { t } = useTranslation()\r\n  const [data, setData] = useState([]);\r\n  const recipientemail = {\r\n    recipientId: \"\",\r\n    emailAddress:\" \"\r\n  }\r\n   const _validationSchema = Yup.object().shape({\r\n    recipientId: Yup.string().max(7).required(t('recipient_id_required')),\r\n    // emailAddress: Yup.string().email(t('param_email_invalid')).required(t('param_require')),\r\n   })\r\n  \r\n\r\n  return (\r\n    <Formik\r\n      initialValues={recipientemail}\r\n      validationSchema={_validationSchema}\r\n      onSubmit={async (values, { setSubmitting}) => {\r\n        let params={\r\n          \"recipientId\":values.recipientId,\r\n          \"emailAddress\":values.emailAddress\r\n        }\r\n        // setSubmitting(true)\r\n          const _data = await invokeAPIRequest(RECIPIENT_API_END_URL,params,true)\r\n          console.log(\"RESPONE Data get by ID: \")\r\n          console.log(_data)\r\n          setData(_data)\r\n          console.log(data)\r\n      }\r\n      }\r\n    >\r\n      {({ values, handleBlur, handleChange, touched, errors, isSubmitting, handleSubmit }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form text-center\">\r\n            {/* <div className=\"logo \">\r\n              <div className=\"col-md-12\">\r\n                <Typography variant='h6' style={{\r\n                  color: \"#7f3d9a\", fontWeight: \"Bold\",\r\n                  fontSize: \"25px\",\r\n                  float: \"left\"\r\n                }}>Email Form</Typography>\r\n              </div>\r\n            </div> */}\r\n            <TextField\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"recipientId\"\r\n              // placeholder={t('name_enter')}\r\n              fullWidth\r\n              value={values.recipientId}\r\n              margin=\"normal\"\r\n              helperText={touched.recipientId && errors.recipientId}\r\n              error={Boolean(touched.recipientId && errors.recipientId)}\r\n              label={t('recipientId')}\r\n              variant=\"outlined\"\r\n            />\r\n            <TextField\r\n              className=\"mt-20\"\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"emailAddress\"\r\n              //   placeholder={t('contactNo_enter')}\r\n              fullWidth\r\n              label={t('emailAddress')}\r\n              variant=\"outlined\"\r\n              value={values.emailAddress}\r\n              error={Boolean(touched.emailAddress && errors.emailAddress)}\r\n              helperText={touched.emailAddress && errors.emailAddress}\r\n            />\r\n            {/* <Button color=\"secondary\" type=\"submit\" disabled={isSubmitting}\r\n              className=\"btn-blue btn-login\"\r\n            >Reply\r\n                  </Button> */}\r\n          </div>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default RecipientEmail\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\formData.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\store\\configureStore.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\store\\reducers.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirysaga\\slice\\selectors.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirysaga\\slice\\index.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirysaga\\slice\\saga.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\authentication\\slice\\selectors.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\authentication\\slice\\index.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\authentication\\slice\\saga.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirysaga\\Enquirysaga.js",["943","944","945","946","947","948","949","950","951"],"import React, { useEffect } from 'react'\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button, Select, InputLabel, FormControl, MenuItem\r\n} from '@material-ui/core'\r\nimport { Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport logosmall from '../../../../images/logosmall.png';\r\nimport socialmedia from '../../../../images/socialmedia.png';\r\nimport '../Styles.css';\r\nimport { useNavigate , Navigate} from 'react-router-dom'\r\nimport { useTranslation } from 'react-i18next'\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useEnquirySlice } from './slice'\r\nimport { selectError, selectLoading , selectFormSubmitted } from './slice/selectors'\r\n\r\nconst EnquirySaga = () => {\r\n  const fields = {\r\n    name: '',\r\n    contactNo: '',\r\n    email: '',\r\n    message: '',\r\n    partnerType: '',\r\n    status:'Inprogress',\r\n  }\r\n\r\n  const dispatch = useDispatch()\r\n  const { actions } = useEnquirySlice()\r\n  const isLoading = useSelector(selectLoading)\r\n  const { t } = useTranslation()\r\n  const navigation = useNavigate()\r\n  const error = useSelector(selectError)\r\n  const isSubmitted = useSelector(selectFormSubmitted)\r\n\r\n  const _validationSchema = Yup.object().shape({\r\n    name: Yup.string().min(3).max(20).required(t('name_required')),\r\n    contactNo: Yup.string().min(10).max(15).required(t('contact_no_required')),\r\n    email: Yup.string().email(t('param_email_invalid')).required(t('param_require')),\r\n    message: Yup.string().max(500).required(t('message_required')),\r\n    partnerType: Yup.string().required(t('param_require')),\r\n    \r\n  })\r\n\r\n\r\n  const submitForm = (values) => {\r\n    console.log(values)\r\n    dispatch(actions.enquiry(values))\r\n\r\n  }\r\n  const facebookclick = (e) => {\r\n\r\n    window.location.href = \"https://www.facebook.com/\"\r\n    console.log(\"facebook icon clicked\")\r\n\r\n  }\r\n  const twitterclick = (e) => {\r\n    window.location.href = \"https://twitter.com/login?lang=en\"\r\n    console.log(\"twitter\")\r\n  }\r\n  const linkedclick = (e) => {\r\n    window.location.href = \"https://www.linkedin.com/login\"\r\n    console.log(\"linked\")\r\n  }\r\n  const countWords = (e) => {\r\n    var val = e.target.value;\r\n    console.log(val.length)\r\n    if (val.length == 500) {\r\n      alert('entered more than 500..');\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"contactUsSection\">\r\n        {isSubmitted && <Navigate to=\"/contact/success\"/>}\r\n        &nbsp;\r\n      <div className=\"main\">\r\n          <div className=\"main-inner\">\r\n            <div className=\"logo\">\r\n              <img src={logosmall} alt={logosmall} />\r\n            </div>\r\n            <div className=\"left\">\r\n              <Formik\r\n                initialValues={fields}\r\n                validationSchema={_validationSchema}\r\n                onSubmit={(values) => { submitForm(values) }}\r\n              >\r\n                {({ values, handleChange, handleBlur, handleSubmit, handleReset, touched, errors, }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n\r\n                    <TextField\r\n                      type=\"text\"\r\n                      variant=\"standard\"\r\n                      onBlur={handleBlur}\r\n                      onChange={handleChange}\r\n                      name=\"name\"\r\n                      fullWidth\r\n                      value={values.name}\r\n                      margin=\"normal\"\r\n                      helperText={touched.name && errors.name}\r\n                      error={Boolean(touched.name && errors.name)}\r\n                      label={t('name_enter')}\r\n                      variant=\"outlined\"\r\n\r\n                    />\r\n\r\n                    <TextField\r\n                      className=\"mt-20\"\r\n                      type=\"text\"\r\n                      variant=\"standard\"\r\n                      onBlur={handleBlur}\r\n                      onChange={handleChange}\r\n                      name=\"contactNo\"\r\n                      fullWidth\r\n                      label={t('contactNo_enter')}\r\n                      variant=\"outlined\"\r\n                      value={values.contactNo}\r\n                      error={Boolean(touched.contactNo && errors.contactNo)}\r\n                      helperText={touched.contactNo && errors.contactNo}\r\n                    />\r\n\r\n\r\n                    <TextField\r\n                      className=\"mt-20\"\r\n                      type=\"text\"\r\n                      variant=\"standard\"\r\n                      onBlur={handleBlur}\r\n                      onChange={handleChange}\r\n                      name=\"email\"\r\n                      fullWidth\r\n                      label={t('email_enter')}\r\n                      variant=\"outlined\"\r\n                      value={values.email}\r\n                      error={Boolean(touched.email && errors.email)}\r\n                      helperText={touched.email && errors.email}\r\n                    />\r\n\r\n                    <TextField\r\n                      className=\"mt-20\"\r\n                      type=\"text\"\r\n                      variant=\"standard\"\r\n                      onBlur={handleBlur}\r\n                      onChange={handleChange}\r\n                      name=\"message\"\r\n                      fullWidth\r\n                      multiline\r\n                      rows={4}\r\n                      label={t('message_enter')}\r\n                      variant=\"outlined\"\r\n                      value={values.message}\r\n                      onKeyDown={countWords}\r\n                      error={Boolean(touched.message && errors.message)}\r\n                      helperText={touched.message && errors.message}\r\n                    />\r\n                    <div className=\"col-md-6\" style={{ 'margin-top': '22px' }}>\r\n                      <FormControl\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                      >\r\n                        <InputLabel>{t('partnerType')}</InputLabel>\r\n                        <Select\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          name=\"partnerType\"\r\n                          label={t('partnerType')}\r\n                          value={values.partnerType}\r\n                          color=\"primary\"\r\n                          variant=\"outlined\"\r\n                        //   error={Boolean(touched.partner_type && errors.partner_type)}\r\n                        //   helperText={touched.partner_type && errors.partner_type}\r\n                        >\r\n                          <MenuItem value=\"Supplier\">Supplier</MenuItem>\r\n                          <MenuItem value=\"Customer\">Customer</MenuItem>\r\n                          <MenuItem value=\"SupplierCustomer\">SupplierCustomer</MenuItem>\r\n                          <MenuItem value=\"Other\">Other</MenuItem>\r\n                        </Select>\r\n\r\n                      </FormControl>\r\n                    </div>\r\n\r\n\r\n                    <Button\r\n                      type=\"submit\"\r\n                      color=\"primary\"\r\n                      variant=\"contained\"\r\n                      disabled={isLoading}\r\n                      className=\"btn-blue btn-login\"\r\n                    >\r\n                      {t('Submit')}\r\n                    </Button>\r\n\r\n                    {/* <Button\r\n                      onClick={handleReset}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className=\"btn-blue btn-login\"\r\n                    >Reset</Button> */}\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </div>\r\n            <div className=\"right\">\r\n              <h3>Get in Touch With Us</h3>\r\n              <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Dolore natus qui nemo ea sint totam, non, quo distinctio itaque, nesciunt cum.</p>\r\n              <p className=\"text-center\">\r\n                <img src={socialmedia} alt={socialmedia} />\r\n              </p>\r\n              <div className=\"SocialMedia\">\r\n                <em>Social Media </em> :\r\n                <FacebookIcon onClick={facebookclick} style={{ fontSize: 30, color: \"#3b5a9a\" }} />\r\n                <TwitterIcon onClick={twitterclick} style={{ fontSize: 30, color: \"#2ea0e7\" }} />\r\n                <LinkedInIcon onClick={linkedclick} style={{ fontSize: 30, color: \"#007bb6\" }} />\r\n              </div>\r\n            </div>\r\n            <p className=\"text-right\"><i>© Tecnics.com</i></p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EnquirySaga;","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirylistsaga\\EnquiryListS.js",["952","953","954","955","956","957"],"import React, { useState, useEffect } from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport { useTranslation } from 'react-i18next'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Grid } from '@material-ui/core'\r\nimport { useEnquiryListSlice } from './slice'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { selectAllEnquires, selectLoading } from './slice/selectors'\r\nimport formData from '../formData'\r\nconst EnquiryItemsGrid = (props) => {\r\n\r\n  const { t } = useTranslation();\r\n  const [tid, setTid] = useState(0);\r\n  const navigation = useNavigate()\r\n  const { enquiryDetails } = formData\r\n\r\n  const columns = [\r\n    { field: 'enqRefId', headerName: t('enqRefId'), width: 130, hide: true },\r\n    { field: 'name', headerName: t('name'), width: 200 },\r\n    { field: 'contactNo', headerName: t('contactNo'), width: 180 },\r\n    { field: 'created_date', headerName: t('Created Date'), width: 180 },\r\n    { field: 'status', headerName: t('status'), width: 200 },\r\n    { field: 'message', headerName: t('message'), width: 500 },\r\n  \r\n\r\n  ];\r\n  let rows = []\r\n  const dispatch = useDispatch()\r\n  const { actions } = useEnquiryListSlice()\r\n  const enqList = useSelector(selectAllEnquires)\r\n  const useEffectOnMount = (effect) => {\r\n    useEffect(effect, []);\r\n  };\r\n\r\n  useEffectOnMount(() => {\r\n    console.log(\"useeffect mount called\")\r\n    dispatch(actions.loadFormDetails());\r\n\r\n  });\r\n\r\n  const _loadRows = () => {\r\n    const x = enqList.map((item, i) => ({\r\n      ...item,\r\n      id: i\r\n    }))\r\n\r\n    console.log(x)\r\n    rows = x\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Grid container  >\r\n        <div style={{ height: '500px', width: '115%' }}>\r\n          {enqList.length > 0 && _loadRows()}\r\n          <DataGrid rows={rows} columns={columns} pageSize={10}\r\n            onRowClick={(row) => {\r\n              console.log(row)\r\n              uid = row.row.id\r\n\r\n              var uid = row.row.id;\r\n              setTid(uid);\r\n              navigation(\"/app/partner_manager/enquiryview/\" + uid, { replace: true })\r\n            }\r\n\r\n            } />\r\n        </div>\r\n        <div>\r\n        </div>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnquiryListS = () => {\r\n\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <div className=\"line_items_container\">\r\n      <EnquiryItemsGrid />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EnquiryListS","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\error\\ErrorBoundary.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoice\\index.js",["958","959","960"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoice\\slice\\selector.js",[],["961","962"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoice\\slice\\index.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoice\\slice\\saga.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\layouts\\slice\\index.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\layouts\\slice\\saga.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\layouts\\slice\\selectors.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\rd\\index.js",["963","964"],"// main component \r\nimport React , { useEffect , useState } from 'react'\r\nimport {\r\n\tGrid,\r\n\tTextField,\r\n\tButton\r\n} from '@material-ui/core'\r\nimport { Formik } from 'formik'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useFormSlice } from './slice'\r\nimport {\r\n\tselectError,\r\n\tselectLoading, \r\n\tselectIsFormSubmitted,\r\n\tselectName,\r\n\tselectAddress\r\n} from './slice/selectors'\r\n\r\nconst RD = () => {\r\n\r\n\tconst { actions } = useFormSlice()\r\n\tconst dispatch = useDispatch()\r\n\tconst loading = useSelector(selectLoading)\r\n\tconst error  = useSelector(selectError)\r\n\tconst isSubmitted  = useSelector(selectIsFormSubmitted)\r\n\tconst _name  = useSelector(selectName)\r\n\tconst _address = useSelector(selectAddress)\r\n\r\n\tconst params = {\r\n\t\tname: _name,\r\n\t\taddress: _address\r\n\t}\r\n\r\n\tconst submitForm = (values) => {\r\n\t\tdispatch(actions.submitForm(values))\r\n\t}\r\n\r\n\tconst useEffectOnMount = (effect) => {\r\n    \tuseEffect(effect, []);\r\n  \t};\r\n\r\n\tuseEffectOnMount(() => {\r\n\t\tdispatch(actions.loadFormDetails());\r\n  \t});\r\n\r\n\tconsole.dir(params)  \r\n\t\t\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t{ !isSubmitted  && (\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={params}\r\n\t\t\t\tonSubmit={ (values) => {\r\n\t\t\t\t\tsubmitForm(values)\r\n\t\t\t\t}}\r\n\t\t\t\tenableReinitialize={true}\r\n\t\t\t>\r\n\t\t\t\t{({ values, handleBlur, handleChange, handleSubmit }) => (\r\n\t\t\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t\t\t<Grid item xs={4}>\r\n\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\tname=\"name\"\r\n\t\t\t\t\t\t\t\t\tvalue={values.name}\r\n\t\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t\t\tonBlur={handleBlur}\r\n\t\t\t\t\t\t\t\t\tlabel=\"name\"\r\n\t\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item xs={4}>\r\n\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\tname=\"address\"\r\n\t\t\t\t\t\t\t\t\tvalue={values.address}\r\n\t\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t\t\tonBlur={handleBlur}\r\n\t\t\t\t\t\t\t\t\tlabel=\"address\"\r\n\t\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Button \r\n\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\tdisabled={loading}\r\n\t\t\t\t\t\t> Submit Form</Button>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t)}\r\n\t\t\t</Formik> )}\r\n\r\n\t\t\t{ loading && ( <div> Loading something</div>)}\r\n\r\n\t\t\t{ error && ( <div> an error in the component</div>)}\r\n\r\n\t\t\t{ isSubmitted && ( <div> Thanks for submitting form</div>)}\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default RD","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\rd\\slice\\selectors.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\rd\\slice\\index.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\rd\\slice\\saga.js",["965","966"],"// saga middleware\r\nimport { put, select, takeLatest , takeEvery , delay ,all } from 'redux-saga/effects'\r\nimport { actions } from '.'\r\nimport {\r\n  selectName,\r\n  selectAddress\r\n} from './selectors'\r\n\r\nexport function* _sagaFormSubmit() {\r\n  console.log('_sagaFormSubmit called')\r\n  // call api to save form data\r\n  const name = yield  select(selectName)\r\n  const address = yield select(selectAddress)\r\n  console.log(name + \"\" + address)\r\n  yield delay(1000)\r\n  // response back with action\r\n  yield put(actions.formSubmitted(true));\r\n}\r\n\r\nexport function* _sagaLoadFormDetails() {\r\n  yield delay(4000)\r\n  // response back with action\r\n  yield put(actions.formLoaded({name : \"sample name\" , address : \"sample address\"}));\r\n}\r\n\r\n\r\nexport function* sagaFormSubmit () {\r\n    yield takeEvery(actions.submitForm, _sagaFormSubmit);\r\n}\r\n\r\nexport function* sagaLoadFormDetails() {\r\n  yield takeEvery(actions.loadFormDetails, _sagaLoadFormDetails);\r\n}\r\n  ","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\Recipientform.js",["967","968","969","970","971","972","973","974","975","976","977"],"import React, { useEffect , useState } from 'react'\r\nimport { TextField, Button, Grid,InputLabel,Select,FormControl, MenuItem } from '@material-ui/core'\r\nimport { Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useRecipientSlice } from './slice'\r\nimport { selectError, selectLoading ,selectIsFormSubmitted,selectRecipientId} from './slice/selectors'\r\nimport RecipientEmail from '../recipient/RecipientEmail'\r\nimport RecipientFTP from '../recipient/RecipientFTP'\r\nimport RecipientWeb from '../recipient/RecipientWeb'\r\nimport {Multiselect} from 'multiselect-react-dropdown'\r\n\r\n function Recipientform() {\r\n    const options=[\r\n        {id:'1',name:\"07AABCU9603R1ZP\"},\r\n        {id:'2',name:\"30AABCU9603R1Z0\"},\r\n        {id:'3',name:\"27AABCU9603R1ZN\"}\r\n    ] \r\n    const dispatch = useDispatch()\r\n    const { actions } = useRecipientSlice()\r\n    const loading = useSelector(selectLoading)\r\n    const error = useSelector(selectError)\r\n    // const isSubmitted = useSelector(selectIsFormSubmitted)\r\n    const { t } = useTranslation()\r\n    const _recipientId  = useSelector(selectRecipientId)\r\n    const [getValue,setGetValue]= useState(\"\");\r\n    const [data,setData]=useState(null)\r\n   \r\n    const params = {\r\n\t\trecipientId: _recipientId,\r\n\t}\r\n    const recipients = {\r\n        recipientId: \"\",\r\n        recipientTag: \"\",\r\n        deliveryMode: \"\",\r\n        description: \"\",\r\n        isActive: 'yes',\r\n        deliveryMechanism: \"\",\r\n        recipientGstinMappings: \"\"\r\n      }\r\n   \r\n      const _validationSchema = Yup.object().shape({\r\n        recipientId: Yup.string().max(7).required(t('recipient_id_required')),\r\n        recipientTag: Yup.string().max(15).required(t('recipient_tag_required')),\r\n        // deliveryMode: Yup.string().max(255).required(t('delivery_mode_required')),\r\n        recipientGstinMappings:Yup.string().required(t('GSTN_mapping_require')),\r\n        description:Yup.string().required(t('description_require')),\r\n        isActive:Yup.string().max(255).required(t('is_active_required')),\r\n        // deliveryMechanism:Yup.string().required(t('description_require')),\r\n       })\r\n  const testSubmit=(e)=>{\r\n    console.log(\"clicked on submit button\")\r\n  }\r\n    \r\n       const onSelect=(data)=>{\r\n           console.log(data)\r\n           setData(data)\r\n       }\r\n       const onRemove=(data)=>{\r\n        console.log(data)\r\n        setData(data)\r\n    }\r\n\r\n      const submitForm = (values) => {\r\n        console.log(values)\r\n        dispatch(actions.recipient(values))\r\n    }\r\n    const useEffectOnMount = (effect) => {\r\n    \tuseEffect(effect, []);\r\n  \t};\r\n\r\n\tuseEffectOnMount(() => {\r\n        console.log(\"useeffect mount called\")\r\n\t\tdispatch(actions.loadFormDetails());\r\n  \t});\r\n\r\n      console.dir(params) \r\n    return (\r\n        <div>\r\n            <h1>Recipient Saga form</h1>\r\n            <Formik\r\n      initialValues={recipients,params}\r\n      validationSchema={_validationSchema}\r\n    onSubmit={(values) => { submitForm(values) }}>\r\n    {({ values, handleChange, handleBlur, handleSubmit, handleReset, touched, errors,handleChanged }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form text-center\">\r\n            <Grid container spacing={3}>\r\n            <Grid item xs={6}>\r\n            <TextField\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"recipientId\"\r\n              fullWidth\r\n              value={values.recipientId}\r\n              margin=\"normal\"\r\n              helperText={touched.recipientId && errors.recipientId}\r\n              error={Boolean(touched.recipientId && errors.recipientId)}\r\n              label={t('recipientId')}\r\n              variant=\"outlined\"\r\n            />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n            <TextField\r\n              className=\"mt-20\"\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"partnerId\"\r\n              fullWidth\r\n              label={t('partnerId')}\r\n              variant=\"outlined\"\r\n              value={values.partnerId}\r\n              error={Boolean(touched.partnerId && errors.partnerId)}\r\n              helperText={touched.partnerId && errors.partnerId}\r\n            />\r\n            </Grid>\r\n            </Grid>\r\n            <TextField\r\n              className=\"mt-20\"\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"recipientTag\"\r\n              fullWidth\r\n              label={t('recipientTag')}\r\n              variant=\"outlined\"\r\n              value={values.recipientTag}\r\n              error={Boolean(touched.recipientTag && errors.recipientTag)}\r\n              helperText={touched.recipientTag && errors.recipientTag}\r\n            />\r\n            <TextField\r\n              className=\"mt-20\"\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              name=\"description\"\r\n              fullWidth\r\n              multiline\r\n              rows={4}\r\n              label={t('description')}\r\n              variant=\"outlined\"\r\n              value={values.description}\r\n              error={Boolean(touched.description && errors.description)}\r\n              helperText={touched.description && errors.description}\r\n            />\r\n<Grid container spacing={3}>\r\n            <Grid item xs={6}>\r\n              <div className=\"col-md-6\" style={{ 'marginTop': '22px'}}>\r\n            <FormControl\r\n              fullWidth\r\n              variant=\"outlined\" >\r\n              <InputLabel>{t('is_active')}</InputLabel>\r\n              <Select\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                name=\"isActive\"\r\n                label={t('isActive')}\r\n                value={values.isActive}\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                error={Boolean(touched.isActive && errors.isActive)}\r\n                helperText={touched.isActive && errors.isActive}\r\n              >\r\n                <MenuItem value=\"yes\">yes</MenuItem>\r\n                <MenuItem value=\"no\">no</MenuItem>\r\n                \r\n              </Select>\r\n\r\n            </FormControl>\r\n            </div>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <div className=\"col-md-6\" style={{ 'marginTop': '22px'}}>\r\n            <FormControl\r\n              fullWidth\r\n              variant=\"outlined\" >\r\n              <InputLabel>{t('deliveryMechanism')}</InputLabel>\r\n              <Select\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                name=\"deliveryMechanism\"\r\n                label={t('deliveryMechanism')}\r\n                value={values.deliveryMechanism}\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                error={Boolean(touched.deliveryMechanism && errors.deliveryMechanism)}\r\n                helperText={touched.deliveryMechanism && errors.deliveryMechanism}\r\n              >\r\n                <MenuItem value=\"push\">Push</MenuItem>\r\n                <MenuItem value=\"pull\">Pull</MenuItem>\r\n                \r\n              </Select>\r\n\r\n            </FormControl>\r\n            </div>\r\n            </Grid>\r\n            </Grid>\r\n          \r\n\r\n            <div className=\"col-md-8\" style={{ 'marginTop': '22px'}}>\r\n            <FormControl\r\n              fullWidth\r\n              variant=\"outlined\"\r\n            >\r\n              {/* <InputLabel>{t('recipientGstinMappings')}</InputLabel> */}\r\n              {/* <label style={{\r\n                    \"margin-right\": \"auto\"}}>{t('recipientGstinMappings')}</label> */}\r\n              <Multiselect\r\n          options ={options}\r\n          displayValue= \"name\"\r\n          onSelect={onSelect}\r\n          onRemove={onRemove}\r\n          label={t('recipientGstinMappings')}\r\n          showCheckbox={true}\r\n          />\r\n              {/* <Select\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                name=\"recipientGstinMappings\"\r\n                label={t('recipientGstinMappings')}\r\n                value={values.recipientGstinMappings}\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                error={Boolean(touched.recipientGstinMappings && errors.recipientGstinMappings)}\r\n                helperText={touched.recipientGstinMappings && errors.recipientGstinMappings}\r\n              >\r\n                <MenuItem value=\"07AABCU9603R1ZP\">07AABCU9603R1ZP</MenuItem>\r\n                <MenuItem value=\"30AABCU9603R1Z0\">30AABCU9603R1Z0</MenuItem>\r\n                <MenuItem value=\"27AABCU9603R1ZN\">27AABCU9603R1ZN</MenuItem>\r\n              </Select> */}\r\n            </FormControl>\r\n            </div>\r\n        \r\n\r\n            <div className=\"col-md-6\" style={{ 'marginTop': '22px'}}> \r\n            <FormControl\r\n              fullWidth\r\n              variant=\"outlined\"\r\n            >\r\n              <InputLabel>{t('deliveryMode')}</InputLabel>\r\n              <Select\r\n                id=\"deliverymode\"\r\n                // onChange={handleChange}\r\n                onChange={handleChange=(e)=>{\r\n                    const selectedValue=e.target.value;\r\n        setGetValue(selectedValue)\r\n        console.log(selectedValue)\r\n        console.log(getValue)\r\n                }}\r\n                onBlur={handleBlur}\r\n                name=\"deliveryMode\"\r\n                label={t('deliveryMode')}\r\n                value={values.deliveryMode}\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                error={Boolean(touched.deliveryMode && errors.deliveryMode)}\r\n                helperText={touched.deliveryMode && errors.deliveryMode}\r\n              >\r\n                <MenuItem value=\"email\">Email</MenuItem>\r\n                <MenuItem value=\"ftp\">FTP</MenuItem>\r\n                <MenuItem value=\"webservices\">WebServices</MenuItem>\r\n              </Select>\r\n              </FormControl>\r\n       \r\n       </div>\r\n        {getValue === 'email'?\r\n    \r\n      <RecipientEmail {...params}/>\r\n         : null }\r\n     {getValue==\"ftp\"?\r\n    <RecipientFTP />\r\n       :null}\r\n           \r\n         {getValue == \"webservices\" ?\r\n           <RecipientWeb/>\r\n         :null\r\n        }\r\n        </div>\r\n\r\n            <Button \r\n             type=\"submit\" \r\n             color=\"primary\"\r\n              disabled={loading}\r\n              onClick={testSubmit}\r\n              className=\"btn-blue btn-login\"\r\n            >Submit\r\n             </Button>\r\n            \r\n         \r\n        </form>\r\n      )}\r\n    </Formik>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Recipientform",["978","979"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\slice\\selectors.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\slice\\index.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\slice\\saga.js",["980","981","982","983"],"// saga middleware\r\nimport { put, select, takeLatest, takeEvery, delay, all } from 'redux-saga/effects'\r\nimport { actions } from '.'\r\nimport {\r\n  selectRecipientId,\r\n  selectRecipientTag, selectDescription, selectDeliveryMode, selectIsActive,\r\n  selectRecipientGstinMappings, selectAllGstins, selectAllDelmodes, selectEmailAddress\r\n  ,selectFtpServer,selectFtpLocation,selectUserName,selectPassword,selectUrl, selectDeliveryMechanism\r\n} from './selectors'\r\nimport { invokeAPIRequest, invokeAPIGetRequest } from '../../../../../../Request'\r\nimport { RECIPIENT_API_END_URL, RECIPIENTID_API_END_URL, GSTIN_MAPPING } from '../../../../../constants/Constants'\r\n\r\n\r\n\r\n\r\nexport function* _sagaFormSubmit() {\r\n  console.log('_sagaFormSubmit called')\r\n  // call api to save form data\r\n  const recipientId = yield select(selectRecipientId)\r\n  // const recipientId = recipientId\r\n  const recipientTag = yield select(selectRecipientTag)\r\n  const description = yield select(selectDescription)\r\n  const deliveryMode = yield select(selectDeliveryMode)\r\n  const deliveryMechanism = yield select(selectDeliveryMechanism)\r\n  const isActive = yield select(selectIsActive)\r\n  const recipientGstinMappings = yield select(selectAllGstins)\r\n  const emailAddress = yield select(selectEmailAddress)\r\n  const ftpServer = yield select(selectFtpServer)\r\n  const ftpLocation = yield select(selectFtpLocation)\r\n  const userName = yield select(selectUserName)\r\n  const password = yield select(selectPassword)\r\n  const url = yield select(selectUrl)\r\n\r\n  try {\r\n    let params =\r\n    {\r\n      // deliveryMode:\"email\",\r\n      deliveryMode: deliveryMode,\r\n      deliveryMechanism:deliveryMechanism,\r\n      description: description,\r\n      isActive: isActive,\r\n      recipientActivities: [],\r\n      recipientEmailMapping: [{\r\n        emailAddress: emailAddress\r\n      }],\r\n      recipientFtpMappings: [\r\n        {\r\n          ftpServer:ftpServer,\r\n          ftpLocation:ftpLocation,\r\n          userName:userName,\r\n          password:password\r\n        }\r\n      ],\r\n      recipientGstinMappings: recipientGstinMappings,\r\n      recipientTag: recipientTag,\r\n      recipientWebserviceMappings: [{\r\n        url:url,\r\n        userName:userName,\r\n        password:password\r\n      }],\r\n      recipientId: recipientId\r\n    }\r\n    console.log(JSON.stringify(params))\r\n    let api = yield invokeAPIRequest(RECIPIENT_API_END_URL, params, true)\r\n    console.log(\"api called\")\r\n    yield put(actions.formSubmitted(api.results));\r\n  } catch (error) {\r\n    yield put(actions.setError(error));\r\n  }\r\n}\r\nexport function* _sagaLoadFieldDetails() {\r\n  console.log(\"get api called\")\r\n  try {\r\n    let api = yield invokeAPIGetRequest(RECIPIENTID_API_END_URL, true);\r\n    console.log(\"end of get\")\r\n    console.log(api)\r\n    console.log(api.results)\r\n    yield put(actions.formLoaded({ recipientId: api.results }));\r\n  } catch (error) {\r\n    console.log(\"error block of get\")\r\n    yield put(actions.setError(error));\r\n  }\r\n}\r\n\r\nexport function* _sagaLoadFormDetails(props) {\r\n  try {\r\n\r\n    let api = yield invokeAPIGetRequest(RECIPIENT_API_END_URL, true)\r\n    yield put(actions.loadedAllRecipients(api.results));\r\n  } catch (error) {\r\n    console.log(\"error in api\")\r\n    yield put(actions.recipientlistError(error));\r\n  }\r\n}\r\nexport function* _sagaLoadMultiSelect(props) {\r\n  try {\r\n    let arr = [];\r\n    let api = yield invokeAPIGetRequest(GSTIN_MAPPING, true)\r\n    console.log(Object.keys(api.results))\r\n    console.log(Object.values(api.results))\r\n    var arrKeys = Object.keys(api.results);\r\n    var arrValues = Object.values(api.results);\r\n\r\n    for (let i = 0; i < arrKeys.length; i++) {\r\n      arr.push(\r\n        {\r\n          // id: i + 1, \r\n          gstin: arrKeys[i],\r\n          gstinTag: arrValues[i]\r\n        },\r\n      )\r\n      console.log(arr)\r\n    }\r\n    yield put(actions.loadedAllGstin(arr));\r\n  } catch (error) {\r\n    console.log(\"error in api\")\r\n    yield put(actions.recipientlistError(error));\r\n  }\r\n}\r\n\r\n\r\nexport function* sagaFormSubmit() {\r\n  yield takeLatest(actions.recipient, _sagaFormSubmit);\r\n}\r\n\r\nexport function* sagaLoadFieldDetails() {\r\n  yield takeEvery(actions.loadFormDetails, _sagaLoadFieldDetails);\r\n}\r\nexport function* sagaLoadFormDetails() {\r\n  yield takeEvery(actions.loadFormDetails, _sagaLoadFormDetails);\r\n}\r\nexport function* sagaLoadMultiSelect() {\r\n  yield takeEvery(actions.loadFormDetails, _sagaLoadMultiSelect);\r\n}\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipient\\Multiselects.js",["984"],"import React,{useState} from 'react'\r\nimport {Multiselect} from 'multiselect-react-dropdown'\r\n\r\nfunction Multiselects(){\r\n  \r\n  const options=[\r\n    {id: '1' ,name:'Swathi'},\r\n    {id: '2' ,name:'Sravanthi'},\r\n    {id: '3' ,name:'Farooq'},\r\n    {id: '4' ,name:'Chaithanya'},\r\n    {id: '5' ,name:'Karthik'}\r\n  ]\r\n\r\n    const [data, setData] = useState(options)\r\n    const onSelect=(data)=>{\r\n      console.log(data)\r\n    }\r\n    const onRemove=(data)=>{\r\n      console.log(data)\r\n    }\r\n   \r\n  return (\r\n    <div>\r\n      <h1>multiselect dropdown</h1>\r\n      <div>\r\n        <Multiselect\r\n          options ={data}\r\n          displayValue=\"name\"\r\n          onSelect={onSelect}\r\n          onRemove={onRemove}\r\n          />\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Multiselects\r\n\r\n\r\n// import React from 'react';\r\n// import clsx from 'clsx';\r\n// import { makeStyles, useTheme } from '@material-ui/core/styles';\r\n// import Input from '@material-ui/core/Input';\r\n// import InputLabel from '@material-ui/core/InputLabel';\r\n// import MenuItem from '@material-ui/core/MenuItem';\r\n// import FormControl from '@material-ui/core/FormControl';\r\n// import ListItemText from '@material-ui/core/ListItemText';\r\n// import Select from '@material-ui/core/Select';\r\n// import Checkbox from '@material-ui/core/Checkbox';\r\n// import Chip from '@material-ui/core/Chip';\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   formControl: {\r\n//     margin: theme.spacing(1),\r\n//     minWidth: 120,\r\n//     maxWidth: 300,\r\n//   },\r\n//   chips: {\r\n//     display: 'flex',\r\n//     flexWrap: 'wrap',\r\n//   },\r\n//   chip: {\r\n//     margin: 2,\r\n//   },\r\n//   noLabel: {\r\n//     marginTop: theme.spacing(3),\r\n//   },\r\n// }));\r\n\r\n// const ITEM_HEIGHT = 48;\r\n// const ITEM_PADDING_TOP = 8;\r\n// // const MenuProps = {\r\n// //   PaperProps: {\r\n// //     style: {\r\n// //       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n// //       width: 250,\r\n// //     },\r\n// //   },\r\n// // };\r\n\r\n// const names = [\r\n//   'Oliver Hansen',\r\n//   'Van Henry',\r\n//   'April Tucker',\r\n//   'Ralph Hubbard',\r\n//   'Omar Alexander',\r\n//   'Carlos Abbott',\r\n//   'Miriam Wagner',\r\n//   'Bradley Wilkerson',\r\n//   'Virginia Andrews',\r\n//   'Kelly Snyder',\r\n// ];\r\n\r\n// // function getStyles(name, personName, theme) {\r\n// //   return {\r\n// //     fontWeight:\r\n// //       personName.indexOf(name) === -1\r\n// //         ? theme.typography.fontWeightRegular\r\n// //         : theme.typography.fontWeightMedium,\r\n// //   };\r\n// // }\r\n\r\n// const Multiselect=() =>{\r\n//   const classes = useStyles();\r\n//   const theme = useTheme();\r\n//   const [personName, setPersonName] = React.useState([]);\r\n\r\n//   const handleChange = (event) => {\r\n//     setPersonName(event.target.value);\r\n//   };\r\n\r\n//   const handleChangeMultiple = (event) => {\r\n//     const { options } = event.target;\r\n//     const value = [];\r\n//     for (let i = 0, l = options.length; i < l; i += 1) {\r\n//       if (options[i].selected) {\r\n//         value.push(options[i].value);\r\n//       }\r\n//     }\r\n//     setPersonName(value);\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n      \r\n//       <FormControl className={classes.formControl}>\r\n//         <InputLabel id=\"demo-mutiple-checkbox-label\">Tag</InputLabel>\r\n//         <Select\r\n//           labelId=\"demo-mutiple-checkbox-label\"\r\n//           id=\"demo-mutiple-checkbox\"\r\n//           multiple\r\n//           value={personName}\r\n//           onChange={handleChange}\r\n//           input={<Input />}\r\n//           renderValue={(selected) => selected.join(', ')}\r\n//         //   MenuProps={MenuProps}\r\n//         >\r\n//           {names.map((name) => (\r\n//             <MenuItem key={name} value={name}>\r\n//               <Checkbox checked={personName.indexOf(name) > -1} />\r\n//               <ListItemText primary={name} />\r\n//             </MenuItem>\r\n//           ))}\r\n//         </Select>\r\n//       </FormControl>\r\n     \r\n     \r\n     \r\n \r\n//     </div>\r\n//   );\r\n// }\r\n// export default Multiselect","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\index.js",["985","986","987","988","989","990","991"],"\r\nimport React, { useState, useEffect } from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport { useTranslation } from 'react-i18next'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Grid, Button } from '@material-ui/core'\r\nimport { useRecipientSlice } from './slice'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { selectAllRecipients, selectLoading } from './slice/selectors'\r\nimport MetaformData from './MetaformData'\r\nconst RecipientItemsGrid = () => {\r\n\r\n  const { t } = useTranslation();\r\n  const [tid, setTid] = useState(0);\r\n  const navigation = useNavigate()\r\n  const { recipientDetails } = MetaformData\r\n  const columns = [\r\n    { field: 'recipientId', headerName: t('recipientId'), width: 130, hide: true },\r\n    { field: 'recipientTag', headerName: t('recipientTag'), width: 200 },\r\n    { field: 'description', headerName: t('description'), width: 180 },\r\n    { field: 'deliveryMode', headerName: t('deliveryMode'), width: 200 },\r\n  ];\r\n  let rows = []\r\n  const dispatch = useDispatch()\r\n  const { actions } = useRecipientSlice()\r\n  const recpList = useSelector(selectAllRecipients)\r\n  const useEffectOnMount = (effect) => {\r\n    useEffect(effect, []);\r\n  };\r\n\r\n  useEffectOnMount(() => {\r\n    console.log(\"useeffect mount called\")\r\n    dispatch(actions.loadFormDetails());\r\n  });\r\n  const _loadRows = () => {\r\n    // alert('_loadRows called')\r\n    const x = recpList.map((item, i) => ({\r\n      ...item,\r\n      id: i\r\n    }))\r\n    console.log(x)\r\n    rows = x\r\n  }\r\n  const recipients = {\r\n    newrecipientform: {\r\n      recipientId: \"\",\r\n      recipientTag: \"\",\r\n      deliveryMode: \"\",\r\n      description: \"\",\r\n      isActive: 'yes',\r\n      deliveryMechanism: \"\",\r\n      recipientGstinMappings: \"\"\r\n    },\r\n    recipientemail: {\r\n      recipientId: \"\",\r\n      emailAddress: \" \"\r\n    },\r\n    recipientftp: {\r\n      recipientId: \" \",\r\n      ftp_server: \" \",\r\n      ftp_location: \"\",\r\n      user_name: \"\",\r\n      password: \"\"\r\n    },\r\n    recipientweb: {\r\n      recipientId: \" \",\r\n      url: \" \",\r\n      user_name: \"\",\r\n      password: \"\"\r\n    }\r\n  }\r\n  const changeForm = (e) => {\r\n    navigation(\"/app/customer_admin/newrecipientform\", { replace: true })\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"invite_new_button\">\r\n        <Button\r\n          onClick={changeForm}\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n        >\r\n          New Recipient\r\n                   \r\n        </Button>\r\n      </div>\r\n      <Grid container  >\r\n        <div style={{ height: '500px', width: '115%' }}>\r\n          {recpList.length > 0 && _loadRows()}\r\n          <DataGrid rows={rows} columns={columns} pageSize={10}\r\n            onRowClick={(row) => {\r\n              console.log('datagrid row clicked')\r\n              console.log(row)\r\n              uid = row.row.id\r\n              var uid = row.row.id;\r\n              setTid(uid);\r\n              navigation(\"/app/customer_admin/recipientview/\" + uid, { replace: true })\r\n            }\r\n\r\n            } />\r\n        </div>\r\n        <div>\r\n        </div>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Recipientstest = () => {\r\n\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <div className=\"line_items_container\">\r\n      <RecipientItemsGrid />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Recipientstest","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\_components\\RecipientNewForm.js",["992","993","994","995","996","997","998","999","1000","1001","1002"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\form\\_Input.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirylistsaga\\slice\\index.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirylistsaga\\slice\\saga.js",["1003"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirylistsaga\\slice\\selectors.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\_components\\RecipientFTP.js",["1004","1005"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\_components\\RecipientWeb.js",["1006","1007"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\_components\\RecipientEmail.js",["1008","1009","1010"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirylistsaga\\_components\\Enquiryviewsaga.js",["1011","1012","1013","1014","1015","1016","1017","1018","1019","1020","1021","1022"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  TextField, Button, Grid, Typography, InputLabel, Select, FormControl, Table,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell, MenuItem\r\n} from '@material-ui/core'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport '../../../enquiry/enquiry.css';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport InputField from '../../../../../util/ui/form/InputField'\r\nimport formData from '../../formData'\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport EnquiryListS from '../EnquiryListS';\r\nimport Enquiryviewlists from './Enquiryviewlists';\r\nimport { useEnquiryListSlice } from '../slice'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { selectAllEnquires, selectLoading, selectError } from '../slice/selectors'\r\nimport $ from 'jquery';\r\n\r\n\r\nconst Enquiryviewsaga = (props) => {\r\n  let rows = []\r\n  let { uid } = useParams();\r\n  const { t } = useTranslation();\r\n  const navigation = useNavigate()\r\n  const { enquiryDetails } = formData\r\n  const { contactNo, message, email, enquiryName, partnerType } = enquiryDetails\r\n  let statusval=false;\r\n\r\n  let id = null;\r\n  let ename= null;\r\n  let econtactNo = null;\r\n  let eemail = null;\r\n  let emessage = null;\r\n  let epartnerType = null;\r\n  let estatus = null;\r\n\r\n\r\n  const _validationSchema = Yup.object().shape({\r\n    // remarks: Yup.string().max(500).required(t('remarks_required')),\r\n  })\r\n  // let rows = []\r\n  const dispatch = useDispatch()\r\n  const { actions } = useEnquiryListSlice()\r\n  const loading = useSelector(selectLoading)\r\n  const enqList = useSelector(selectAllEnquires)\r\n  const error = useSelector(selectError)\r\n\r\n  const useEffectOnMount = (effect) => {\r\n    useEffect(effect, []);\r\n  };\r\n\r\n  useEffectOnMount(() => {\r\n    console.log(\"useeffect mount called\")\r\n    dispatch(actions.loadFormDetails());\r\n  },[enqList]);\r\n\r\n  const _loadRows = () => {\r\n    const x = enqList.map((item, i) => ({\r\n      ...item,\r\n      id: i\r\n    }))\r\n    console.log(x)\r\n    rows = x\r\n    rows.name = x\r\n    id = rows[uid].enqRefId\r\n    ename= rows[uid].name\r\n    econtactNo = rows[uid].contactNo\r\n    eemail= rows[uid].email\r\n    emessage = rows[uid].message\r\n    epartnerType = rows[uid].partnerType\r\n    estatus=rows[uid].status\r\n    console.log(\"======================================\")\r\n    console.log(uid)\r\n    console.log(estatus)\r\n    if(estatus==='closed'){\r\n      statusval=true\r\n    }\r\n\r\n  }\r\n  const enqview = {\r\n    remarks: '',\r\n    status: 'Inprogress',\r\n    enqRefId: id,\r\n    name: ename,\r\n    contactNo : econtactNo,\r\n    email : eemail,\r\n    message : emessage,\r\n    partnerType : epartnerType\r\n  }\r\n\r\n\r\n  const submitForm = (values) => {\r\n\r\n    values.enqRefId = rows[uid].enqRefId\r\n    values.name= rows[uid].name\r\n    values.contactNo = rows[uid].contactNo\r\n    values.email= rows[uid].email\r\n    values.message = rows[uid].message\r\n    values.partnerType = rows[uid].partnerType\r\n    console.log(values)\r\n    dispatch(actions.enquiryview(values))\r\n\r\n  }\r\n  const changeClose=(values)=>{\r\n    // e.preventDefault()\r\n    // console.log(\"change remarks called\")\r\n    // $('.showRemarks').hide();\r\n    // navigation(\"/app/partner_manager/enquires\", { replace: true })\r\n    // console.log(values)\r\n    $('.showRemarks').hide();\r\n    values.enqRefId = rows[uid].enqRefId\r\n    values.name= rows[uid].name\r\n    values.contactNo = rows[uid].contactNo\r\n    values.email= rows[uid].email\r\n    values.message = rows[uid].message\r\n    values.partnerType = rows[uid].partnerType\r\n    values.status=\"closed\";\r\n    console.log(values)\r\n     dispatch(actions.statusChanged(values))\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n    \r\n      <Grid container>\r\n        {enqList.length > 0 && _loadRows()}\r\n        <Grid xs={6}>\r\n          <Table>\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell className=\"rowLabel\">{enquiryName.label}</TableCell>\r\n                <TableCell>{rows[uid].name}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell className=\"rowLabel\">{contactNo.label}</TableCell>\r\n                <TableCell>{rows[uid].contactNo}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell className=\"rowLabel\">{email.label}</TableCell>\r\n                <TableCell>{rows[uid].email}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell className=\"rowLabel\">{message.label}</TableCell>\r\n                <TableCell>{rows[uid].message}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell className=\"rowLabel\">{partnerType.label}</TableCell>\r\n                <TableCell>{rows[uid].partnerType}</TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={6}>\r\n\r\n            </Grid>\r\n          </Grid>\r\n          <Formik\r\n            initialValues={enqview}\r\n            validationSchema={_validationSchema}\r\n            onSubmit={(values) => { submitForm(values) }}\r\n          >\r\n            {({ values, handleChange, handleBlur, handleSubmit, handleReset, touched, errors, }) => (\r\n              <form onSubmit={handleSubmit}>\r\n\r\n               { statusval !==true?(<div className=\"showRemarks\">\r\n                <TextField\r\n                  className=\"mt-20\"\r\n                  type=\"text\"\r\n                  variant=\"standard\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  name=\"remarks\"\r\n                  placeholder={t('remarks_enter')}\r\n                  fullWidth\r\n                  multiline\r\n                  rows={4}\r\n                  label={t('remarks_enter')}\r\n                  // variant=\"outlined\"\r\n                  value={values.remarks}\r\n                //  error={Boolean(touched.remarks && errors.remarks)}\r\n                //  helperText={touched.remarks && errors.remarks}\r\n                />\r\n                \r\n                <Button\r\n                  type=\"submit\"\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  disabled={loading}\r\n                  style={{\"margin\": \"21px 0px 0px 38px\"}}\r\n                >\r\n                  {t('Add Remarks')}\r\n                  \r\n                </Button>\r\n                <Button\r\n                \r\n                onClick={(e)=>changeClose(values) }\r\n                  type=\"submit\"\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  disabled={loading}\r\n                  style={{\"margin\": \"21px 0px 0px 38px\"}}\r\n                >\r\n                  {t('Close')}\r\n                </Button>\r\n                \r\n                </div> ):\r\n                (<></>)\r\n               }\r\n              \r\n                \r\n              </form>\r\n            )}\r\n          </Formik>\r\n        </Grid>\r\n\r\n\r\n\r\n        <div>\r\n          {/* Right side grid start */}\r\n          <Grid xs={6}>\r\n            <div style={{\r\n              height: '500px', width: '1000%',\r\n              flexgrow: \"100\",\r\n              maxwidth: \"100\",\r\n              flexbasis: \"50%\"\r\n            }}>\r\n              <h1>History</h1>\r\n              {/* <EnquiryListS /> */}\r\n              <Enquiryviewlists id={uid}/>\r\n            </div>\r\n          </Grid>\r\n        </div>\r\n      </Grid>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Enquiryviewsaga","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\enquiry\\enquirylistsaga\\_components\\Enquiryviewlists.js",["1023","1024","1025","1026","1027","1028","1029","1030"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\_components\\RecipientView.js",["1031","1032","1033","1034","1035","1036","1037","1038","1039","1040"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  TextField, Button, Grid, Typography, InputLabel, Select, FormControl, Table,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell, MenuItem\r\n} from '@material-ui/core'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { useRecipientSlice } from '../slice'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { selectAllRecipients } from '../slice/selectors'\r\nimport MetaformData from '../MetaformData'\r\nimport '../../../../common/enquiry/enquiry.css';\r\n\r\n\r\nconst RecipientView = (props) => {\r\n  let rows = []\r\n  let { uid } = useParams();\r\n  const { t } = useTranslation();\r\n  const { recipientDetails } = MetaformData\r\n  const { recipientTag, description, deliveryMode } = recipientDetails\r\n\r\n\r\n\r\n  const dispatch = useDispatch()\r\n  const { actions } = useRecipientSlice()\r\n  const recpList = useSelector(selectAllRecipients)\r\n\r\n  const useEffectOnMount = (effect) => {\r\n    useEffect(effect, []);\r\n  };\r\n\r\n  useEffectOnMount(() => {\r\n    console.log(\"useeffect mount called\")\r\n    dispatch(actions.loadFormDetails());\r\n  });\r\n  const _loadRows = () => {\r\n    //   alert('_loadRows called')\r\n    const x = recpList.map((item, i) => ({\r\n      ...item,\r\n      id: i\r\n    }))\r\n    console.log(x)\r\n    rows = x\r\n    rows.deliveryMode = x\r\n    console.log(rows.deliveryMode[0])\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      {/* <h1>view form</h1> */}\r\n      <Grid container>\r\n        {recpList.length > 0 && _loadRows()}\r\n        <Grid xs={6}>\r\n          <Table>\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell className=\"rowLabel\">{recipientTag.label}</TableCell>\r\n                <TableCell>{rows[uid].recipientTag}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell className=\"rowLabel\">{description.label}</TableCell>\r\n                <TableCell>{rows[uid].description}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell className=\"rowLabel\">{deliveryMode.label}</TableCell>\r\n                <TableCell>{rows[uid].deliveryMode}</TableCell>\r\n              </TableRow>\r\n\r\n            </TableBody>\r\n          </Table>\r\n\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default RecipientView","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\recipientsaga\\MetaformData.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todosaga\\index.js",["1041","1042","1043","1044","1045","1046","1047","1048","1049"],"import React, { useState, useEffect } from 'react'\r\nimport { DataGrid, useFilter } from '@material-ui/data-grid';\r\nimport { useTranslation } from 'react-i18next'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Grid, Button, Typography, Checkbox, Select, MenuItem } from '@material-ui/core'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { selectAllTodo, selectAllPriorityList, selectCompletedTodoList, selectDeletedTodoList, selectStarredTodoList, selectPriorityTodoList, selectLowPriorityTodoList } from './slice/selectors';\r\nimport { useTodoSlice } from './slice';\r\nimport TodoUpdate from './_components/TodoUpdate'\r\nimport '../todo/todo.css'\r\nimport $ from 'jquery';\r\nimport CreateTodo from './_components/CreateTodo'\r\nimport { Delete, Done, Error, ListAlt, LowPriorityRounded, PriorityHighRounded, Star, StarBorder } from '@material-ui/icons';\r\n\r\nconst StarredCheckbox = withStyles({\r\n  root: {\r\n    color: \"Black\",\r\n    '&$checked': {\r\n      color: \"#FFD740\",\r\n    },\r\n  },\r\n  checked: {},\r\n})((props) => <Checkbox color=\"default\" {...props} />);\r\nconst TodoGrid = (props) => {\r\n  const [filters, setFilters] = useState(\"All\")\r\n  const { t } = useTranslation();\r\n  const [taskData, setTaskData] = useState([])\r\n  const [tid, setTid] = useState(0);\r\n  const navigation = useNavigate()\r\n  const [starredVal, setStarredVal] = useState(false)\r\n  let starred = useState({\r\n    flag: false,\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      field: 'flag',\r\n      headerName: 'Flag',\r\n      width: 50,\r\n      // disableClickEventBubbling: true,\r\n      renderCell: (params) => {\r\n        return (\r\n          params.row.flag === \"true\" ?\r\n            <StarredCheckbox\r\n              color=\"primary\"\r\n              label=\"flag\"\r\n              name=\"flag\"\r\n              onChange={params.row}\r\n              checked={params.row.flag}\r\n              inputProps={{ 'aria-label': 'secondary checkbox', 'spacing': '6' }}\r\n              checkedIcon={<Star />}\r\n              icon={<StarBorder />}\r\n            /> :\r\n            params.row.flag === \"false\" ?\r\n              <StarredCheckbox\r\n                color=\"primary\"\r\n                label=\"flag\"\r\n                name=\"flag\"\r\n                checked={starred.flag}\r\n                onChange={params.row}\r\n\r\n                inputProps={{ 'aria-label': 'secondary checkbox', 'spacing': '6' }}\r\n                checkedIcon={<Star />}\r\n                icon={<StarBorder />}\r\n              /> :\r\n              <StarredCheckbox\r\n                color=\"primary\"\r\n                label=\"flag\"\r\n                name=\"flag\"\r\n                onChange={params.row}\r\n                checked={params.row.flag}\r\n                inputProps={{ 'aria-label': 'secondary checkbox', 'spacing': '6' }}\r\n                checkedIcon={<Star />}\r\n                icon={<StarBorder />}\r\n              />\r\n        )\r\n      }\r\n    },\r\n    {\r\n      field: 'title', headerName: 'Tasks Title', width: 1100,\r\n      renderCell: (params) => {\r\n\r\n        return (\r\n          params.row.status === \"Completed\" ?\r\n            <Typography style={{ textDecoration: \"line-through\", color: \"green\" }}>{params.row.title}<p>{params.row.description}</p></Typography> :\r\n            params.row.status === \"Deleted\" ?\r\n              <Typography style={{ textDecoration: \"line-through\", color: \"red\" }}>{params.row.title}<p >{params.row.description}</p></Typography> :\r\n              <Typography >{params.row.title}<p >{params.row.description}</p></Typography>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      field: 'priority', headerName: 'Priority', width: 50,\r\n      renderCell: (params) => {\r\n        return (\r\n          params.row.priority === \"high\" ?\r\n            <Typography style={{ backgroundColor: \"#ef9a9a\" }}>{<PriorityHighRounded />}</Typography> :\r\n            params.row.priority === \"medium\" ?\r\n              <Typography style={{ backgroundColor: \"#FFF59D\", color: \"#263238\" }}>{<PriorityHighRounded />}</Typography> :\r\n              <Typography style={{ backgroundColor: \"#C5E1A5\", color: \"#263238\", }}>{<PriorityHighRounded />}</Typography>\r\n        )\r\n      }\r\n\r\n    },\r\n  ];\r\n  let rows = []\r\n  const dispatch = useDispatch()\r\n  const { actions } = useTodoSlice()\r\n  const todoList = useSelector(selectAllTodo)\r\n  const priorityList = useSelector(selectAllPriorityList)\r\n  const completedTodoList = useSelector(selectCompletedTodoList)\r\n  const deletedTodoList = useSelector(selectDeletedTodoList)\r\n  const starredTodoList = useSelector(selectStarredTodoList)\r\n  const priorityListView = useSelector(selectPriorityTodoList)\r\n  const priorityLowListView = useSelector(selectLowPriorityTodoList)\r\n\r\n  const useEffectOnMount = (effect) => {\r\n    useEffect(effect, []);\r\n  };\r\n\r\n  useEffectOnMount(() => {\r\n    console.log(\"useeffect mount called\")\r\n    dispatch(actions.loadFormDetails());\r\n\r\n  });\r\n  const getAllList = () => {\r\n    $('.btn-div').hide()\r\n    console.log(\"@@@@@ Get All List\")\r\n    dispatch(actions.loadFormDetails())\r\n  }\r\n  const getAllPriorityList = () => {\r\n    $('.btn-div').show()\r\n    dispatch(actions.loadAllPriorityListDetails())\r\n\r\n  }\r\n  const getPriorityList = () => {\r\n    $('.btn-div').show()\r\n    dispatch(actions.loadPriorityListDetails())\r\n\r\n  }\r\n  const getCompletedTodoList = () => {\r\n    $('.btn-div').hide()\r\n    dispatch(actions.loadCompletedTodoListDetails())\r\n\r\n  }\r\n  const getDeletedTodoList = () => {\r\n    $('.btn-div').hide()\r\n    dispatch(actions.loadDeletedTodoListDetails())\r\n  }\r\n  const getStarredTodoList = () => {\r\n    $('.btn-div').hide()\r\n    dispatch(actions.loadStarredTodoListDetails())\r\n  }\r\n  const getLowPriorityList = () => {\r\n    $('.btn-div').show()\r\n    dispatch(actions.loadLowPriorityListDetails())\r\n  }\r\n\r\n  const _loadRows = () => {\r\n\r\n    $('.btn-div').hide()\r\n    let x = null;\r\n    switch (filters) {\r\n      case \"All\":\r\n        x = todoList.map((item, i) => ({\r\n          ...item,\r\n          id: i\r\n        }))\r\n        break;\r\n      case \"priority\":\r\n        $('.btn-div').show()\r\n        x = priorityList.map((item, i) => ({\r\n          ...item,\r\n          id: i\r\n        }))\r\n        break;\r\n      case \"completed\":\r\n        x = completedTodoList.map((item, i) => ({\r\n          ...item,\r\n          id: i\r\n        }))\r\n        break;\r\n      case \"deleted\":\r\n        x = deletedTodoList.map((item, i) => ({\r\n          ...item,\r\n          id: i\r\n        }))\r\n        break;\r\n      case \"flag\":\r\n        x = starredTodoList.map((item, i) => ({\r\n          ...item,\r\n          id: i\r\n        }))\r\n        break;\r\n      case \"high\":\r\n        $('.btn-div').show()\r\n        x = priorityListView.map((item, i) => ({\r\n          ...item,\r\n          id: i\r\n        }))\r\n        break;\r\n      case \"low\":\r\n        $('.btn-div').show()\r\n        x = priorityLowListView.map((item, i) => ({\r\n          ...item,\r\n          id: i\r\n        }))\r\n        break;\r\n    }\r\n    rows = x\r\n  }\r\n\r\n  const filterChange = (e) => {\r\n    if (e.target.value === \"priority\") {\r\n      getAllPriorityList();\r\n    }\r\n    if (e.target.value === \"completed\") {\r\n      getCompletedTodoList();\r\n    }\r\n    if (e.target.value === \"deleted\") {\r\n      getDeletedTodoList();\r\n    }\r\n    if (e.target.value === \"flag\") {\r\n      getStarredTodoList();\r\n    }\r\n    setFilters(e.target.value);\r\n  }\r\n  const ButtonHandler = value => () => {\r\n    if (value === \"high\") {\r\n      getPriorityList();\r\n    }\r\n    if (value === \"priority\") {\r\n      getAllPriorityList();\r\n    }\r\n    if (value === \"low\") {\r\n      getLowPriorityList();\r\n    }\r\n    setFilters(value);\r\n\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Grid container  >\r\n        <div style={{ height: '500px', width: '115%' }}>\r\n          <Select displayEmpty label=\"action\" color=\"action\" style={{ minWidth: \"200px\" }} onChange={filterChange}>\r\n            <MenuItem aria-label=\"None\" disabled key={1} >Select </MenuItem>\r\n            <MenuItem value=\"All\" key={2} ><ListAlt />&nbsp;&nbsp;All</MenuItem>\r\n            <MenuItem value=\"flag\" key={3} ><Star />&nbsp;&nbsp;Starred</MenuItem>\r\n            <MenuItem value=\"priority\" key={4}><Error />&nbsp;&nbsp;Priority</MenuItem>\r\n            <MenuItem value=\"completed\" key={5}><Done />&nbsp;&nbsp;Done</MenuItem>\r\n            <MenuItem value=\"deleted\" key={5}><Delete />&nbsp;&nbsp;Deleted</MenuItem>\r\n          </Select>\r\n\r\n          <div className=\"btn-div\">\r\n            <Button\r\n              style={{ backgroundColor: \"#ef9a9a\", color: \"#263238\", textTransform: \"none\", marginLeft: \"0px\" }}\r\n              startIcon={<PriorityHighRounded />}\r\n              onClick={ButtonHandler(\"high\")}\r\n            >\r\n              Priority High</Button>\r\n            <Button\r\n              style={{ backgroundColor: \"#FFF59D\", color: \"#263238\", textTransform: \"none\", marginLeft: \"10px\" }}\r\n              onClick={ButtonHandler('priority')}\r\n            >\r\n              Priority Medium</Button>\r\n            <Button style={{ backgroundColor: \"#C5E1A5\", color: \"#263238\", textTransform: \"none\", marginLeft: \"10px\" }}\r\n              startIcon={<LowPriorityRounded />}\r\n              onClick={ButtonHandler('low')}\r\n            >\r\n              Priority Low</Button>\r\n          </div>\r\n          {todoList.length > 0 && _loadRows()}\r\n          <DataGrid rows={rows} columns={columns} pageSize={10}\r\n            onRowClick={(row) => {\r\n              setTid(row.row.id);\r\n              setTaskData(row.row)\r\n              console.log(tid)\r\n              $('.EditUpdateTaskToDo').toggleClass(\"open\")\r\n            }\r\n            } />\r\n        </div>\r\n        <div>\r\n        </div>\r\n      </Grid>\r\n      <div className=\"EditUpdateTaskToDo\">\r\n        {\r\n          taskData.length !== 0 ? (<TodoUpdate id={tid} />) : (\"please select the row to edit\")\r\n        }\r\n        {/* (<TodoUpdate id={tid} />) */}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Todolistsaga = () => {\r\n\r\n  const handleAddTask = (e) => {\r\n    $('.CreateNewTask').toggleClass(\"open\")\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Grid container>\r\n        <div className=\"CreateNewTask\">\r\n          <CreateTodo />\r\n        </div>\r\n\r\n        <Grid item xs={12} className=\"todoRight\">\r\n          <div className=\"search_wrapper\">\r\n            <input type=\"text\" id=\"Search_cntrl\" placeholder=\"Search...\" />\r\n            {/* <div className=\"invite_new_button\"> */}\r\n            <Button color=\"primary\" variant=\"contained\"\r\n              onClick={handleAddTask}\r\n            >Add Task</Button>\r\n            {/* </div> */}\r\n            <div>\r\n              <TodoGrid />\r\n            </div>\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\nexport default Todolistsaga\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todosaga\\slice\\selectors.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todosaga\\slice\\index.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todosaga\\slice\\saga.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todosaga\\_components\\CreateTodo.js",["1050","1051","1052"],"import React from 'react'\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport { Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport {\r\n    Grid,\r\n    TextField,\r\n    Button,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useTodoSlice } from '../slice'\r\nimport { selectError, selectLoading ,selectFormSubmitted} from '../slice/selectors'\r\nimport { Close } from '@material-ui/icons';\r\nimport { useNavigate} from 'react-router-dom';\r\nimport $ from 'jquery';\r\n\r\n const  CreateTodo=()=> {\r\n   \r\n    const todo ={\r\n        title: '',\r\n        description: '',\r\n        assignedTo: '',\r\n        priority: '',\r\n        flag: true,\r\n        dueDate: '', // YYYY-MM-DD\r\n        status: '',\r\n        action: '',\r\n        comments: ''\r\n    }\r\n    \r\n    const dispatch = useDispatch()\r\n    const { actions } = useTodoSlice()\r\n    const isLoading = useSelector(selectLoading)\r\n    const { t } = useTranslation()\r\n    const navigation = useNavigate()\r\n    const error = useSelector(selectError)\r\n    const isSubmitted = useSelector(selectFormSubmitted)\r\n \r\n    const _validationSchema = Yup.object().shape({\r\n        title: Yup.string().max(75).required(('Title Require')),\r\n        description: Yup.string().max(250).required(('Description Require')),\r\n        assignedTo: Yup.string().max(50).required(('Assign To Require')),\r\n        priority: Yup.string().required(('Priority Require')),\r\n        dueDate: Yup.string().required(('Due Date Require')),\r\n    })\r\n\r\n    const submitForm = (values) => {\r\n        console.log(values)\r\n        dispatch(actions.todo(values))\r\n    \r\n      }\r\n      const handleCreateClose = () => {\r\n        $('.CreateNewTask').toggleClass(\"open\")\r\n    }\r\n    return (\r\n        <div>\r\n          <h1>This is create todo form</h1>   \r\n          <Grid container  >\r\n            <div className=\"CreateNewTask\">\r\n                <Button id=\"close\" variant=\"contained\" color=\"primary\" style={{ textTransform: \"none\", justifyItems: \"flex-end\", margin: \"0px 0px 0px 195px\" }} onClick={handleCreateClose}>\r\n                    <Close fontSize=\"large\" style={{ fontSize: \"20px\" }} />\r\n                </Button>\r\n                <label>Create Task</label>\r\n                {/* {isSubmitted && <Navigate to=\"/app/partner_manager/todo\" />} */}\r\n                <Formik\r\n                    initialValues={todo}\r\n                    validationSchema={_validationSchema}\r\n                    onSubmit={(values) => { submitForm(values) }}\r\n                    >\r\n {({ values, handleChange, handleBlur, handleSubmit, handleReset, touched, errors, }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                      \r\n                       {/* <Grid item xs={12}>                                 */}\r\n                                <FormControl style={{ width: '100%' }} >\r\n                                    <TextField\r\n                                        type=\"text\"\r\n                                        variant=\"standard\"\r\n                                        onBlur={handleBlur}\r\n                                        onChange={handleChange}\r\n                                        name=\"title\"\r\n                                        fullWidth\r\n                                        value={values.title}\r\n                                        margin=\"normal\"\r\n                                        helperText={touched.title && errors.title}\r\n                                        error={Boolean(touched.title && errors.title)}\r\n                                        label={t('title')}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </FormControl>\r\n                            {/* </Grid> */}\r\n                            {/* <Grid container spacing={3}> */}\r\n                {/* <Grid item xs={6}> */}\r\n                            {/* <Grid item xs={12}> */}\r\n                                <FormControl style={{ width: '100%' }}>\r\n                                <InputLabel >Assign To:</InputLabel>\r\n                                    <Select\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        name=\"assignedTo\"\r\n                                        displayEmpty                                                                    \r\n                                        label={t(\"assign_to\")}\r\n                                        color=\"primary\"\r\n                                        value={values.assignedTo}                                  >\r\n                                        <MenuItem aria-label=\"None\" disabled key={1} >{t(\"assign_to\")}</MenuItem>\r\n                                        <MenuItem value=\"Swathi\" key={2}>Swathi</MenuItem>\r\n                                        <MenuItem value=\"Farooq\" key={3}>Farooq</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            {/* </Grid> */}\r\n\r\n                           \r\n                {/* <Grid item xs={6}> */}\r\n                            {/* <Grid item xs={12}> */}\r\n                               \r\n                                <FormControl style={{ width: '100%' }}>\r\n                                <InputLabel >Priority:</InputLabel>\r\n                                    <Select\r\n                                        name=\"priority\"\r\n                                        displayEmpty                                       \r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        label={t(\"priority\")}\r\n                                        color=\"primary\"\r\n                                        value={values.priority}\r\n\r\n                                    >\r\n                                        <MenuItem aria-label=\"None\" disabled key={1} >{t(\"priority\")}</MenuItem>\r\n                                        <MenuItem value=\"high\" key={2}>High</MenuItem>\r\n                                        <MenuItem value=\"medium\" key={3}>Medium</MenuItem>\r\n                                        <MenuItem value=\"low\" key={4}>Low</MenuItem>\r\n                                    </Select>\r\n                                    <FormHelperText error={Boolean(touched.priority && errors.priority)}>{touched.priority && errors.priority}</FormHelperText>\r\n                                </FormControl>\r\n                            {/* </Grid> */}\r\n                            {/* </Grid> */}\r\n                            {/* <Grid container spacing={3}> */}\r\n                            {/* <Grid item xs={6}> */}\r\n                                <InputLabel >{t(\"due_date\")}:</InputLabel>\r\n                                <FormControl style={{ width: '100%' }} >\r\n                                    <TextField\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        name=\"dueDate\"\r\n                                        color=\"primary\"\r\n                                        value={values.dueDate}\r\n                                        type=\"date\"\r\n                                        error={Boolean(touched.dueDate && errors.dueDate)}\r\n                                        helperText={touched.dueDate && errors.dueDate}\r\n                                    />\r\n                                </FormControl>\r\n                            {/* </Grid> */}\r\n\r\n                            {/* <Grid item xs={6}> */}\r\n                            {/* <Grid item xs={12}> */}\r\n                                {/* <FormControl style={{ width: '100%' }}>\r\n                                    <InputLabel >{t(\"status\")}:</InputLabel>\r\n                                    <Select\r\n                                        name=\"status\"\r\n                                        displayEmpty\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        label={t(\"status\")}\r\n                                        color=\"status\"\r\n                                        value={values.status}\r\n                                    >\r\n                                        <MenuItem aria-label=\"None\" disabled key={1} >{t(\"status\")}</MenuItem>\r\n                                        <MenuItem value=\"Inprogress\" key={2}>InProgress</MenuItem>\r\n                                        <MenuItem value=\"Completed\" key={3}>Completed</MenuItem>\r\n                                    </Select>\r\n                                    <FormHelperText error={Boolean(touched.status && errors.status)}>{touched.status && errors.status}</FormHelperText>\r\n                                </FormControl> */}\r\n                            {/* </Grid> */}\r\n                            {/* </Grid> */}\r\n                            {/* <Grid item xs={12}> */}\r\n\r\n                                <FormControl style={{ width: '100%' }}>\r\n                                    <TextField\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        name=\"description\"\r\n                                        label={t('description')}\r\n                                        color=\"primary\"\r\n                                        value={values.description}\r\n                                        multiline\r\n                                        rows={4}\r\n                                        error={Boolean(touched.description && errors.description)}\r\n                                        helperText={touched.description && errors.description}\r\n                                    />\r\n                                </FormControl>\r\n                            {/* </Grid> */}\r\n                            {/* <Grid item xs={12}>\r\n                                <FormControl style={{ width: '100%' }}>\r\n                                    <InputLabel >Action:</InputLabel>\r\n                                    <Select\r\n                                        name=\"action\"\r\n                                        displayEmpty\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        color=\"primary\"\r\n                                        value={values.action}\r\n                                    >\r\n                                        <MenuItem aria-label=\"None\" disabled key={1} >Action</MenuItem>\r\n                                        <MenuItem value=\"submit\" key={2}>Submit</MenuItem>\r\n                                        <MenuItem value=\"updated\" key={3}>Updated</MenuItem>\r\n                                        <MenuItem value=\"commented\" key={4}>Commented</MenuItem>\r\n                                    </Select>\r\n                                    <FormHelperText error={Boolean(touched.action && errors.action)}>{touched.action && errors.action}</FormHelperText>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <FormControl style={{ width: '100%' }}>\r\n                                    <TextField\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        name=\"comments\"\r\n                                        color=\"primary\"\r\n                                        label=\"Comments\"\r\n                                        type=\"comments\"\r\n                                        multiline\r\n                                        rows={4}\r\n                                        value={values.comments}\r\n                                        error={Boolean(touched.comments && errors.comments)}\r\n                                        helperText={touched.comments && errors.comments}\r\n                                    />\r\n\r\n                                </FormControl>\r\n                            </Grid> */}\r\n                            <Grid item xs={12}>\r\n                                <MenuItem className=\"addTaskHolder\">\r\n                                 <Button\r\n                                  style={{ marginLeft: \"600px\" }}\r\n                      type=\"submit\"\r\n                      color=\"primary\"\r\n                      variant=\"contained\"\r\n                      disabled={isLoading}\r\n                    //   className=\"btn-blue btn-login\"\r\n                    >\r\n                      {t('Add')}\r\n                    </Button>\r\n\r\n                                </MenuItem>\r\n                            </Grid>\r\n                           \r\n\r\n                  </form>\r\n                \r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        </Grid>\r\n        </div>\r\n    )\r\n}\r\nexport default CreateTodo\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\vendormapping\\_components\\VendorGrid.js",["1053","1054","1055","1056","1057"],"import { DataGrid } from '@material-ui/data-grid';\r\nimport { invokeAPIGetRequest } from '../../../../../Request'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { VENDORS_API_END_URL } from '../../../../constants/Constants'\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Button, Grid } from '@material-ui/core'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport $ from 'jquery'\r\nimport './vendorform.css'\r\nimport Vendorform from './Vendorform';\r\nfunction VendorGrid(props) {\r\nconst data = [];\r\n  const [rows, setRows] = useState([]);\r\n  const [tid, setTid] = useState(0);\r\n  const { t } = useTranslation(); \r\n  const navigation = useNavigate()\r\n\r\nconst columns = [\r\n  { field: 'customerPartnerId', headerName: t('customerPartnerId'), width: 130 },\r\n  { field: 'vendorPartnerId', headerName: t('vendorPartnerId'), width: 130 },\r\n  { field: 'description', headerName: t('description'), width: 130 },\r\n];\r\n\r\n  useEffect(async () => {\r\n    try {\r\n      const _recipient = await invokeAPIGetRequest(VENDORS_API_END_URL,true);\r\n      console.log(_recipient)\r\n      console.log(_recipient.results)\r\n     let results= _recipient.results;\r\n      for (let i = 1; i <= results.length; i++) {\r\n\r\n        data.push({\r\n          id: i,\r\n          customerPartnerId: results[i - 1].customerPartnerId,\r\n          vendorPartnerId: results[i - 1].vendorPartnerId,\r\n          description: results[i - 1].description,\r\n        })\r\n      }\r\n      setRows(data);\r\n    } catch (error) {\r\n      let message = t(error.errorCode)\r\n //     console.log(error)\r\n    }\r\n  }, [])\r\n   const changeForm=(e)=>{\r\n    $('.EditUpdateTask').toggleClass(\"open\")\r\n   }\r\n    //   navigation(\"/app/vendor_admin/vendorform\", { replace: true })  }\r\n  return (\r\n    <>\r\n    <div className=\"invite_new_button\">\r\n                <Button\r\n                    onClick={changeForm}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                >\r\n                   New Vendor\r\n                    {/* {t('Create_new_recipient ')} */}\r\n                </Button>\r\n            </div>\r\n      <Grid container  >\r\n        <div style={{ height: 300, width: '115%' }}>\r\n          <DataGrid rows={rows} columns={columns} pageSize={5} \r\n            onRowClick={(row) => {\r\n              console.log('datagrid row clicked')\r\n              uid = row.row.recipientId\r\n              var uid = row.row.recipientId;\r\n              setTid(uid);\r\n              navigation(\"/app/customer_admin/recipientview/\" + uid, { replace: true })\r\n            }}\r\n          ></DataGrid>\r\n        </div>\r\n        <div>\r\n        </div>\r\n      </Grid>\r\n      <div className=\"EditUpdateTask\">\r\n          <Vendorform/>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default VendorGrid;\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\vendormapping\\_components\\Vendorform.js",["1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074","1075","1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Grid,\r\n    TextField,\r\n    Button,\r\n    InputAdornment,\r\n    IconButton,\r\n    FormControl,\r\n    InputLabel,\r\n    MenuItem,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions\r\n} from '@material-ui/core'\r\nimport { Formik, useFormikContext } from 'formik'\r\nimport { useVendorMappingSlice } from '../slice'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport {\r\n    selectError,\r\n    selectLoading,\r\n    selectIsFormSubmitted,\r\n    selectAllMappedVendors,\r\n    selectedPartnerId,\r\n    selectSearchVendor,\r\n    selectAllVendors,\r\n    search_data_vendors,\r\n    selectFormSubmitted\r\n} from '../slice/selectors';\r\nimport { Navigate, useNavigate, useParams } from 'react-router-dom'\r\nimport { SearchIcon } from '@material-ui/data-grid'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { store } from \"../../../../../inv/store/configureStore\"\r\nimport SearchVendor from './SearchVendor'\r\nimport _Input from '../../../../util/ui/form/_Input'\r\nimport $ from 'jquery'\r\nimport { Close } from '@material-ui/icons'\r\nimport InputField from '../../../../util/ui/form/InputField'\r\nconst Vendorform = (props) => {\r\n    let rows = []\r\n    let { uid } = useParams();\r\n    const navigation = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const { actions } = useVendorMappingSlice()\r\n    const vendorList = useSelector(selectAllMappedVendors)\r\n    const loading = useSelector(selectLoading)\r\n    const error = useSelector(selectError)\r\n    //const isSubmitted = useSelector(selectIsFormSubmitted)\r\n    const { t } = useTranslation();\r\n    let selectedId = useSelector(selectedPartnerId)\r\n    let id = null;\r\n    const openSearch = useSelector(selectSearchVendor)\r\n    const vendorAllList = useSelector(selectAllVendors)\r\n    const [myobj, setMyobj] = useState(\"\")\r\n    const [getID, setGetID] = useState(0)\r\n    const [taskData, setTaskData] = useState({})\r\n    const searchvendorListData = useSelector(search_data_vendors)\r\n    const isSubmitted = useSelector(selectFormSubmitted)\r\n    const [searchButton, setSearchButton] = useState(false)\r\n\r\n    const useEffectOnMount = (effect) => {\r\n        useEffect(effect, []);\r\n    };\r\n\r\n\r\n    useEffectOnMount(() => {\r\n        console.log(\"useeffect Mapped mount called\")\r\n        //   dispatch(actions.loadMappedVendors());\r\n        dispatch(actions.loadVendorFormDetails());\r\n    }, []);\r\n    const viewSearch = (e) => {\r\n        console.log(\"clicked on search icon\")\r\n        navigation(\"/app/vendor_manager/vendorsearch\", { replace: true })\r\n    }\r\n\r\n    // console.log(\"@@@@@@@@@@\", myobj)\r\n    const vendors = {\r\n        customerPartnerId: store.getState()._loginSlice.user.partnerId,\r\n        vendorPartnerId: myobj,\r\n        description: \"\",\r\n        // actionTaken: \"\",\r\n        // actionComments: \"\"\r\n    }\r\n    //  console.log(\"DATAAAAAAAAAAA\", vendors)\r\n    const submitForm = (values) => {\r\n        values.vendorPartnerId = myobj;\r\n        console.log(values)\r\n        dispatch(actions.vendorForm(values))\r\n    }\r\n    const handleVendorClick = () => {\r\n        dispatch(actions.openSearchVendors(true))\r\n    }\r\n\r\n    const submitFormSearch = (values) => {\r\n        console.log(values)\r\n        setSearchButton(true);\r\n        dispatch(actions.searchvendorForm(values))\r\n    }\r\n\r\n    const closeSearch = () => {\r\n        dispatch(actions.closeSearchVendors(false))\r\n    }\r\n\r\n    const columns = [\r\n        { field: 'partnerId', headerName: t('partnerId'), width: 200 },\r\n        { field: 'companyName', headerName: t('companyName'), width: 250 },\r\n    ];\r\n    const handleCreateClose = () => {\r\n        $('.EditUpdateTask').toggleClass(\"open\")\r\n    }\r\n\r\n    const _loadRows = () => {\r\n        let x = null;\r\n        if (searchButton === true) {\r\n\r\n            x = searchvendorListData.map((item, i) => ({\r\n                ...item,\r\n                id: i\r\n            }))\r\n            rows = x;\r\n\r\n\r\n        } else {\r\n            x = vendorAllList.map((item, i) => ({\r\n                ...item,\r\n                id: i\r\n            }))\r\n            rows = x;\r\n        }\r\n\r\n    }\r\n\r\n    const handleRecipientClick = () => {\r\n        dispatch(actions.openSearchRecipients(true))\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"EditUpdateTask\">\r\n                <label>ADD VENDORS</label>\r\n                {/* {isSubmitted && <Navigate to=\"/app/vendor_manager/MappedVendorList\"/>} */}\r\n                <Formik\r\n                    initialValues={vendors}\r\n                    onSubmit={(values) => {\r\n                        console.log(values)\r\n                        submitForm(values)\r\n                    }}\r\n                >\r\n                    {({ values, handleChange, handleBlur, handleSubmit, handleReset }) => (\r\n                        <div>\r\n                            <form onSubmit={handleSubmit} >\r\n                                <Button variant=\"contained\" color=\"primary\" style={{ textTransform: \"none\", justifyItems: \"flex-end\", margin: \"-50px 0px 0px 200px\" }} onClick={handleCreateClose}>\r\n                                    <Close fontSize=\"large\" style={{ fontSize: \"20px\" }} />\r\n                                </Button>\r\n                                <div>               <Grid item xs={12}>\r\n                                   \r\n                                </Grid>\r\n                                    {/* <SearchIcon\r\n                                        onClick={viewSearch}\r\n                                    /> */}\r\n                                    {/*\r\n                                     <FormControl variant=\"standard\" >\r\n                                        {/* <InputLabel>Vendor Code</InputLabel> */}\r\n                                    {/* <div>{myobj}</div>\r\n                                    <InputField\r\n                                        name=\"partnerId\"\r\n                                        label=\"VendorCode\"\r\n                                        defaultValue={myobj}\r\n                                    ></InputField>\r\n                                    <IconButton\r\n                                        edge=\"end\"\r\n                                        onClick={handleVendorClick}\r\n                                    >\r\n                                        <SearchIcon /> */}\r\n                                    {/* </IconButton>   */}\r\n                                    {/* </FormControl> */}\r\n\r\n                                    <FormControl variant=\"standard\"  >\r\n                                        <InputLabel style={{margin: \"-35px 0px 0px 0px\"}}>Recipient Code</InputLabel>\r\n                                        <div style={{ display: \"inline-flex\" }}>\r\n                                            <InputField\r\n                                                name=\"initialState.partnerId\"\r\n                                                // label=\"Recipient Code\"\r\n                                            />\r\n\r\n                                            <IconButton\r\n                                                edge=\"end\"\r\n                                                onClick={handleVendorClick}\r\n                                                style={{\r\n                                                    marginRight: \" 66px\",\r\n                                                    marginTtop: \"12px\"\r\n                                                }}>\r\n                                                <SearchIcon />\r\n                                            </IconButton>\r\n\r\n                                        </div>\r\n\r\n                                    </FormControl>\r\n                                    <SearchVendor />\r\n                                    {/* <div className=\"search_container\">\r\n                                    {vendorAllList.length > 0 && _loadRows()}\r\n                                    <Dialog\r\n                                        open={openSearch}\r\n                                        onClose={closeSearch}\r\n                                        fullWidth={true}\r\n                                    >\r\n                                        <DialogTitle>{t('Vendors')}</DialogTitle>\r\n                                        <DialogContent>\r\n                                            <Formik\r\n                                                initialValues={vendors}\r\n                                                onSubmit={(values) => {\r\n                                                    submitFormSearch(values)\r\n                                                }}\r\n                                            >\r\n                                                {({ values, handleChange, handleBlur, handleSubmit, handleReset }) => (\r\n                                                    <div>\r\n                                                        <form onSubmit={handleSubmit} >\r\n                                                            <div >\r\n                                                                <TextField\r\n                                                                    style={{ margin: \"-36px 60px 0px 59px\" }}\r\n                                                                    className=\"mt-20\"\r\n                                                                    type=\"text\"\r\n                                                                    variant=\"standard\"\r\n                                                                    onBlur={handleBlur}\r\n                                                                    onChange={handleChange}\r\n                                                                    name=\"search\"\r\n                                                                    label={t('search')}\r\n                                                                    value={values.search}\r\n                                                                />\r\n                                                                <Button\r\n                                                                    color=\"primary\"\r\n                                                                    variant=\"contained\"\r\n                                                                    type=\"submit\"\r\n                                                                >Search</Button>\r\n                                                            </div>\r\n                                                        </form>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Formik>\r\n                                            <div style={{ height: 300, width: '100%' }}>\r\n                                                <DataGrid columns={columns} rows={rows} pageSize={10}\r\n                                                    checkboxSelection\r\n                                                    selection={{ mode: 'single' }}\r\n                                                    onRowClick={(row) => {\r\n                                                        setMyobj(row.row.partnerId)\r\n                                                        //    console.log(\"PPPPP\", myobj)\r\n\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                        </DialogContent>\r\n                                        <DialogActions>\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                onClick={closeSearch}\r\n                                            >\r\n                                                {t('select')}\r\n                                            </Button>\r\n                                        </DialogActions>\r\n                                    </Dialog>\r\n                                </div> */}\r\n\r\n                                </div>\r\n\r\n                                <TextField\r\n                                    className=\"mt-20\"\r\n                                    type=\"text\"\r\n                                    variant=\"standard\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    name=\"description\"\r\n                                    fullWidth\r\n                                    multiline\r\n                                    rows={4}\r\n                                    label={t('description')}\r\n                                    variant=\"outlined\"\r\n                                    value={values.description}\r\n                                />\r\n\r\n                                {/* <TextField\r\n                                className=\"mt-20\"\r\n                                type=\"text\"\r\n                                variant=\"standard\"\r\n                                onBlur={handleBlur}\r\n                                onChange={handleChange}\r\n                                name=\"actionTaken\"\r\n                                fullWidth\r\n                                label={t('actionTaken')}\r\n                                variant=\"outlined\"\r\n                                value={values.actionTaken}\r\n                            />\r\n                            <TextField\r\n                                className=\"mt-20\"\r\n                                type=\"text\"\r\n                                variant=\"standard\"\r\n                                onBlur={handleBlur}\r\n                                onChange={handleChange} s\r\n                                name=\"actionComments\"\r\n                                fullWidth\r\n                                multiline\r\n                                rows={4}\r\n                                label={t('actionComments')}\r\n                                variant=\"outlined\"\r\n                                value={values.actionComments}\r\n                            /> */}\r\n\r\n                                <Grid item xs={12}>\r\n                                    <MenuItem className=\"addTaskHolder\">\r\n                                        <Button\r\n                                            id=\"close\"\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                            type=\"submit\"\r\n                                        >Ok</Button>&nbsp;&nbsp;\r\n                                 <Button\r\n                                            onClick={handleReset}\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                        >Reset</Button>\r\n                                    </MenuItem>\r\n                                </Grid>\r\n\r\n                            </form>\r\n                        </div>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\nexport default Vendorform","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\vendormapping\\_components\\VendorSearch.js",["1090","1091","1092","1093"],"import React, { useState, useEffect } from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport { useTranslation } from 'react-i18next'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Button } from '@material-ui/core'\r\nimport { useVendorMappingSlice } from '../slice'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { selectAllVendors } from '../slice/selectors'\r\nimport '../_components/vendorform.css'\r\nimport Vendorform from '../_components/Vendorform';\r\nimport {VENDORSEARCH_API_END_URL} from '../../../../constants/Constants'\r\nimport {invokeAPIGetRequest} from  '../../../../../Request'\r\nimport $ from 'jquery'\r\n\r\nconst VendorAllItemsGrid = (props) => {\r\n\r\n  const { t } = useTranslation();\r\n  const [tid, setTid] = useState(0);\r\n  const navigation = useNavigate()\r\n  const columns = [\r\n    { field: 'partnerId', headerName: t('partnerId'), width: 200 },\r\n    { field: 'companyName', headerName: t('companyName'), width: 250 },\r\n  ];\r\n\r\n  let rows = []\r\n  const dispatch = useDispatch()\r\n  const { actions } = useVendorMappingSlice()\r\n  const vendorAllList = useSelector(selectAllVendors)\r\n  \r\n\r\n  const useEffectOnMount = (effect) => {\r\n    useEffect(effect, []);\r\n  };\r\n\r\n  useEffectOnMount(() => {\r\n    console.log(\"use effect mount vendor search called\")\r\n    dispatch(actions.loadVendorFormDetails());\r\n  });\r\n\r\n  const _loadRows = () => {\r\n    const x = vendorAllList.map((item, i) => ({\r\n      ...item,\r\n      id: i\r\n    }))\r\n    rows = x;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ height: \"1000px\" }}>\r\n        <div className=\"search_wrapper\" >\r\n          <input type=\"text\" id=\"Search_cntrl\" placeholder=\"Search...\" />\r\n          <input\r\n            type=\"submit\"\r\n            value=\"Search\"\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            onClick={async () => {\r\n              const _vendorsearch = await invokeAPIGetRequest(VENDORSEARCH_API_END_URL, true);\r\n              console.log(_vendorsearch)\r\n            }\r\n            }\r\n          />\r\n        </div>\r\n        <div style={{ height: '300px', width: '100%' }}>\r\n          {vendorAllList.length > 0 && _loadRows()}\r\n          <DataGrid rows={rows} columns={columns} pageSize={10}\r\n\r\n            onRowClick={(row) => {\r\n              console.log(row.row.partnerId + 'datagrid row clicked')\r\n              uid = row.row.partnerId\r\n              var uid = row.row.partnerId;\r\n              setTid(uid);\r\n\r\n              if (window.confirm('Do You want to select the vendor with id :' + uid)) {\r\n                console.log(\"if\")\r\n                navigation(\"/app/vendor_manager/vendorform/\" + uid, { replace: true })\r\n                //   $('.EditUpdateTask').toggleClass(\"open\")\r\n\r\n              } else {\r\n\r\n                console.log(\"else\")\r\n              }\r\n\r\n            }}\r\n          ></DataGrid>\r\n          <Button color=\"primary\"\r\n          >Ok</Button>\r\n        </div>\r\n      </div>\r\n      <div className=\"EditUpdateTask\">\r\n        <Vendorform id={tid} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst VendorSearch = () => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <div className=\"line_items_container\">\r\n      <VendorAllItemsGrid />\r\n    </div>\r\n  )\r\n}\r\nexport default VendorSearch","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\vendormapping\\slice\\selectors.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\vendormapping\\slice\\index.js",["1094"],"// all slice implementation\r\nimport { Navigation } from '@material-ui/icons';\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport {\r\n  useInjectReducer,\r\n  useInjectSaga,\r\n} from 'redux-injectors';\r\nimport { all } from 'redux-saga/effects';\r\nimport { sagaFormSubmit, sagaLoadFormDetails, sagaLoadVendorDetails, sagasearchFormSubmit } from './saga'\r\n\r\nexport const initialState = {\r\n  loading: false,\r\n  error: null,\r\n  customerPartnerId: \"\",\r\n  vendorPartnerId: \"\",\r\n  description: \"\",\r\n  vendors_list: [],\r\n  allvendors_list: [],\r\n  isFormSubmitted : null,\r\n  searchVendors :false,\r\n  vendorsList: [],\r\n  searchvendorList:[],\r\n  partnerId:\"\"\r\n  \r\n}\r\n\r\nconst slice = createSlice({\r\n  name: '_vendorSlice',\r\n  initialState,\r\n  reducers: {\r\n    loadMappedVendors(state, action) {\r\n      console.log(\"LoadMappedVendors\")\r\n      state.loading = true\r\n    },\r\n\r\n    loadMappedVendorsError(state, action) {\r\n      state.loading = false\r\n      state.error = action.payload\r\n    },\r\n\r\n    loadedAllMappedVendors(state, action) {\r\n      state.vendors_list = action.payload\r\n      state.loading = false\r\n\r\n    },\r\n    loadVendorsError(state, action) {\r\n      state.loading = false\r\n      state.error = action.payload\r\n    },\r\n    loadedAllVendors(state, action) {\r\n      state.allvendors_list = action.payload\r\n      state.loading = false\r\n    },\r\n    vendorForm(state, action) {\r\n      state.loading = true\r\n      state.customerPartnerId = action.payload.customerPartnerId\r\n      state.vendorPartnerId = action.payload.vendorPartnerId\r\n      state.description = action.payload.description\r\n      state.actionTaken = action.payload.actionTaken\r\n      state.actionComments = action.payload.actionComments\r\n    },\r\n    formSubmitted(state, action) {\r\n      state.loading = false\r\n      state.isFormSubmitted = action.payload\r\n    },\r\n    loadFormDetails(state, action) {\r\n      state.loading = true\r\n    },\r\n    loadVendorFormDetails(state, action) {\r\n      state.loading = true\r\n    },\r\n    openSearchVendors(state,action) {\r\n      state.searchVendors = action.payload\r\n    },    \r\n    closeSearchVendors(state,action) {\r\n      state.searchVendors = action.payload\r\n    },\r\n    \r\n    // searchVendors(state) {\r\n    //   state.loading = true\r\n    // },\r\n    // searchVendorsCompleted(state,action) {\r\n    //   state.loading = false\r\n    //   state.vendorsList = action.payload\r\n    // },\r\n    searchvendorForm(state, action) {\r\n      state.loading = true\r\n      state.search = action.payload.search\r\n      \r\n    },\r\n    searchformSubmitted(state, action) {\r\n      state.loading = false\r\n      state.isFormSubmitted = action.payload\r\n    },\r\n    loadSearchedVendors(state, action) {\r\n      state.loading = false\r\n      state.error = action.payload\r\n    },\r\n    loadedSearchedVendors(state, action) {\r\n      state.searchvendorList = action.payload\r\n      state.loading = false\r\n\r\n    },\r\n    loadedSelectedPartnerId(state, action) {\r\n      state.partnerId = action.payload\r\n          },\r\n  }\r\n})\r\n\r\nexport const { actions, reducer } = slice\r\n\r\nfunction* componentSaga() {\r\n  yield all([\r\n    sagaFormSubmit(),\r\n    sagaLoadFormDetails(),\r\n    sagaLoadVendorDetails(),\r\n    sagasearchFormSubmit()\r\n    // sagaLoadVendorsDetails()\r\n   \r\n  ]);\r\n}\r\n\r\nexport const useVendorMappingSlice = () => {\r\n  useInjectReducer({ key: slice.name, reducer: slice.reducer });\r\n  useInjectSaga({ key: slice.name, saga: componentSaga });\r\n  return { actions: slice.actions };\r\n};\r\n\r\n\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\vendormapping\\slice\\saga.js",["1095","1096","1097","1098","1099"],"import { put, select, takeLatest, takeEvery, delay, all } from 'redux-saga/effects'\r\nimport { actions, NavigatorFun } from '.'\r\nimport { invokeAPIGetRequest, invokeAPIRequest, invokeGetRequest } from '../../../../../Request';\r\nimport { ALLVENDORS_API_END_URL, NEW_VENDOR_MAPPING, VENDORSEARCH_API_END_URL, VENDORS_API_END_URL } from '../../../../constants/Constants';\r\nimport {\r\n  customer_PartnerId,\r\n  vendor_PartnerId,\r\n  Description,\r\n  action_Comments,\r\n  action_Taken,\r\n  search_data,\r\n  searchvendorList\r\n\r\n} from './selectors';\r\n\r\nexport function* _sagaFormSubmit() {\r\n  console.log('_sagaFormSubmit called')\r\n  // call api to save form data\r\n  const _customerPartnerId = yield select(customer_PartnerId)\r\n  const _vendorPartnerId = yield select(vendor_PartnerId)\r\n  const _description = yield select(Description)\r\n  const _actionTaken = yield select(action_Taken)\r\n  const _actionComments = yield select(action_Comments)\r\n\r\n  let params = {\r\n    customerPartnerId: _customerPartnerId,\r\n    vendorPartnerId: _vendorPartnerId,\r\n    description: _description,\r\n    vendorMappingActivities: [\r\n      {\r\n        actionComments: _actionComments,\r\n        actionTaken: _actionTaken\r\n      }\r\n    ]\r\n\r\n  }\r\n  console.log(params)\r\n\r\n  try {\r\n\r\n    console.log(\"FORM SUbmitted\")\r\n    let api = yield invokeAPIRequest(NEW_VENDOR_MAPPING, params, true);\r\n    console.log(api)\r\n    document.getElementById(\"close\").click()\r\n    yield put(actions.formSubmitted(api.results));\r\n    console.log(api.results)\r\n    return api;\r\n    // Navigation(\"/app/vendor_manager/MappedVendorList\", { replace: true });\r\n  } catch (error) {\r\n    yield put(actions.formError(error));\r\n  }\r\n\r\n}\r\n\r\nexport function* sagaFormSubmit() {\r\n  yield takeLatest(actions.vendorForm, _sagaFormSubmit);\r\n}\r\n\r\nexport function* _sagaLoadFormDetails(props) {\r\n  try {\r\n    let api = yield invokeAPIGetRequest(VENDORS_API_END_URL, true)\r\n    yield put(actions.loadedAllMappedVendors(api.results));\r\n  } catch (error) {\r\n    console.log(\"error in api\")\r\n    yield put(actions.loadMappedVendorsError(error));\r\n  }\r\n}\r\n\r\nexport function* sagaLoadFormDetails() {\r\n  yield takeEvery(actions.loadMappedVendors, _sagaLoadFormDetails);\r\n}\r\n\r\n\r\nexport function* _sagaLoadVendorDetails(props) {\r\n  try {\r\n    let api = yield invokeAPIGetRequest(ALLVENDORS_API_END_URL, true)\r\n    const data = []\r\n    var arrKeys = Object.keys(api.results);\r\n    var arrValues = Object.values(api.results);\r\n    for (let i = 1; i <= arrKeys.length; i++) {\r\n      data.push({\r\n        id: i,\r\n        partnerId: arrKeys[i - 1],\r\n        companyName: arrValues[i - 1],\r\n      })\r\n    }\r\n    console.log(data)\r\n    yield put(actions.loadedAllVendors(data));\r\n  } catch (error) {\r\n    console.log(\"error in api\")\r\n    yield put(actions.loadVendorsError(error));\r\n  }\r\n}\r\n\r\nexport function* sagaLoadVendorDetails() {\r\n  yield takeEvery(actions.loadVendorFormDetails, _sagaLoadVendorDetails);\r\n}\r\n\r\nexport function* _sagasearchFormSubmit() {\r\n  console.log('_sagasearchFormSubmit called')\r\n  // call api to save form data\r\n  const _search = yield select(search_data)\r\n  let params = {\r\n    search: _search\r\n  }\r\n  console.log(params)\r\n  try {\r\n    let api = yield invokeAPIGetRequest(VENDORSEARCH_API_END_URL + params.search, true);\r\n    const data = []\r\n    var arrKeys = Object.keys(api.results);\r\n    var arrValues = Object.values(api.results);\r\n    for (let i = 1; i <= arrKeys.length; i++) {\r\n      data.push({\r\n        id: i,\r\n        partnerId: arrKeys[i - 1],\r\n        companyName: arrValues[i - 1],\r\n      })\r\n    }\r\n    console.log(\"data\", data)\r\n    yield put(actions.loadedSearchedVendors(data));\r\n  } catch (error) {\r\n    yield put(actions.formError(error));\r\n  }\r\n}\r\n\r\nexport function* sagasearchFormSubmit() {\r\n  yield takeLatest(actions.searchvendorForm, _sagasearchFormSubmit);\r\n}\r\n\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\vendormapping\\MappedVendorsList.js",["1100","1101","1102","1103","1104","1105","1106"],"import React, { useState, useEffect } from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport { useTranslation } from 'react-i18next'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Button, Grid } from '@material-ui/core'\r\nimport { useVendorMappingSlice } from './slice'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { selectAllMappedVendors, selectLoading } from './slice/selectors'\r\nimport './_components/vendorform.css'\r\nimport Vendorform from './_components/Vendorform';\r\nimport $ from 'jquery'\r\n\r\n\r\nconst VendorItemsGrid = (props) => {\r\n\r\n    const { t } = useTranslation();\r\n    const [tid, setTid] = useState(0);\r\n    const navigation = useNavigate()\r\n\r\n    const columns = [\r\n        { field: 'customerPartnerId', headerName: t('customerPartnerId'), width: 200 },\r\n        { field: 'vendorPartnerId', headerName: t('vendorPartnerId'), width: 200 },\r\n        { field: 'description', headerName: t('description'), width: 200 }\r\n    ]\r\n\r\n    let rows = [];\r\n    let id = null;\r\n    const dispatch = useDispatch()\r\n    const { actions } = useVendorMappingSlice()\r\n    const vendorList = useSelector(selectAllMappedVendors)\r\n    const useEffectOnMount = (effect) => {\r\n        useEffect(effect, []);\r\n    };\r\n\r\n    useEffectOnMount(() => {\r\n        console.log(\"useeffect Mapped mount called\")\r\n        dispatch(actions.loadMappedVendors());\r\n    });\r\n    const changeForm = (e) => {\r\n        $('.EditUpdateTask').toggleClass(\"open\")\r\n    }\r\n\r\n    const _loadRows = () => {\r\n        const x = vendorList.map((item, i) => ({\r\n            ...item,\r\n            id: i\r\n        }))\r\n        rows = x;\r\n        id = rows[0].customerPartnerId\r\n     //   console.log(\"ROWWWWWW\", id)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"invite_new_button\">\r\n                <Button\r\n                    onClick={changeForm}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                >\r\n                    New Vendor\r\n                    {/* {t('Create_new_recipient ')} */}\r\n                </Button>\r\n            </div>\r\n            <Grid container  >\r\n                <div style={{ height: '500px', width: '115%' }}>\r\n                    {vendorList.length > 0 && _loadRows()}\r\n                    <DataGrid rows={rows} columns={columns} pageSize={10}\r\n                        onRowClick={(row) => {\r\n                            console.log('datagrid row clicked')\r\n                            console.log(\"row.row\", row.row)\r\n                        }\r\n                        } />\r\n                </div>\r\n                <div>\r\n                </div>\r\n            </Grid>\r\n            <div className=\"EditUpdateTask\">\r\n                <Vendorform />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MappedVendorsList = () => {\r\n\r\n    const { t } = useTranslation()\r\n    return (\r\n        <div className=\"line_items_container\">\r\n            <VendorItemsGrid />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MappedVendorsList","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\common\\todosaga\\_components\\TodoUpdate.js",["1107","1108","1109","1110"],"\r\nimport React, { useEffect } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport { Formik } from 'formik'\r\nimport {\r\n    Grid,\r\n    TextField,\r\n    Button,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    Checkbox\r\n} from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useTodoSlice } from '../slice'\r\nimport {selectError, selectLoading, selectAllTodo, selectFormSubmitted } from '../slice/selectors'\r\nimport { Close, Star, StarBorder } from '@material-ui/icons';\r\nimport { Navigate, useNavigate } from 'react-router-dom';\r\nimport $ from 'jquery';\r\n\r\nconst TodoUpdate = (props) => {\r\n   \r\n    const StarredCheckbox = withStyles({\r\n        root: {\r\n            color: \"Black\",\r\n            '&$checked': {\r\n                color: \"#FFD740\",\r\n            },\r\n        },\r\n        checked: {},\r\n    })((props) => <Checkbox color=\"default\" {...props} />);\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const { actions } = useTodoSlice()\r\n    const isLoading = useSelector(selectLoading)\r\n    const isupdated = useSelector(selectFormSubmitted)\r\n    const { t } = useTranslation()\r\n    const navigation = useNavigate()\r\n    const error = useSelector(selectError)\r\n    const todoList = useSelector(selectAllTodo)\r\n    const submitForm = (values) => {\r\n        // values.taskRefId = props.id.taskRefId\r\n        console.log(values)\r\n        dispatch(actions.todoview(values))\r\n        navigation(\"/app/partner_manager/todo\", { replace: true }  )   \r\n        }\r\n    console.log(\"=========================================\", props.id);\r\n    console.log(todoList)\r\n    const params = {\r\n        taskRefId: todoList[props.id].taskRefId,\r\n        title: todoList[props.id].title,\r\n        description: todoList[props.id].description,\r\n        assignedTo: todoList[props.id].assignedTo,\r\n        priority: todoList[props.id].priority,\r\n        flag: todoList[props.id].flag,\r\n        dueDate: todoList[props.id].dueDate,\r\n        status: todoList[props.id].status,\r\n        action: todoList[props.id].action,\r\n        comments: todoList[props.id].comments\r\n    }\r\n\r\n    const handleCreateClose = () => {\r\n        $('.EditUpdateTaskToDo').toggleClass(\"open\")\r\n    }\r\n\r\n    const useEffectOnMount = (effect) => {\r\n        useEffect(effect, []);\r\n    };\r\n\r\n    useEffectOnMount(() => {\r\n        console.log(\"useeffect mount called\")\r\n        dispatch(actions.loadFormDetails());\r\n    });\r\n\r\n    return (\r\n        <>\r\n            \r\n            <Grid container  >\r\n                <div className=\"EditUpdateTaskToDo\">\r\n                    <Button id=\"close\" variant=\"contained\" color=\"primary\" style={{ textTransform: \"none\", justifyItems: \"flex-end\", margin: \"-27px 46px 35px 295px\" }} onClick={handleCreateClose}>\r\n                        <Close fontSize=\"large\" style={{ fontSize: \"20px\" }} /> \r\n                    </Button>\r\n                    <label>Update Task</label>\r\n\r\n                    <Formik\r\n                        initialValues={params}\r\n                        // validationSchema={_validationSchema}\r\n                        onSubmit={(values) => { submitForm(values) }}\r\n                    >\r\n                        {({ values, defaultValue, handleChange, handleBlur, handleSubmit, handleReset, touched, errors, }) => (\r\n                            <form onSubmit={handleSubmit}>\r\n                                {/* <div className=\"\"> */}\r\n                                {/* <Grid item xs={12}>\r\n                                <FormControl  >\r\n                                    <StarredCheckbox\r\n                                        color=\"primary\"\r\n                                        label=\"flag\"\r\n                                        name=\"flag\"\r\n                                        onChange={handleChange}\r\n                                        checked={values.flag}\r\n                                        inputProps={{ 'aria-label': 'secondary checkbox', 'spacing': '6' }}\r\n                                        checkedIcon={<Star />}\r\n                                        icon={<StarBorder />}\r\n                                    />\r\n                                </FormControl>\r\n                                </Grid> */}\r\n                                {/* </div> */}\r\n                                \r\n                                \r\n                                {/* <Grid item xs={12}> */}\r\n                                    <FormControl style={{ width: '100%' }} >\r\n                                        <TextField\r\n                                            type=\"text\"\r\n                                            variant=\"standard\"\r\n                                            onBlur={handleBlur}\r\n                                            onChange={handleChange}\r\n                                            name=\"title\"\r\n                                            fullWidth\r\n                                            //  defaultValue={props.id.title || \"\"}\r\n                                            // value={props.id.title || ''}\r\n                                            value={values.title|| \"\"}\r\n                                            margin=\"normal\"\r\n                                            helperText={touched.title && errors.title}\r\n                                            error={Boolean(touched.title && errors.title)}\r\n                                            label={t('title')}\r\n                                            color=\"primary\"\r\n                                        />\r\n                                    </FormControl>\r\n                                {/* </Grid> */}\r\n         <Grid container spacing={3}>\r\n                <Grid item xs={6}>\r\n                                \r\n                                    <FormControl style={{ width: '100%' }}>\r\n                                        <InputLabel >Assign To:</InputLabel>\r\n                                        <Select\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            name=\"assignedTo\"\r\n                                            displayEmpty\r\n                                            label={t(\"assign_to\")}\r\n                                            color=\"primary\"\r\n                                            // value={props.id.assignedTo || ''}\r\n                                            value={values.assignedTo}\r\n                                        >\r\n                                            <MenuItem aria-label=\"None\" disabled key={1} >{t(\"assign_to\")}</MenuItem>\r\n                                            <MenuItem value=\"Swathi\" key={2}>Swathi</MenuItem>\r\n                                            <MenuItem value=\"Farooq\" key={3}>Farooq</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n\r\n                                <Grid item xs={6}>\r\n                                    <FormControl style={{ width: '100%' }}>\r\n                                        <InputLabel >Priority:</InputLabel>\r\n                                        <Select\r\n                                            name=\"priority\"\r\n                                            displayEmpty\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            label={t(\"priority\")}\r\n                                            color=\"primary\"\r\n                                            value={values.priority}\r\n                                        // value={props.id.priority || ''}\r\n\r\n                                        >\r\n                                            <MenuItem aria-label=\"None\" disabled key={1} >{t(\"priority\")}</MenuItem>\r\n                                            <MenuItem value=\"high\" key={2}>High</MenuItem>\r\n                                            <MenuItem value=\"medium\" key={3}>Medium</MenuItem>\r\n                                            <MenuItem value=\"low\" key={4}>Low</MenuItem>\r\n                                        </Select>\r\n                                        <FormHelperText error={Boolean(touched.priority && errors.priority)}>{touched.priority && errors.priority}</FormHelperText>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                </Grid>\r\n                                <Grid container spacing={3}>\r\n                <Grid item xs={6}>\r\n                               \r\n                                    <FormControl style={{ width: '100%' }} >\r\n                                        <TextField\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            name=\"dueDate\"\r\n                                            label={t('due_date')}\r\n                                            color=\"primary\"\r\n                                            value={values.dueDate}\r\n                                            // value={props.id.dueDate || ''}\r\n                                            type=\"date\"\r\n                                            error={Boolean(touched.dueDate && errors.dueDate)}\r\n                                            helperText={touched.dueDate && errors.dueDate}\r\n                                        />\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6}>\r\n                               \r\n                                    <FormControl style={{ width: '100%' }}>\r\n                                        <InputLabel >{t(\"status\")}:</InputLabel>\r\n                                        <Select\r\n                                            name=\"status\"\r\n                                            displayEmpty\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            label={t(\"status\")}\r\n                                            color=\"status\"\r\n                                            value={values.status}\r\n                                        // value={props.id.status || ''}\r\n                                        >\r\n                                            <MenuItem aria-label=\"None\" disabled key={1} >{t(\"status\")}</MenuItem>\r\n                                            <MenuItem value=\"Inprogress\" key={2}>InProgress</MenuItem>\r\n                                            <MenuItem value=\"Completed\" key={3}>Completed</MenuItem>\r\n                                            <MenuItem value=\"Deleted\" key={3}>Delete</MenuItem>\r\n                                        </Select>\r\n                                        <FormHelperText error={Boolean(touched.status && errors.status)}>{touched.status && errors.status}</FormHelperText>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n\r\n                                    <FormControl style={{ width: '100%' }}>\r\n                                        <TextField\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            name=\"description\"\r\n                                            label={t('description')}\r\n                                            color=\"primary\"\r\n                                            value={values.description}\r\n                                            // value={props.id.description || ''}\r\n                                            multiline\r\n                                            rows={3}\r\n                                            error={Boolean(touched.description && errors.description)}\r\n                                            helperText={touched.description && errors.description}\r\n                                        />\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <FormControl style={{ width: '100%' }}>\r\n                                        <InputLabel >Action:</InputLabel>\r\n                                        <Select\r\n                                            name=\"action\"\r\n                                            displayEmpty\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            color=\"primary\"\r\n                                            value={values.action}\r\n                                        // value={props.id.action|| ''}\r\n                                        >\r\n                                            <MenuItem aria-label=\"None\" disabled key={1} >Action</MenuItem>\r\n                                            <MenuItem value=\"submit\" key={2}>Submit</MenuItem>\r\n                                            <MenuItem value=\"updated\" key={3}>Updated</MenuItem>\r\n                                            <MenuItem value=\"commented\" key={4}>Commented</MenuItem>\r\n                                        </Select>\r\n                                        <FormHelperText error={Boolean(touched.action && errors.action)}>{touched.action && errors.action}</FormHelperText>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <FormControl style={{ width: '100%' }}>\r\n                                        \r\n                                        <TextField\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            name=\"comments\"\r\n                                            color=\"primary\"\r\n                                            label=\"Comments\"\r\n                                            type=\"comments\"\r\n                                            multiline\r\n                                            rows={4}\r\n                                            value={values.comments}\r\n                                            // value={props.id.comments || ''}\r\n                                            error={Boolean(touched.comments && errors.comments)}\r\n                                            helperText={touched.comments && errors.comments}\r\n                                        />\r\n\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                 {/* <Grid item xs={12}> */}\r\n                                <FormControl  >\r\n                                    <StarredCheckbox\r\n                                        color=\"primary\"\r\n                                        label=\"flag\"\r\n                                        name=\"flag\"\r\n                                        onChange={handleChange}\r\n                                        checked={values.flag}\r\n                                        inputProps={{ 'aria-label': 'secondary checkbox', 'spacing': '6' }}\r\n                                        checkedIcon={<Star />}\r\n                                        icon={<StarBorder />}\r\n                                    />\r\n                                </FormControl>\r\n                                {/* </Grid> */}\r\n                                {/* <Grid item xs={12}> */}\r\n                                    <MenuItem className=\"addTaskHolder\">\r\n\r\n                                        <Button\r\n                                            style={{ marginLeft: \"600px\" }}\r\n                                            type=\"submit\"\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                            disabled={isLoading}\r\n                                            // className=\"btn-blue btn-login\"\r\n                                        >\r\n                                            {t('Update')}\r\n                                        </Button>\r\n\r\n                                    </MenuItem>\r\n                                {/* </Grid> */}\r\n\r\n\r\n                            </form>\r\n\r\n                        )}\r\n                    </Formik>\r\n                </div>\r\n            </Grid>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\nexport default TodoUpdate","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\uploader\\GridUploader.js",["1111","1112"],"import React, { useState , useEffect } from 'react'\r\nimport {\r\n    DataGrid\r\n} from '@material-ui/data-grid'\r\nimport {\r\n    IconButton\r\n} from '@material-ui/core'\r\nimport { useTranslation } from 'react-i18next'\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport '../ui.css'\r\nimport { DropzoneDialogBase } from 'material-ui-dropzone'\r\n\r\nconst GridUploader = (props) => {\r\n    const { _items, insert , folderId  , doc_type } = props\r\n    const [items,setItems] = useState([])\r\n    const { t } = useTranslation()\r\n    const [openUploader, setOpenUploader] = useState(false)\r\n    const allowedMimeTypes = ['image/*', 'application/pdf', 'text/html', 'text/plain']\r\n    const maxUplods = 100 // MAX Value\r\n\r\n    useEffect(() => {\r\n        if(_items && _items.length > 0) {\r\n            let ___item = []\r\n            _items.forEach((_item) => {\r\n                if (_item) {\r\n                    let __item = {}\r\n                    __item.file = {}\r\n                    __item.file.name = _item.ecm_doc_id\r\n                    __item.file.type = _item.mime_type != null ? _item.mime_type : \"\"\r\n                    __item.file.lastModifiedDate = _item.created_date\r\n                    __item.id = _item.ecm_doc_id\r\n                    ___item.push(__item)\r\n                }\r\n            })\r\n            setItems(___item)\r\n        }\r\n    },[])\r\n\r\n    const columns = [\r\n        { field: 'document_name', headerName: t('document_name'), width: 180 },\r\n        { field: 'document_type', headerName: t('document_type'), width: 180 },\r\n        { field: 'document_added_on', headerName: t('document_added_on'), width: 180 },\r\n    ]\r\n\r\n    let rows = []\r\n    items.forEach((_item) => {\r\n        if (_item && _item.file) {\r\n            let __item = {}\r\n            __item.id = _item.id ? _item.id : rows.length + 1\r\n            __item.document_name = _item.file.name\r\n            __item.document_type = _item.file.type\r\n            __item.document_added_on = _item.file.lastModifiedDate\r\n            rows.push(__item)\r\n        }\r\n    })\r\n\r\n    const upload = () => {\r\n        setOpenUploader(!openUploader)\r\n    }\r\n\r\n    const refresh = () => {\r\n    }\r\n\r\n    return (\r\n        <div style={{ height: 400, width: '80%' }}>\r\n            <div className=\"uploadActionButtons\">\r\n                <IconButton\r\n                    onClick={() => upload()}\r\n                >\r\n                    <CloudUploadIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                    onClick={() => refresh()}\r\n                >\r\n                    <RefreshIcon />\r\n                </IconButton>\r\n            </div>\r\n            <DataGrid rows={rows} columns={columns} />\r\n            <DropzoneDialogBase\r\n                open={openUploader}\r\n                dialogTitle={t('upload_title')}\r\n                acceptedFiles={allowedMimeTypes}\r\n                onClose={() => { setOpenUploader(!openUploader) }}\r\n                showPreviews={true}\r\n                showFileNamesInPreview={true}\r\n                filesLimit={maxUplods}\r\n                fileObjects={items}\r\n                onSave={() => {\r\n                    setOpenUploader(!openUploader)\r\n                }}\r\n                onDelete={(__files) => { }}\r\n                onAdd={(__files) => {\r\n                    let _x = null\r\n                    __files.map((_f) => {\r\n                        _x =   [...items, _f]\r\n                        let upload = {\r\n                            \"doc_type\": doc_type,\r\n                            \"mime_type\": _f.file.type,\r\n                            \"base64\":  _f.data,\r\n                            \"folderId\": folderId\r\n                        }\r\n                        insert(_items.length , upload)\r\n                    })\r\n                    setItems(_x)\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GridUploader\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\index.js",["1113","1114","1115","1116","1117","1118","1119"],"import { useInvoiceSlice } from './slice'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useEffect } from 'react'\r\nimport {\r\n\tTabs,\r\n\tTab,\r\n\tButton\r\n} from '@material-ui/core'\r\nimport {\r\n\tselectLoading,\r\n\tselectError,\r\n\tselectTab,\r\n\tselectHasUploaded,\r\n\tselectInvoiceDetails\r\n} from './slice/selector'\r\nimport { useTranslation } from 'react-i18next'\r\nimport TimerOutlinedIcon from '@material-ui/icons/TimerOutlined'\r\nimport GroupAddOutlinedIcon from '@material-ui/icons/GroupAddOutlined'\r\nimport Loader from '../../../util/ui/Loader'\r\nimport TabPanel from '../../../util/ui/tab/TabPanel'\r\nimport './styles.css'\r\nimport { Formik, Form } from 'formik'\r\nimport InvoiceMetadata from './_components/InvoiceMetadata'\r\nimport SupplierBuyerMetadata from './_components/SupplierBuyerMetadata'\r\nimport PaymentMetadata from './_components/PaymentMetadata'\r\nimport DispatchShipTo from './_components/DispatchShipTo'\r\nimport EWaybillMetadata from './_components/EWaybillMetadata'\r\nimport LineItems from './_components/LineItems'\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport 'react-splitter-layout/lib/index.css';\r\nimport Attachments from './_components/Attachments'\r\nimport * as Yup from 'yup'\r\nimport { Navigate, useParams, useNavigate } from 'react-router-dom'\r\nimport {\r\n\tselectUser\r\n} from '../../common/authentication/slice/selectors'\r\n\r\n\r\n\r\nconst ViewInvoice = () => {\r\n\tconst { actions } = useInvoiceSlice()\r\n\tconst dispatch = useDispatch()\r\n\tconst error = useSelector(selectError)\r\n\tconst loading = useSelector(selectLoading)\r\n\tconst { t } = useTranslation()\r\n\tconst tabIndex = useSelector(selectTab)\r\n\tconst isUploaded = useSelector(selectHasUploaded)\r\n\tconst user = useSelector(selectUser)\r\n\tconst { refId } = useParams()\r\n\tconst invoiceDetails = useSelector(selectInvoiceDetails)\r\n\tconst navigate = useNavigate()\r\n\tlet invoiceInitialDetails = {\r\n\t\tinvoiceDetails: {\r\n\t\t\trecipientCode: '',\r\n\t\t\tinvoicenum: '',\r\n\t\t\tirn: '',\r\n\t\t\tinvoice_subtype_code: '',\r\n\t\t\tinvoicedate: '2021-03-06',\r\n\t\t\tinvoice_currency_code: 'INR',\r\n\t\t\tsupplier_note: '',\r\n\t\t\treverse_charge: false,\r\n\t\t\tecom_gstin: 0.0,\r\n\t\t\tigst_on_intra: false,\r\n\t\t\ttotal_assessable_value: 0.0,\r\n\t\t\tigstvalue: 0.0,\r\n\t\t\tcgstvalue: 0.0,\r\n\t\t\tsgstvalue: 0.0,\r\n\t\t\tcessvalue: 0.0,\r\n\t\t\tstatecessvalue: 0.0,\r\n\t\t\tdiscount: 0.0,\r\n\t\t\tother_charges: 0.0,\r\n\t\t\troundoff: 0.0,\r\n\t\t\ttotal_invoice_value: 0.0\r\n\t\t},\r\n\t\tinvoiceSellerPaymentDetails: {\r\n\t\t\tpayee_name: '',\r\n\t\t\tpayee_financial_account: '',\r\n\t\t\tmodeofpayment: '',\r\n\t\t\tfinancial_institution_branch: '',\r\n\t\t\tpayment_terms: '',\r\n\t\t\tpayment_instruction: '',\r\n\t\t\tcredit_transfer: '',\r\n\t\t\tdirect_debit: '',\r\n\t\t\tcreditdays: 0,\r\n\t\t\tpayment_due: 0.0,\r\n\t\t\tpaid_amount: 0.0\r\n\t\t},\r\n\t\tinvoiceDispatchShiptoDetails: {\r\n\t\t\tdispatch_company_name: '',\r\n\t\t\tdispatch_address1: '',\r\n\t\t\tdispatch_address2: '',\r\n\t\t\tdispatch_location: '',\r\n\t\t\tdispatch_pincode: '',\r\n\t\t\tdispatch_state: '',\r\n\t\t\tshippingto_gstin: '',\r\n\t\t\tshippingto_legal_name: '',\r\n\t\t\tshippingto_trade_name: '',\r\n\t\t\tshippingto_address1: '',\r\n\t\t\tshippingto_address2: '',\r\n\t\t\tshippingto_location: '',\r\n\t\t\tshippingto_pincode: '',\r\n\t\t\tshippintto_state: ''\r\n\t\t},\r\n\t\tinvoiceSupplierBuyerDetails: {\r\n\t\t\tsupplier_legal_name: '',\r\n\t\t\tsupplier_trading_name: '',\r\n\t\t\tsupplier_gstin: '',\r\n\t\t\tsupplier_address1: '',\r\n\t\t\tsupplier_address2: '',\r\n\t\t\tsupplier_location: '',\r\n\t\t\tsupplier_state: '',\r\n\t\t\tsupplier_pincode: '',\r\n\t\t\tsupplier_phone: '',\r\n\t\t\tsupplier_email: '',\r\n\t\t\tbilling_legal_name: '',\r\n\t\t\tbilling_trade_name: '',\r\n\t\t\tbilling_gstin: '',\r\n\t\t\tbilling_pos: '',\r\n\t\t\tbilling_address1: '',\r\n\t\t\tbilling_address2: '',\r\n\t\t\tbilling_state: '',\r\n\t\t\tbilling_pincode: '',\r\n\t\t\tbilling_phone: '',\r\n\t\t\tbilling_email: '',\r\n\t\t\tbilling_location: ''\r\n\t\t},\r\n\t\tinvoiceEwayBillDetails: {\r\n\t\t\ttransporter_id: '',\r\n\t\t\ttransportername: '',\r\n\t\t\ttransmode: '',\r\n\t\t\ttransdistance: 0.0,\r\n\t\t\ttransdocno: '',\r\n\t\t\ttransdocdate: '2021-03-06',\r\n\t\t\tvehicleno: '',\r\n\t\t\tvehicleno: ''\r\n\t\t},\r\n\t\tlineItemDetails: [],\r\n\t\tinvoiceAttachmentDetails: [],\r\n\t\tactionDetails: {\r\n\t\t\t\"action_code\": \"001\",\r\n\t\t\t\"action_name\": \"Submit\",\r\n\t\t\t\"source\": \"portal\"\r\n\t\t}\r\n\t}\r\n\r\n\tconst useEffectOnMount = (effect) => {\r\n\t\tuseEffect(effect, []);\r\n\t};\r\n\r\n\tuseEffectOnMount(() => {\r\n\t\tif (refId != undefined)\r\n\t\t\tdispatch(actions.loadExistingInvoiceDetails(refId))\r\n\t});\r\n\r\n\tconst handleTabChange = (event, newValue) => {\r\n\t\tdispatch(actions.changeTab(newValue))\r\n\t}\r\n\r\n\tconst handleInvoiceSubmit = (values) => {\r\n\t\tdispatch(actions.uploadInvoice(values))\r\n\t}\r\n\r\n\tconst saveForm = (values) => {\r\n\t\tif (values.actionDetails === null) {\r\n\t\t\tvalues.actionDetails = {}\r\n\t\t\tvalues.actionDetails.action_code = \"002\";\r\n\t\t\tvalues.actionDetails.action_name = \"Draft\";\r\n\t\t} else {\r\n\t\t\tvalues.actionDetails.action_code = \"002\";\r\n\t\t\tvalues.actionDetails.action_name = \"Draft\";\r\n\t\t}\r\n\t\tdispatch(actions.uploadInvoice(values))\r\n\t}\r\n\r\n\tconst _validationSchema = Yup.object().shape({\r\n\t\tinvoiceDetails: Yup.object().shape({\r\n\t\t\tinvoicenum: Yup.string().max(6).required(t('param_require'))\r\n\t\t})\r\n\t})\r\n\r\n\tconst reassignInitialValues = () => {\r\n\t\tinvoiceInitialDetails = invoiceDetails\r\n\t}\r\n\r\n\tconst handleDiscard = () => {\r\n\t\tnavigate(`/app/${user.roles[0]}/invoice_list`, { replace: true })\r\n\t}\r\n\r\n\tconst handleNavigate = () => {\r\n\t\thandleDiscard()\r\n\t\tdispatch(actions.emptyUploads(false));\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{isUploaded && handleNavigate()}\r\n\t\t\t{invoiceDetails != null && reassignInitialValues()}\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<Formik\r\n\t\t\t\t\tinitialValues={invoiceInitialDetails}\r\n\t\t\t\t\tonSubmit={handleInvoiceSubmit}\r\n\t\t\t\t\tvalidationSchema={_validationSchema}\r\n\t\t\t\t\tenableReinitialize={true}\r\n\t\t\t\t>\r\n\t\t\t\t\t{({ values, validateForm, setFieldValue }) => (\r\n\t\t\t\t\t\t<Form className=\"invoice_main_form\">\r\n\t\t\t\t\t\t\t<SplitterLayout>\r\n\t\t\t\t\t\t\t\t<div className=\"left_pane\">\r\n\t\t\t\t\t\t\t\t\t<InvoiceMetadata setFieldValue={setFieldValue} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"right_pane\">\r\n\t\t\t\t\t\t\t\t\t<Tabs\r\n\t\t\t\t\t\t\t\t\t\tvalue={tabIndex}\r\n\t\t\t\t\t\t\t\t\t\tonChange={handleTabChange}\r\n\t\t\t\t\t\t\t\t\t\tvariant=\"scrollable\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<Tab icon={<TimerOutlinedIcon />} label={t('attachments')} />\r\n\t\t\t\t\t\t\t\t\t\t<Tab icon={<GroupAddOutlinedIcon />} label={t('supplier_buyer_info')} />\r\n\t\t\t\t\t\t\t\t\t\t<Tab icon={<GroupAddOutlinedIcon />} label={t('payment_info')} />\r\n\t\t\t\t\t\t\t\t\t\t<Tab icon={<GroupAddOutlinedIcon />} label={t('dispatch_ship_to_details')} />\r\n\t\t\t\t\t\t\t\t\t\t<Tab icon={<GroupAddOutlinedIcon />} label={t('eway_bill')} />\r\n\t\t\t\t\t\t\t\t\t\t<Tab icon={<GroupAddOutlinedIcon />} label={t('line_items')} />\r\n\t\t\t\t\t\t\t\t\t\t<Tab icon={<GroupAddOutlinedIcon />} label={t('history')} />\r\n\t\t\t\t\t\t\t\t\t</Tabs>\r\n\t\t\t\t\t\t\t\t\t<TabPanel value={tabIndex} index={0}>\r\n\t\t\t\t\t\t\t\t\t\t{/** <Attachments />*/}\r\n\t\t\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t\t\t<TabPanel value={tabIndex} index={1}>\r\n\t\t\t\t\t\t\t\t\t\t<SupplierBuyerMetadata />\r\n\t\t\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t\t\t<TabPanel value={tabIndex} index={2}>\r\n\t\t\t\t\t\t\t\t\t\t<PaymentMetadata />\r\n\t\t\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t\t\t<TabPanel value={tabIndex} index={3}>\r\n\t\t\t\t\t\t\t\t\t\t<DispatchShipTo />\r\n\t\t\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t\t\t<TabPanel value={tabIndex} index={4}>\r\n\t\t\t\t\t\t\t\t\t\t<EWaybillMetadata />\r\n\t\t\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t\t\t<TabPanel value={tabIndex} index={5}>\r\n\t\t\t\t\t\t\t\t\t\t<LineItems />\r\n\t\t\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</SplitterLayout>\r\n\t\t\t\t\t\t\t<div className=\"actions\">\r\n\t\t\t\t\t\t\t\t{/** we can add submit Query Buttons  */}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Formik>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"common_info_container\">\r\n\t\t\t\t{loading && (<Loader isLoading={loading} />)}\r\n\t\t\t\t{error && (<div> An error in page </div>)}\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nexport default ViewInvoice","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\slice\\selector.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\SupplierBuyerMetadata.js",["1120"],"import React from 'react'\r\nimport {\r\n    Grid,\r\n    makeStyles\r\n} from '@material-ui/core'\r\nimport { useTranslation } from 'react-i18next'\r\nimport '../styles.css'\r\nimport InputField from '../../../../util/ui/form/InputField'\r\nimport ReadOnlyInputField from '../../../../util/ui/form/ReadOnlyInputField'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    legend : {\r\n        color: theme.palette.primary.main,\r\n    }\r\n}));\r\n\r\n\r\nconst SupplierBuyerMetadata = () => {\r\n    const { t } = useTranslation()\r\n    const classes = useStyles()\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('supplier_details')}</legend>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_gstin\"\r\n                            label={t('gstin')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_legal_name\"\r\n                            label={t('legal_name')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_trading_name\"\r\n                            label={t('trading_name')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_location\"\r\n                            label={t('location')}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_pincode\"\r\n                            label={t('pin_code')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_email\"\r\n                            label={t('email')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_state\"\r\n                            label={t('state')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_address1\"\r\n                            multiline\r\n                            rows={5}\r\n                            label={t('address1')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_address2\"\r\n                            multiline\r\n                            rows={5}\r\n                            label={t('address2')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('customer_details')}</legend>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_gstin\"\r\n                            label={t('gstin')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_legal_name\"\r\n                            label={t('legal_name')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_trade_name\"\r\n                            label={t('trading_name')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_location\"\r\n                            label={t('location')}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_pincode\"\r\n                            label={t('pin_code')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_email\"\r\n                            label={t('email')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_state\"\r\n                            label={t('state')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_address1\"\r\n                            multiline\r\n                            rows={5}\r\n                            label={t('address1')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_address2\"\r\n                            multiline\r\n                            rows={5}\r\n                            label={t('address2')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(SupplierBuyerMetadata)\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\InvoiceMetadata.js",["1121","1122","1123","1124","1125","1126","1127","1128"],"import React, { } from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport {\r\n    Grid,\r\n    MenuItem,\r\n    InputAdornment,\r\n    IconButton,\r\n    FormControl,\r\n    InputLabel,\r\n    makeStyles\r\n} from '@material-ui/core'\r\nimport '../styles.css'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport InputField from '../../../../util/ui/form/InputField'\r\nimport ReadOnlyInputField from '../../../../util/ui/form/ReadOnlyInputField'\r\nimport _Input from '../../../../util/ui/form/_Input'\r\nimport SearchRecipient from './SearchRecipient'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n    useInvoiceSlice\r\n} from '../slice'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    legend: {\r\n        color: theme.palette.primary.main,\r\n    }\r\n}));\r\n\r\nconst InvoiceMetadata = () => {\r\n    const { t } = useTranslation()\r\n    const dispatch = useDispatch()\r\n    const { actions } = useInvoiceSlice()\r\n    const handleRecipientClick = () => {\r\n        dispatch(actions.openSearchRecipients(true))\r\n    }\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('supplier_buyer_details')}</legend>\r\n                <div style={{ textAlign: 'right' }}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceDetails.recipientCode\"\r\n                        label=\"Recipient Code\"\r\n                    />\r\n                    <SearchRecipient />\r\n                </div>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <div className=\"invoice_header\">\r\n                            <span>1073 W sam Houston ParkWay,</span> <br />\r\n                            <span>Hyd,</span> <br />\r\n                            <span>500082</span>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <div className=\"invoice_header\">\r\n                            <span>1073 W sam Houston ParkWay,</span> <br />\r\n                            <span>Hyd,</span> <br />\r\n                            <span>500082</span>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('invoice_details')}</legend>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.invoicenum\"\r\n                            label={t('invoice_number')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.irn\"\r\n                            label={t('irn')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            select\r\n                            name=\"invoiceDetails.invoice_subtype_code\"\r\n                            label={t('invoice_sub_type')}\r\n                            defaultValue={\"INV\"}\r\n                        >\r\n                            <MenuItem value={\"INV\"}>INV</MenuItem>\r\n                            <MenuItem value={\"CRN\"}>CRN</MenuItem>\r\n                            <MenuItem value={\"DBN\"}>DBN</MenuItem>\r\n                        </ReadOnlyInputField>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.invoicedate\"\r\n                            type=\"date\"\r\n                            label={t('invoice_date')}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.invoice_currency_code\"\r\n                            label={t('currency_code')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.reverse_charge\"\r\n                            label={t('reverse_charge')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('value_details')}</legend>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.ecom_gstin\"\r\n                            label={t('ecom_gstin')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            select\r\n                            name=\"invoiceDetails.igst_on_intra\"\r\n                            label={t('igst_on_intra')}\r\n                            defaultValue={\"false\"}\r\n                        >\r\n                            <MenuItem value={\"false\"}>FALSE</MenuItem>\r\n                            <MenuItem value={\"true\"}>TRUE</MenuItem>\r\n                        </ReadOnlyInputField>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.total_assessable_value\"\r\n                            label={t('total_assessable_value')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.igstvalue\"\r\n                            label={t('igstvalue')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.cgstvalue\"\r\n                            label={t('cgstvalue')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.sgstvalue\"\r\n                            label={t('sgstvalue')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.cessvalue\"\r\n                            label={t('cessvalue')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.statecessvalue\"\r\n                            label={t('statecessvalue')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.discount\"\r\n                            label={t('discount')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.other_charges\"\r\n                            label={t('other_charges')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.roundoff\"\r\n                            label={t('roundoff')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.total_invoice_value\"\r\n                            label={t('total_invoice_value')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default React.memo(InvoiceMetadata)\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\PaymentMetadata.js",["1129"],"import React from 'react'\r\nimport {\r\n    Grid\r\n} from '@material-ui/core'\r\nimport { useTranslation } from 'react-i18next'\r\nimport InputField from '../../../../util/ui/form/InputField'\r\nimport ReadOnlyInputField from '../../../../util/ui/form/ReadOnlyInputField'\r\n\r\nconst PaymentMetadata = () => {\r\n    const { t } = useTranslation()\r\n    return (\r\n        <div className=\"payments_container\">\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.payee_name\"\r\n                        label={t('payee_name')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.payee_financial_account\"\r\n                        label={t('payee_financial_account')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.modeofpayment\"\r\n                        label={t('mode_of_payment')}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.financial_institution_branch\"\r\n                        label={t('financial_institution_branch')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.credit_transfer\"\r\n                        label={t('credit_transfer')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.direct_debit\"\r\n                        label={t('direct_debit')}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.creditdays\"\r\n                        label={t('credit_days')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.payment_due\"\r\n                        label={t('payment_due')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.paid_amount\"\r\n                        label={t('paid_amount')}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.payment_terms\"\r\n                        multiline\r\n                        rows={3}\r\n                        label={t('payment_terms')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.payment_instruction\"\r\n                        multiline\r\n                        rows={3}\r\n                        label={t('payment_instructions')}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(PaymentMetadata)\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\DispatchShipTo.js",["1130"],"import React from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport '../styles.css'\r\nimport {\r\n    Grid,\r\n    makeStyles\r\n} from '@material-ui/core'\r\nimport InputField from '../../../../util/ui/form/InputField'\r\nimport ReadOnlyInputField from '../../../../util/ui/form/ReadOnlyInputField'\r\nconst useStyles = makeStyles((theme) => ({\r\n    legend : {\r\n        color: theme.palette.primary.main,\r\n    }\r\n}));\r\n\r\n\r\nconst DispatchShipTo = () => {\r\n    const { t } = useTranslation()\r\n    const classes = useStyles()\r\n    return (\r\n        <div>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('dispatch_details')}</legend>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.dispatch_company_name\"\r\n                            label={t('company_name')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.dispatch_location\"\r\n                            label={t('location')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.dispatch_pincode\"\r\n                            label={t('pin_code')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.dispatch_address1\"\r\n                            multiline\r\n                            rows={5}\r\n                            label={t('address1')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.dispatch_address2\"\r\n                            multiline\r\n                            rows={5}\r\n                            label={t('address2')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('ship_details')}</legend>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.shippingto_gstin\"\r\n                            label={t('gstin')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.shippingto_legal_name\"\r\n                            label={t('legal_name')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.shippingto_trade_name\"\r\n                            label={t('trading_name')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.shippingto_location\"\r\n                            label={t('location')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.shippingto_pincode\"\r\n                            label={t('pin_code')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.shippintto_state\"\r\n                            label={t('state')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.shippingto_address1\"\r\n                            multiline\r\n                            rows={5}\r\n                            label={t('address1')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.shippingto_address2\"\r\n                            multiline\r\n                            rows={5}\r\n                            label={t('address2')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(DispatchShipTo)\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\EWaybillMetadata.js",["1131"],"import React from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport '../styles.css'\r\nimport {\r\n    Grid\r\n} from '@material-ui/core'\r\nimport InputField from '../../../../util/ui/form/InputField'\r\nimport ReadOnlyInputField from '../../../../util/ui/form/ReadOnlyInputField'\r\n\r\nconst EWaybillMetadata = (props) => {\r\n    const { t } = useTranslation()\r\n    return (\r\n        <div className=\"eway_bill_container\">\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceEwayBillDetails.transporter_id\"\r\n                        label={t('transporter_id')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceEwayBillDetails.transportername\"\r\n                        label={t('transporter_name')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceEwayBillDetails.transmode\"\r\n                        label={t('trans_mode')}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceEwayBillDetails.transdistance\"\r\n                        label={t('trans_distance')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceEwayBillDetails.transdocno\"\r\n                        label={t('trans_doc_no')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceEwayBillDetails.vehicleno\"\r\n                        label={t('vehicle_no')}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceEwayBillDetails.vehicle_type\"\r\n                        label={t('vehicle_type')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceEwayBillDetails.transdocdate\"\r\n                        type=\"date\"\r\n                        label={t('trans_doc_date')}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(EWaybillMetadata)\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\LineItems.js",["1132","1133"],"import React from 'react'\r\nimport '../styles.css'\r\nimport { FieldArray } from 'formik'\r\nimport { useTranslation } from 'react-i18next'\r\nimport LineItemsGrid from './_LineItemsGrid'\r\nimport { forEach } from 'lodash'\r\n\r\nconst LineItems = () => {\r\n    const { t } = useTranslation()\r\n    let _lineItems = []\r\n    return (\r\n        <div className=\"line_items_container\">\r\n            <FieldArray\r\n                name=\"lineItemDetails\"\r\n                label=\"Line Items\"\r\n            >\r\n                {(props) => {\r\n                    _lineItems = props.form.values.lineItemDetails\r\n                    return <LineItemsGrid lineItems={_lineItems} insert={props.push} remove={props.remove}/>\r\n                }}\r\n            </FieldArray>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(LineItems) // memo is because we are using large form layout \r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\Attachments.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\slice\\index.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\SearchRecipient.js",["1134"],"import React, { useState , useEffect } from 'react'\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Button\r\n} from '@material-ui/core'\r\nimport {\r\n    selectSearchRecipient,\r\n    selectRecipientList\r\n} from '../slice/selector'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n    useInvoiceSlice\r\n} from '../slice'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { DataGrid } from '@material-ui/data-grid'\r\nimport { useFormikContext } from 'formik'\r\n\r\nconst SearchRecipient = () => {\r\n    const openSearch = useSelector(selectSearchRecipient)\r\n    const recipientList = useSelector(selectRecipientList)\r\n    const { actions } = useInvoiceSlice()\r\n    const [recipientId , setRecipientId] = useState(null)\r\n    const dispatch = useDispatch()\r\n    const { t } = useTranslation()\r\n    const { setFieldValue } =  useFormikContext()\r\n\r\n    const closeSearch = () => {\r\n        dispatch(actions.closeSearchRecipients(false))\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(actions.searchRecipients())\r\n    },[openSearch])\r\n\r\n    const handleChange = (e) => {\r\n        setRecipientId(e.selectionModel[0])\r\n    }\r\n\r\n    const columns = [\r\n        { field: 'id', headerName: 'ID', width: 150, hide: true },\r\n        { field: 'company_name', headerName: t('company_name'), width: 150 },\r\n        { field: 'country', headerName: t('country'), width: 150 },\r\n        { field: 'nature_of_business', headerName: t('nature_of_business'), width: 150 },\r\n        { field: 'pan_no', headerName: t('pan_no'), width: 150 },\r\n        { field: 'partner_id', headerName: t('partner_id'), width: 70, hide: true },\r\n        { field: 'vendor_partner_id', headerName: t('vendor_partner_id'), width: 70, hide: true },\r\n        { field: 'recipient_id', headerName: t('recipient_id'), width: 70, hide: true }\r\n    ]\r\n\r\n    const rows = []\r\n\r\n    const assignRows = () => {\r\n        recipientList.forEach((item) => {\r\n            rows.push(Object.assign({}, item, { id: item.recipient_id }))\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"search_container\">\r\n            {recipientList.length > 0 && assignRows()}\r\n            <Dialog\r\n                open={openSearch}\r\n                onClose={closeSearch}\r\n                fullWidth={true}\r\n            >\r\n                <DialogTitle>{t('serach_recipients')}</DialogTitle>\r\n                <DialogContent>\r\n                    <div style={{ height: 300, width: '100%' }}>\r\n                        <DataGrid columns={columns} rows={rows} pageSize={10}\r\n                            checkboxSelection \r\n                            selection={{ mode: 'single' }}\r\n                            onSelectionModelChange={(e) => handleChange(e)}\r\n                        />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => { setFieldValue('invoiceDetails.recipientCode', recipientId)}}\r\n                    >\r\n                        {t('select')}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchRecipient\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\_LineItemsGrid.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\util\\ui\\form\\ReadOnlyInputField.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\slice\\saga.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoiceview\\_components\\LineItemsEntry.js",["1135","1136","1137","1138","1139"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    Button,\r\n    Grid,\r\n    DialogTitle,\r\n    MenuItem,\r\n    TextField\r\n} from '@material-ui/core'\r\nimport '../styles.css'\r\nimport { useTranslation } from 'react-i18next'\r\nimport InputField from '../../../../util/ui/form/InputField'\r\n\r\n\r\n\r\nconst LineItemsEntry = (props) => {\r\n    const { openLineItem, setOpenLineItem, index, changeGridIndex, item } = props\r\n    const { t } = useTranslation()\r\n\r\n    const getCurrentDate = () => {\r\n        let d = new Date()\r\n        return d.getFullYear() + '-' + (d.getMonth() + 1 > 9 ? (d.getMonth() + 1) : '0' + (d.getMonth() + 1)) + '-' + (d.getDate() > 9 ? d.getDate() : '0' + d.getDate())\r\n    }\r\n\r\n    const [values, setValues] = useState({\r\n        item_description: '',\r\n        batch_number: '',\r\n        is_service: '',\r\n        hsn_code: '',\r\n        barcode: '',\r\n        quantity: 0.0,\r\n        free_qty: 0.0,\r\n        unit_of_measurement: 0.0,\r\n        item_price: 0.0,\r\n        gross_amount: 0.0,\r\n        item_discount_amount: 0.0,\r\n        pre_tax_value: 0.0,\r\n        item_taxable_value: 0.0,\r\n        gst_rate: 0.0,\r\n        sgst_utgst_amt: 0.0,\r\n        cgst_amt: 0.0,\r\n        igst_amt: 0.0,\r\n        comp_cess_rate_ad_valorem: 0.0,\r\n        comp_cess_amt_ad_valorem: 0.0,\r\n        comp_cess_amt_non_ad_valorem: 0.0,\r\n        state_cess_rate_ad_valorem: 0.0,\r\n        state_cess_amt_ad_valorem: 0.0,\r\n        state_cess_amt_non_ad_valorem: 0.0,\r\n        other_charges_item_level: 0.0,\r\n        item_total_amt: 0.0,\r\n        batch_expiry_date: getCurrentDate(),\r\n        warranty_date: getCurrentDate()\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (item != undefined) {\r\n            setValues(item);\r\n        }\r\n    }, [index])\r\n\r\n\r\n    const _changeGrid = () => {\r\n        changeGridIndex({\r\n            index: index,\r\n            values: {\r\n                item_description: values.item_description,\r\n                batch_number: values.batch_number,\r\n                is_service: values.is_service,\r\n                hsn_code: values.hsn_code,\r\n                barcode: values.barcode,\r\n                quantity: values.quantity,\r\n                free_qty: values.free_qty,\r\n                unit_of_measurement: values.unit_of_measurement,\r\n                item_price: values.item_price,\r\n                gross_amount: values.gross_amount,\r\n                item_discount_amount: values.item_discount_amount,\r\n                pre_tax_value: values.pre_tax_value,\r\n                item_taxable_value: values.item_taxable_value,\r\n                gst_rate: values.gst_rate,\r\n                sgst_utgst_amt: values.gst_utgst_amt,\r\n                cgst_amt: values.cgst_amt,\r\n                igst_amt: values.igst_amt,\r\n                comp_cess_rate_ad_valorem: values.comp_cess_rate_ad_valorem,\r\n                comp_cess_amt_ad_valorem: values.comp_cess_amt_ad_valorem,\r\n                comp_cess_amt_non_ad_valorem: values.comp_cess_amt_non_ad_valorem,\r\n                state_cess_rate_ad_valorem: values.state_cess_rate_ad_valorem,\r\n                state_cess_rate_ad_valorem: values.state_cess_rate_ad_valorem,\r\n                state_cess_amt_non_ad_valorem: values.state_cess_amt_non_ad_valorem,\r\n                other_charges_item_level: values.other_charges_item_level,\r\n                item_total_amt: values.item_total_amt,\r\n                batch_expiry_date: values.batch_expiry_date,\r\n                warranty_date: values.warranty_date,\r\n                id: index + 1\r\n            }\r\n        })\r\n        closeDialog()\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setOpenLineItem(!openLineItem)\r\n    }\r\n\r\n\r\n    const handleChange = name => event => {\r\n        setValues({ ...values, [name]: event.target.value });\r\n    };\r\n\r\n    return (\r\n        <div className=\"line_items_entry_container\">\r\n            <Dialog\r\n                open={openLineItem}\r\n                fullWidth={true}\r\n                maxWidth={\"md\"}\r\n                onClose={closeDialog}\r\n            >\r\n                <DialogTitle>{t('edit_line_items')}</DialogTitle>\r\n                <DialogContent>\r\n                    <fieldset>\r\n                        <legend>{t('item_details')}</legend>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('item_description')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"text\"\r\n                                    margin=\"normal\"\r\n                                    value={values.item_description}\r\n                                    onChange={handleChange('item_description')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('is_service')}\r\n                                    required\r\n                                    fullWidth\r\n                                    select\r\n                                    margin=\"normal\"\r\n                                    value={values.is_service}\r\n                                    onChange={handleChange('is_service')}\r\n                                >\r\n                                    <MenuItem value={\"false\"}>FALSE</MenuItem>\r\n                                    <MenuItem value={\"true\"}>TRUE</MenuItem>\r\n                                </TextField>\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('hsn_code')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"text\"\r\n                                    margin=\"normal\"\r\n                                    value={values.hsn_code}\r\n                                    onChange={handleChange('hsn_code')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('barcode')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"text\"\r\n                                    margin=\"normal\"\r\n                                    value={values.barcode}\r\n                                    onChange={handleChange('barcode')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('quantity')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.quantity}\r\n                                    onChange={handleChange('quantity')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('free_qty')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.free_qty}\r\n                                    onChange={handleChange('free_qty')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </fieldset>\r\n                    <fieldset>\r\n                        <legend>{t('value_details')}</legend>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('unit_of_measurement')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.unit_of_measurement}\r\n                                    onChange={handleChange('unit_of_measurement')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('item_price')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.item_price}\r\n                                    onChange={handleChange('item_price')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('gross_amount')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.gross_amount}\r\n                                    onChange={handleChange('gross_amount')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('item_discount_amount')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.item_discount_amount}\r\n                                    onChange={handleChange('item_discount_amount')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('pre_tax_value')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.pre_tax_value}\r\n                                    onChange={handleChange('pre_tax_value')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('item_taxable_value')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.item_taxable_value}\r\n                                    onChange={handleChange('item_taxable_value')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('gst_rate')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.gst_rate}\r\n                                    onChange={handleChange('gst_rate')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('sgst_utgst_amt')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.sgst_utgst_amt}\r\n                                    onChange={handleChange('sgst_utgst_amt')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('cgst_amt')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.cgst_amt}\r\n                                    onChange={handleChange('cgst_amt')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('igst_amt')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.igst_amt}\r\n                                    onChange={handleChange('igst_amt')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('comp_cess_rate_ad_valorem')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.comp_cess_rate_ad_valorem}\r\n                                    onChange={handleChange('comp_cess_rate_ad_valorem')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('comp_cess_amt_ad_valorem')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.comp_cess_amt_ad_valorem}\r\n                                    onChange={handleChange('comp_cess_amt_ad_valorem')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('comp_cess_amt_non_ad_valorem')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.comp_cess_amt_non_ad_valorem}\r\n                                    onChange={handleChange('comp_cess_amt_non_ad_valorem')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('state_cess_rate_ad_valorem')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.state_cess_rate_ad_valorem}\r\n                                    onChange={handleChange('state_cess_rate_ad_valorem')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('state_cess_amt_ad_valorem')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.state_cess_amt_ad_valorem}\r\n                                    onChange={handleChange('state_cess_amt_ad_valorem')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('state_cess_amt_non_ad_valorem')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.state_cess_amt_non_ad_valorem}\r\n                                    onChange={handleChange('state_cess_amt_non_ad_valorem')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('other_charges_item_level')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.other_charges_item_level}\r\n                                    onChange={handleChange('other_charges_item_level')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('item_total_amt')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.item_total_amt}\r\n                                    onChange={handleChange('item_total_amt')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('batch_number')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.batch_number}\r\n                                    onChange={handleChange('batch_number')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('batch_expiry_date')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"date\"\r\n                                    margin=\"normal\"\r\n                                    value={values.batch_expiry_date}\r\n                                    onChange={handleChange('batch_expiry_date')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('warranty_date')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"date\"\r\n                                    margin=\"normal\"\r\n                                    value={values.warranty_date}\r\n                                    onChange={handleChange('warranty_date')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </fieldset>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => {\r\n                            _changeGrid()\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                    >\r\n                        {t('ok_button')}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(LineItemsEntry)\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\vendormapping\\_components\\SearchVendor.js",["1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150","1151","1152","1153"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Button,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport {\r\n    selectSearchVendor,\r\n    selectVendorList,\r\n    selectAllVendors,\r\n    search_data_vendors,\r\n    selectedPartnerId\r\n\r\n} from '../slice/selectors'\r\nimport $ from 'jquery';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n    useInvoiceSlice, useVendorMappingSlice\r\n} from '../slice'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { DataGrid } from '@material-ui/data-grid'\r\nimport { Formik, useFormikContext } from 'formik'\r\nimport Vendorform from './Vendorform';\r\nimport id from 'date-fns/locale/id';\r\n\r\nconst SearchVendor = (props) => {\r\n    const openSearch = useSelector(selectSearchVendor)\r\n    const { actions } = useVendorMappingSlice()\r\n    const vendorAllList = useSelector(selectAllVendors)\r\n    let selectedId = useSelector(selectedPartnerId)\r\n    const [myobj, setMyobj] = useState(\"\")\r\n    const [getID, setGetID] = useState(0)\r\n    var getPartnerID = \"abishek\";\r\n    const dispatch = useDispatch()\r\n    const { t } = useTranslation()\r\n    const { setFieldValue } = useFormikContext()\r\n    const [taskData, setTaskData] = useState({})\r\n    const searchvendorList = useSelector(search_data_vendors)\r\n\r\n    const closeSearch = () => {\r\n        dispatch(actions.closeSearchVendors(false))\r\n    }\r\n    const handleChange = (row) => {\r\n        alert(row.row.partnerId)\r\n        // console.log(row)\r\n        setMyobj(row.row.partnerId)\r\n    }\r\n    useEffect(() => {\r\n        dispatch(actions.loadVendorFormDetails());\r\n    }, [openSearch])\r\n\r\n    const columns = [\r\n        { field: 'partnerId', headerName: t('partnerId'), width: 200 },\r\n        { field: 'companyName', headerName: t('companyName'), width: 250 },\r\n    ];\r\n\r\n    let rows = []\r\n    const _loadRows = () => {\r\n        const x = vendorAllList.map((item, i) => ({\r\n            ...item,\r\n            id: i\r\n        }))\r\n        rows = x;\r\n    }\r\n    const handleSearch = () => {\r\n        console.log(\"Handle search\")\r\n    }\r\n    let vendors = {\r\n        search: \"\"\r\n    }\r\n    const submitForm = (values) => {\r\n        console.log(values)\r\n        dispatch(actions.searchvendorForm(values))\r\n    }\r\n\r\n    return (\r\n        <div className=\"search_container\">\r\n\r\n            {vendorAllList.length > 0 && _loadRows()}\r\n            <Dialog\r\n                open={openSearch}\r\n                onClose={closeSearch}\r\n                fullWidth={true}\r\n            >\r\n                <DialogTitle>{t('Vendors')}</DialogTitle>\r\n                <DialogContent>\r\n                    <Formik\r\n                        initialValues={vendors}\r\n                        onSubmit={(values) => {\r\n                            submitForm(values)\r\n                        }}\r\n                    >\r\n                        {({ values, handleChange, handleBlur, handleSubmit, handleReset }) => (\r\n                            <div>\r\n                                <form onSubmit={handleSubmit} >\r\n                                    <div className=\"search_wrapper\" >\r\n                                        {/* <input type=\"text\" id=\"Search_cntrl\"  value={values.searchvendor} placeholder=\"Search Vendors...\" onBlur={handleBlur}\r\n                                onChange={handleChange} /> */}\r\n                                        <TextField\r\n                                            className=\"mt-20\"\r\n                                            type=\"text\"\r\n                                            variant=\"standard\"\r\n                                            onBlur={handleBlur}\r\n                                            onChange={handleChange}\r\n                                            name=\"search\"\r\n                                            label={t('search')}\r\n                                            value={values.search}\r\n                                        />\r\n\r\n\r\n                                        <Button\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                            type=\"submit\"\r\n                                        >Search</Button>\r\n\r\n                                    </div>\r\n\r\n                                </form>\r\n                            </div>\r\n                        )}\r\n                    </Formik>\r\n                    <div style={{ height: 300, width: '100%' }}>\r\n                        <DataGrid columns={columns} rows={rows} pageSize={10}\r\n                            checkboxSelection\r\n                            selection={{ mode: 'single' }}\r\n                            // onSelectionModelChange={(row) => handleChange(row)}\r\n                            onRowClick={(row) => handleChange(row)}\r\n                            // onRowClick={(row) => {\r\n                            //     setGetID(row.row.id + 1)\r\n                            //     console.log(getID)\r\n                            //     setTaskData(row.row);\r\n                            //     console.log(taskData)\r\n                            //     getPartnerID = row.row.partnerId;\r\n                            //     setMyobj(row.row.partnerId)\r\n                            //     console.log(\"PPPPP\", getPartnerID)\r\n\r\n                            //     selectedId = row.row.partnerId;\r\n                            //     console.log(\"IDDDDDDDDD\", selectedId)\r\n\r\n                            //     //   $('.EditUpdateTask').toggleClass(\"open\")\r\n\r\n                            // }}\r\n\r\n                        />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => {setFieldValue('initialState.partnerId', myobj) ;closeSearch()}}\r\n                    >\r\n                        {t('select')}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchVendor\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\internal\\manager\\slice\\selectors.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\internal\\manager\\slice\\index.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\internal\\manager\\slice\\saga.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\Payble.jsx",["1154"],"import React from 'react'\r\nimport paybleDashboard from \"../../images/dashboard.PNG\"\r\nexport const Payble = () => {\r\n    return (\r\n        <div>\r\n            <img width=\"100%\" height=\"100%\" src={paybleDashboard}/>\r\n        </div>\r\n    )\r\n}\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\customer\\admin\\Receivable.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoicejsonupload\\index.js",["1155","1156","1157","1158","1159"],"import React, { useState } from 'react'\r\nimport GridUploader from './_components/GridUploader'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { FieldArray, Formik } from 'formik'\r\nimport Attachments from './_components/Attachments'\r\nimport * as Yup from 'yup'\r\nimport { Form } from 'react-bootstrap'\r\nimport { Button } from '@material-ui/core'\r\nimport { useDispatch } from 'react-redux'\r\nimport { actions } from './slice'\r\nfunction UploadJsonInvoice() {\r\n\tconst { t } = useTranslation()\r\n\tconst dispatch = useDispatch()\r\n\tconst [_files, setFiles] = useState([])\r\n\t// const[invoiceJson,setInvoiceJson]=useState([])\r\n\t// const[supportingDocuments,setSupportingDocuments]=useState([])\r\n\t// const[invoiceDocument,setInvoiceDocument]=useState([])\r\n\tlet invoiceInitialDetails = {\r\n\t\tinvoiceAttachmentDetails: [],\r\n\t\tinvoiceJson: [],\r\n\t\trecipientCode : ''\r\n\r\n\t}\r\n\tconst handleInvoiceSubmit = (val) => {\r\n\t\t\r\n\t\tconsole.dir(val)\r\n\t\tdispatch(actions.InvoiceJsonSub(val))\r\n\t}\r\n\tconst _validationSchema = Yup.object().shape({\r\n\t\tinvoiceDetails: Yup.object().shape({\r\n\t\t\tinvoicenum: Yup.string().max(6).required(t('param_require'))\r\n\t\t})\r\n\t})\r\n\treturn (\r\n\r\n\t\t<div className=\"attachments_container\">\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={invoiceInitialDetails}\r\n\t\t\t\tonSubmit={(values) => {\r\n\t\t\t\t\talert('called')\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{({values}) => (\r\n\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t<Attachments  />\r\n\t\t\t\t\t\t<Button \r\n\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\tonClick={ \r\n\t\t\t\t\t\t\t\t(e)=>handleInvoiceSubmit(values)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t>Submit</Button> \r\n\t\t\t\t\t</Form>\r\n\t\t\t\t)}\r\n\t\t\t</Formik>\r\n\t\t</div >\r\n\t)\r\n}\r\nexport default UploadJsonInvoice\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoicejsonupload\\_components\\GridUploader.js",["1160","1161","1162","1163","1164","1165","1166","1167","1168","1169","1170","1171","1172"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n    DataGrid\r\n} from '@material-ui/data-grid'\r\nimport {\r\n    IconButton\r\n} from '@material-ui/core'\r\nimport { useTranslation } from 'react-i18next'\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport '../../../../util/ui/ui.css'\r\nimport { DropzoneDialogBase } from 'material-ui-dropzone'\r\nimport { useDispatch as dispatch, useSelector } from 'react-redux';\r\nimport { actions, useJsonInvoiceSlice } from '../slice';\r\nimport { selectinvDoc, selectinvJsn } from '../slice/selector';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nconst GridUploader = (props) => {\r\n    const { _items, insert, folderId, doc_type, title, maxUplods, marginleft, marginright ,remove} = props\r\n    const [items, setItems] = useState([])\r\n\r\n    const { t } = useTranslation()\r\n    const [openUploader, setOpenUploader] = useState(false)\r\n    // const allowedMimeTypes = ['image/*', 'application/pdf', 'text/html', 'text/plain']\r\n    // const maxUplods = 100 // MAX Value\r\n    const deleteItem = (params) => {\r\n        let updatedItems = items.filter((i) => {\r\n            return i.file.name !== params.row.document_name\r\n        })\r\n        setItems(updatedItems)\r\n        remove(params.rowIndex)\r\n    } \r\n    useEffect(() => {\r\n        if (items && items.length > 0) {\r\n            let ___item = []\r\n            _items.forEach((_item) => {\r\n                if (_item) {\r\n                    let __item = {}\r\n                    __item.file = {}\r\n                    _item.file.name = _item.ecm_doc_id\r\n                    _item.file.type = _item.mime_type != null ? _item.mime_type : \"\"\r\n                    _item.file.lastModifiedDate = _item.created_date\r\n                    _item.id = _item.ecm_doc_id\r\n                    ___item.push(__item)\r\n                }\r\n            })\r\n            setItems(___item)\r\n        }\r\n    }, [])\r\n\r\n    const columns = [\r\n        { field: 'document_name', headerName: t('document_name'), width: 180 },\r\n        { field: 'document_type', headerName: t('document_type'), width: 180 },\r\n        { field: 'document_added_on', headerName: t('document_added_on'), width: 180 },\r\n        {\r\n            field: 'delete_item', headerName: t('delete_item'), width: 150, renderCell: (params) => (\r\n                <>\r\n                    <IconButton\r\n                        onClick={() => deleteItem(params)}\r\n                    >\r\n                        <HighlightOffIcon />\r\n                    </IconButton>\r\n                </>\r\n\r\n            )\r\n        }\r\n    ]\r\n\r\n    let rows = []\r\n    items.map((_item, i) => {\r\n        if (_item && _item.file) {\r\n            let __item = {}\r\n            __item.id = _item.id ? _item.id : i\r\n            __item.document_name = _item.file.name\r\n            __item.document_type = _item.file.type\r\n            __item.document_added_on = _item.file.lastModifiedDate\r\n\r\n            rows.push(__item)\r\n        }\r\n    })\r\n\r\n    const upload = () => {\r\n        setOpenUploader(!openUploader)\r\n    }\r\n\r\n    const refresh = () => {\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={doc_type} >\r\n            <fieldset className={doc_type+1} >\r\n                <legend>{props.title}</legend>\r\n                <div className=\"uploadActionButtons\">\r\n                    <IconButton\r\n                        onClick={() => upload()}\r\n                    >\r\n                        <CloudUploadIcon />\r\n                    </IconButton>\r\n                    <IconButton\r\n                        onClick={() => refresh()}\r\n                    >\r\n                        <RefreshIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <DataGrid rows={rows} columns={columns} />\r\n                <DropzoneDialogBase\r\n                    open={openUploader}\r\n                    dialogTitle={t('upload_title')}\r\n                    acceptedFiles={props.allowedMimeTypes}\r\n                    onClose={() => { setOpenUploader(!openUploader) }}\r\n                    showPreviews={true}\r\n                    showFileNamesInPreview={true}\r\n                    filesLimit={maxUplods}\r\n                    fileObjects={items}\r\n                    onSave={() => {\r\n                        setOpenUploader(!openUploader)\r\n                    }}\r\n                    onDelete={(__files) => { }}\r\n                    onAdd={(__files) => {\r\n                        let _x = null\r\n                        console.log(__files)\r\n                        __files.map((_f) => {\r\n                            _x = [...items, _f]\r\n                            let upload = {\r\n                                \"doc_type\": doc_type,\r\n                                \"mime_type\": _f.file.type,\r\n                                \"base64\": _f.data,\r\n                                \"fileName\": _f.file.name\r\n                            }\r\n\r\n                            insert(_items.length, upload)\r\n                        })\r\n                        setItems(_x)\r\n                    }}\r\n                />\r\n            </fieldset>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GridUploader","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoicejsonupload\\_components\\Attachments.js",["1173","1174","1175","1176","1177","1178","1179"],"import React, { useState } from 'react'\r\nimport '../styles.css'\r\nimport { FieldArray } from 'formik'\r\nimport { useTranslation } from 'react-i18next'\r\nimport GridUploader from './GridUploader'\r\nimport { FormControl, Grid, IconButton, InputAdornment, InputLabel } from '@material-ui/core'\r\nimport { actions } from '../slice'\r\nimport { useDispatch } from 'react-redux'\r\nimport _Input from '../../../../util/ui/form/_Input'\r\nimport InputField from '../../../../util/ui/form/InputField'\r\nimport { SearchIcon } from '@material-ui/data-grid'\r\nimport SearchRecipient from '../../invoicejsonupload/_components/SearchRecipient'\r\nimport { useFormikContext } from 'formik'\r\nconst Attachments = () => {\r\n    const dispatch = useDispatch()\r\n    const { t } = useTranslation()\r\n    const { values } = useFormikContext()\r\n    const [inpVal, setInpVal] = useState(\"\")\r\n    console.dir(values)\r\n\r\n    const handleRecipientClick = () => {\r\n        dispatch(actions.openSearchRecipients(true))\r\n    }\r\n    return (\r\n        <div className=\"attachments_container\">\r\n            <Grid container spacing={12}>\r\n\r\n                <Grid item xs={7}>\r\n\r\n                    <FieldArray\r\n                        name=\"invoiceJson\"\r\n                        label={t('attachments')}\r\n                    >\r\n                        {(props) => (\r\n                            <div style={{ width: \"100vh\",height:\"150px\" }}>\r\n                                <GridUploader  allowedMimeTypes={[\"application/json\"]} maxUplods={1} _items={props.form.values.invoiceJson} insert={props.insert} remove={props.remove} doc_type=\"InvoiceJson\" folderId=\"\" title={t('upload_invoice_Json')} />\r\n                            </div>\r\n                        )}\r\n                    </FieldArray>\r\n\r\n                </Grid>\r\n                <Grid item xs={5}>\r\n\r\n                    <div >\r\n                        {/** <FormControl variant=\"standard\" >\r\n                        <InputLabel>Recipient Code</InputLabel>\r\n                        <_Input\r\n                            name=\"recipientCode\"\r\n                            label=\"Recipient Code\"\r\n                            defaultValue={values.recipientCode}\r\n                            endAdornment={\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton\r\n                                        edge=\"end\"\r\n                                        onClick={handleRecipientClick}\r\n                                    >\r\n                                        <SearchIcon />\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            }\r\n                        />\r\n                    </FormControl>*/}\r\n                        <div style={{ display: \"inline-flex\" }}>\r\n                            <InputField\r\n                                name=\"recipientCode\"\r\n                                label=\"Recipient Code\"\r\n                            />\r\n                            <IconButton\r\n                                edge=\"end\"\r\n                                onClick={handleRecipientClick}\r\n                            >\r\n                                <SearchIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                        <SearchRecipient myval={setInpVal} />\r\n                    </div>\r\n\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} style={{display:\"inline-flex\"}}>\r\n\r\n                <Grid >\r\n\r\n\r\n\r\n                    <FieldArray\r\n                        name=\"invoiceAttachmentDetails\"\r\n                        label={t('attachments')}\r\n                    >\r\n                        {(props) => (\r\n                            <div style={{ width: \"100vh\", marginRight:\"50px\"}}>\r\n                                <GridUploader insert={props.insert}  allowedMimeTypes={['image/*', 'application/pdf', 'text/html', 'text/plain']} maxUplods={1} _items={props.form.values.invoiceAttachmentDetails} insert={props.insert} doc_type=\"InvoiceAttachment\" folderId=\"\" title={t('upload_invoice_documents')} />\r\n                            </div>\r\n                        )}\r\n                    </FieldArray>\r\n\r\n                </Grid>\r\n                <Grid >\r\n\r\n\r\n\r\n                    <FieldArray\r\n                        name=\"invoiceAttachmentDetails\"\r\n                        label={t('attachments')}\r\n                    >\r\n                        {(props) => (\r\n                            <div style={{ width: \"80vh\" ,marginRight:\"150px\" }} >\r\n                                <GridUploader insert={props.insert}  allowedMimeTypes={['image/*', 'application/pdf', 'text/html', 'text/plain']} maxUplods={100} _items={props.form.values.invoiceAttachmentDetails} insert={props.insert} doc_type=\"InvoiceSupportingDocument\" folderId=\"\" title={t('upload_supporting_documents')} />\r\n                            </div>\r\n                        )}\r\n                    </FieldArray>\r\n\r\n                </Grid>\r\n\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Attachments\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoicejsonupload\\slice\\index.js",["1180","1181","1182"],"import { createSlice } from '@reduxjs/toolkit'\r\nimport {\r\n  useInjectReducer,\r\n  useInjectSaga,\r\n} from 'redux-injectors';\r\nimport { sagaFetchAllInvoices , sagaChangeTab  , sagaUploadInvoice , sagaLoadExistingInvoiceDetails ,\r\n  sagaSubmitInvoiceJsonDetails, sagaLoadRecipientDetailsJson  } from './saga';\r\nimport { all } from 'redux-saga/effects'\r\n\r\n\r\nexport const initialState = {\r\n\tloading : false,\r\n\terror : false,\r\n\tjsonUploads : null,\r\n  tabIndex : 0,\r\n  isLeftArrorwClicked : false,\r\n  isRightArrowClicked : false,\r\n  hasuploaded : false,\r\n  invoiceDetails : null,\r\n  refId:null,\r\n  searchRecipients : false,\r\n  recipientsList : [],\r\n  invJsn:[],\r\n  invDoc:[]\r\n} // initial state \r\n\r\nconst slice = createSlice({\r\n  name: '_invoiceJsonSlice',\r\n  initialState,\r\n  reducers: {\r\n  \tloadAllInvoices(state,action) {\r\n      state.loading = true\r\n      state.error = null\r\n    },\r\n    loadedAllInvoices(state,action) {\r\n      state.invoice_list =  action.payload\r\n      state.loading = false\r\n    },\r\n    loadAllInvoiceError(state,action) {\r\n       state.loading = false\r\n       state.error = action.payload\r\n    },\r\n    changeTab(state,action) {\r\n      state.loading = true\r\n      state.tabIndex = action.payload\r\n    },\r\n    tabChanged(state,action) {\r\n      state.loading = false\r\n    },\r\n    invoiceUploadError(state,action) {\r\n      state.loading = false\r\n      state.error = action.payload\r\n    },\r\n    invoiceJsonUploadError(state,action) {\r\n      state.loading = false\r\n      state.error = action.payload\r\n    },\r\n    emptyUploads(state,action) {\r\n      state.hasuploaded =  action.payload\r\n    },\r\n    loadExistingInvoiceDetails(state,action) {\r\n      state.loading = true\r\n      state.refId = action.payload\r\n    },\r\n    existingInvoiceLoaded(state,action) {\r\n      state.loading = false\r\n      state.invoiceDetails = action.payload\r\n    },\r\n    invoiceFetchError(state,action) {\r\n      state.loading = false\r\n      state.error = action.payload\r\n    },\r\n    openSearchRecipients(state,action) {\r\n      state.searchRecipients = action.payload\r\n    },\r\n    closeSearchRecipients(state,action) {\r\n      state.searchRecipients = action.payload\r\n    },\r\n    searchRecipientsJson(state) {\r\n      state.loading = true\r\n    },\r\n    searchRecipientsCompleted(state,action) {\r\n      state.loading = false\r\n      state.recipientsList = action.payload\r\n    },\r\n   \r\n    InvoiceJsonSub(state,action) {\r\n      state.loading = true\r\n      state.error = null\r\n      console.dir(action.payload);\r\n      state.jsonUploads = action.payload\r\n    },\r\n    InvoiceJsonSubCompleted(state,action) {\r\n      state.loading = false\r\n      // state.hasuploaded =  !action.payload.hasError\r\n    },\r\n    setError(state,action) {\r\n      state.loading = false\r\n      state.error = action.payload\r\n    }\r\n  },\r\n});\r\n\r\nexport const { actions, reducer } = slice;\r\n\r\nfunction* addComponentsSaga() {\r\n  yield all([\r\n       sagaFetchAllInvoices(),\r\n    //  sagaChangeTab(),\r\n      sagaLoadRecipientDetailsJson(),\r\n   //   sagaUploadInvoice(),\r\n    //  sagaLoadExistingInvoiceDetails(),\r\n     sagaSubmitInvoiceJsonDetails()\r\n  ]);\r\n}\r\n\r\nexport const useJsonInvoiceSlice = () => {\r\n  useInjectReducer({ key: slice.name, reducer: slice.reducer });\r\n  useInjectSaga({ key: slice.name, saga: addComponentsSaga });\r\n  return { actions: slice.actions };\r\n};","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoicejsonupload\\slice\\selector.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoicejsonupload\\_components\\SearchRecipient.js",["1183"],"import React, { useState , useEffect } from 'react'\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Button\r\n} from '@material-ui/core'\r\nimport {\r\n    selectSearchRecipient,\r\n    selectRecipientList\r\n} from '../slice/selector'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { DataGrid } from '@material-ui/data-grid'\r\nimport { useFormikContext } from 'formik'\r\nimport {\r\n    useJsonInvoiceSlice\r\n} from '../slice'\r\n\r\nconst SearchRecipient = (props) => {\r\n    const openSearch = useSelector(selectSearchRecipient)\r\n    const recipientList = useSelector(selectRecipientList)\r\n    const { actions } = useJsonInvoiceSlice()\r\n    const [recipientId , setRecipientId] = useState(null)\r\n    const dispatch = useDispatch()\r\n    const { t } = useTranslation()\r\n    const { setFieldValue } =  useFormikContext()\r\n\r\n    const closeSearch = () => {\r\n        dispatch(actions.closeSearchRecipients(false))\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(actions.searchRecipientsJson())\r\n    },[openSearch])\r\n\r\n    const handleChange = (e) => {\r\n        setRecipientId(e.selectionModel[0])\r\n    }\r\n\r\n    const columns = [\r\n        { field: 'id', headerName: 'ID', width: 150, hide: true },\r\n        { field: 'company_name', headerName: t('company_name'), width: 150 },\r\n        { field: 'country', headerName: t('country'), width: 150 },\r\n        { field: 'nature_of_business', headerName: t('nature_of_business'), width: 150 },\r\n        { field: 'pan_no', headerName: t('pan_no'), width: 150 },\r\n        { field: 'partner_id', headerName: t('partner_id'), width: 70, hide: true },\r\n        { field: 'vendor_partner_id', headerName: t('vendor_partner_id'), width: 70, hide: true },\r\n        { field: 'recipient_id', headerName: t('recipient_id'), width: 70, hide: true }\r\n    ]\r\n\r\n    const rows = []\r\n\r\n    const assignRows = () => {\r\n        recipientList.forEach((item) => {\r\n            rows.push(Object.assign({}, item, { id: item.recipient_id }))\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"search_container\">\r\n            {recipientList.length > 0 && assignRows()}\r\n            <Dialog\r\n                open={openSearch}\r\n                onClose={closeSearch}\r\n                fullWidth={true}\r\n            >\r\n                <DialogTitle>{t('search_recipients')}</DialogTitle>\r\n                <DialogContent>\r\n                    <div style={{ height: 300, width: '100%' }}>\r\n                        <DataGrid columns={columns} rows={rows} pageSize={10}\r\n                            checkboxSelection \r\n                            selection={{ mode: 'single' }}\r\n                            onSelectionModelChange={(e) => handleChange(e)}\r\n                        />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => {setFieldValue('recipientCode', recipientId) ;props.myval(recipientId) ;closeSearch()}}\r\n                    >\r\n                        {t('select')}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchRecipient\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\invoicejsonupload\\slice\\saga.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\index.js",["1184","1185","1186","1187"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\index.js",["1188","1189","1190","1191","1192","1193","1194"],"import { useInvoiceSlice } from './slice'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useEffect } from 'react'\r\nimport {\r\n\tTabs,\r\n\tTab,\r\n\tButton\r\n} from '@material-ui/core'\r\nimport {\r\n\tselectLoading,\r\n\tselectError,\r\n\tselectTab,\r\n\tselectHasUploaded,\r\n\tselectInvoiceDetails\r\n} from './slice/selector'\r\nimport { useTranslation } from 'react-i18next'\r\nimport TimerOutlinedIcon from '@material-ui/icons/TimerOutlined'\r\nimport GroupAddOutlinedIcon from '@material-ui/icons/GroupAddOutlined'\r\nimport Loader from '../../../../util/ui/Loader'\r\nimport TabPanel from '../../../../util/ui/tab/TabPanel'\r\nimport './styles.css'\r\nimport { Formik, Form } from 'formik'\r\nimport InvoiceMetadata from './_components/InvoiceMetadata'\r\nimport SupplierBuyerMetadata from './_components/SupplierBuyerMetadata'\r\nimport PaymentMetadata from './_components/PaymentMetadata'\r\nimport DispatchShipTo from './_components/DispatchShipTo'\r\nimport EWaybillMetadata from './_components/EWaybillMetadata'\r\nimport LineItems from './_components/LineItems'\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport 'react-splitter-layout/lib/index.css';\r\nimport Attachments from './_components/Attachments'\r\nimport * as Yup from 'yup'\r\nimport { Navigate, useParams, useNavigate } from 'react-router-dom'\r\nimport {\r\n\tselectUser\r\n} from '../../../common/authentication/slice/selectors'\r\n\r\n\r\n\r\nconst ViewInvoice = () => {\r\n\tconst { actions } = useInvoiceSlice()\r\n\tconst dispatch = useDispatch()\r\n\tconst error = useSelector(selectError)\r\n\tconst loading = useSelector(selectLoading)\r\n\tconst { t } = useTranslation()\r\n\tconst tabIndex = useSelector(selectTab)\r\n\tconst isUploaded = useSelector(selectHasUploaded)\r\n\tconst user = useSelector(selectUser)\r\n\tconst { refId } = useParams()\r\n\tconst invoiceDetails = useSelector(selectInvoiceDetails)\r\n\tconst navigate = useNavigate()\r\n\tlet invoiceInitialDetails = {\r\n\t\tinvoiceDetails: {\r\n\t\t\trecipientCode: '',\r\n\t\t\tinvoicenum: '',\r\n\t\t\tirn: '',\r\n\t\t\tinvoice_subtype_code: '',\r\n\t\t\tinvoicedate: '2021-03-06',\r\n\t\t\tinvoice_currency_code: 'INR',\r\n\t\t\tsupplier_note: '',\r\n\t\t\treverse_charge: false,\r\n\t\t\tecom_gstin: 0.0,\r\n\t\t\tigst_on_intra: false,\r\n\t\t\ttotal_assessable_value: 0.0,\r\n\t\t\tigstvalue: 0.0,\r\n\t\t\tcgstvalue: 0.0,\r\n\t\t\tsgstvalue: 0.0,\r\n\t\t\tcessvalue: 0.0,\r\n\t\t\tstatecessvalue: 0.0,\r\n\t\t\tdiscount: 0.0,\r\n\t\t\tother_charges: 0.0,\r\n\t\t\troundoff: 0.0,\r\n\t\t\ttotal_invoice_value: 0.0\r\n\t\t},\r\n\t\tinvoiceSellerPaymentDetails: {\r\n\t\t\tpayee_name: '',\r\n\t\t\tpayee_financial_account: '',\r\n\t\t\tmodeofpayment: '',\r\n\t\t\tfinancial_institution_branch: '',\r\n\t\t\tpayment_terms: '',\r\n\t\t\tpayment_instruction: '',\r\n\t\t\tcredit_transfer: '',\r\n\t\t\tdirect_debit: '',\r\n\t\t\tcreditdays: 0,\r\n\t\t\tpayment_due: 0.0,\r\n\t\t\tpaid_amount: 0.0\r\n\t\t},\r\n\t\tinvoiceDispatchShiptoDetails: {\r\n\t\t\tdispatch_company_name: '',\r\n\t\t\tdispatch_address1: '',\r\n\t\t\tdispatch_address2: '',\r\n\t\t\tdispatch_location: '',\r\n\t\t\tdispatch_pincode: '',\r\n\t\t\tdispatch_state: '',\r\n\t\t\tshippingto_gstin: '',\r\n\t\t\tshippingto_legal_name: '',\r\n\t\t\tshippingto_trade_name: '',\r\n\t\t\tshippingto_address1: '',\r\n\t\t\tshippingto_address2: '',\r\n\t\t\tshippingto_location: '',\r\n\t\t\tshippingto_pincode: '',\r\n\t\t\tshippintto_state: ''\r\n\t\t},\r\n\t\tinvoiceSupplierBuyerDetails: {\r\n\t\t\tsupplier_legal_name: '',\r\n\t\t\tsupplier_trading_name: '',\r\n\t\t\tsupplier_gstin: '',\r\n\t\t\tsupplier_address1: '',\r\n\t\t\tsupplier_address2: '',\r\n\t\t\tsupplier_location: '',\r\n\t\t\tsupplier_state: '',\r\n\t\t\tsupplier_pincode: '',\r\n\t\t\tsupplier_phone: '',\r\n\t\t\tsupplier_email: '',\r\n\t\t\tbilling_legal_name: '',\r\n\t\t\tbilling_trade_name: '',\r\n\t\t\tbilling_gstin: '',\r\n\t\t\tbilling_pos: '',\r\n\t\t\tbilling_address1: '',\r\n\t\t\tbilling_address2: '',\r\n\t\t\tbilling_state: '',\r\n\t\t\tbilling_pincode: '',\r\n\t\t\tbilling_phone: '',\r\n\t\t\tbilling_email: '',\r\n\t\t\tbilling_location: ''\r\n\t\t},\r\n\t\tinvoiceEwayBillDetails: {\r\n\t\t\ttransporter_id: '',\r\n\t\t\ttransportername: '',\r\n\t\t\ttransmode: '',\r\n\t\t\ttransdistance: 0.0,\r\n\t\t\ttransdocno: '',\r\n\t\t\ttransdocdate: '2021-03-06',\r\n\t\t\tvehicleno: '',\r\n\t\t\tvehicleno: ''\r\n\t\t},\r\n\t\tlineItemDetails: [],\r\n\t\tinvoiceAttachmentDetails: [],\r\n\t\tactionDetails: {\r\n\t\t\t\"action_code\": \"001\",\r\n\t\t\t\"action_name\": \"Submit\",\r\n\t\t\t\"source\": \"portal\"\r\n\t\t}\r\n\t}\r\n\r\n\tconst useEffectOnMount = (effect) => {\r\n\t\tuseEffect(effect, []);\r\n\t};\r\n\r\n\tuseEffectOnMount(() => {\r\n\t\tif (refId != undefined)\r\n\t\t\tdispatch(actions.loadExistingInvoiceDetails(refId))\r\n\t});\r\n\r\n\tconst handleTabChange = (event, newValue) => {\r\n\t\tdispatch(actions.changeTab(newValue))\r\n\t}\r\n\r\n\tconst handleInvoiceSubmit = (values) => {\r\n\t\tdispatch(actions.uploadInvoice(values))\r\n\t}\r\n\r\n\tconst saveForm = (values) => {\r\n\t\tif (values.actionDetails === null) {\r\n\t\t\tvalues.actionDetails = {}\r\n\t\t\tvalues.actionDetails.action_code = \"002\";\r\n\t\t\tvalues.actionDetails.action_name = \"Draft\";\r\n\t\t} else {\r\n\t\t\tvalues.actionDetails.action_code = \"002\";\r\n\t\t\tvalues.actionDetails.action_name = \"Draft\";\r\n\t\t}\r\n\t\tdispatch(actions.uploadInvoice(values))\r\n\t}\r\n\r\n\tconst _validationSchema = Yup.object().shape({\r\n\t\tinvoiceDetails: Yup.object().shape({\r\n\t\t\tinvoicenum: Yup.string().max(6).required(t('param_require'))\r\n\t\t})\r\n\t})\r\n\r\n\tconst reassignInitialValues = () => {\r\n\t\tinvoiceInitialDetails = invoiceDetails\r\n\t}\r\n\r\n\tconst handleDiscard = () => {\r\n\t\tnavigate(`/app/${user.roles[0]}/invoice_list`, { replace: true })\r\n\t}\r\n\r\n\tconst handleNavigate = () => {\r\n\t\thandleDiscard()\r\n\t\tdispatch(actions.emptyUploads(false));\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{isUploaded && handleNavigate()}\r\n\t\t\t{invoiceDetails != null && reassignInitialValues()}\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<Formik\r\n\t\t\t\t\tinitialValues={invoiceInitialDetails}\r\n\t\t\t\t\tonSubmit={handleInvoiceSubmit}\r\n\t\t\t\t\tvalidationSchema={_validationSchema}\r\n\t\t\t\t\tenableReinitialize={true}\r\n\t\t\t\t>\r\n\t\t\t\t\t{({ values, validateForm, setFieldValue }) => (\r\n\t\t\t\t\t\t<Form className=\"invoice_main_form\">\r\n\t\t\t\t\t\t\t<SplitterLayout>\r\n\t\t\t\t\t\t\t\t<div className=\"left_pane\">\r\n\t\t\t\t\t\t\t\t\t<InvoiceMetadata setFieldValue={setFieldValue} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"right_pane\">\r\n\t\t\t\t\t\t\t\t\t<Tabs\r\n\t\t\t\t\t\t\t\t\t\tvalue={tabIndex}\r\n\t\t\t\t\t\t\t\t\t\tonChange={handleTabChange}\r\n\t\t\t\t\t\t\t\t\t\tvariant=\"scrollable\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<Tab icon={<TimerOutlinedIcon />} label={t('attachments')} />\r\n\t\t\t\t\t\t\t\t\t\t<Tab icon={<GroupAddOutlinedIcon />} label={t('supplier_buyer_info')} />\r\n\t\t\t\t\t\t\t\t\t\t<Tab icon={<GroupAddOutlinedIcon />} label={t('payment_info')} />\r\n\t\t\t\t\t\t\t\t\t\t<Tab icon={<GroupAddOutlinedIcon />} label={t('dispatch_ship_to_details')} />\r\n\t\t\t\t\t\t\t\t\t\t<Tab icon={<GroupAddOutlinedIcon />} label={t('eway_bill')} />\r\n\t\t\t\t\t\t\t\t\t\t<Tab icon={<GroupAddOutlinedIcon />} label={t('line_items')} />\r\n\t\t\t\t\t\t\t\t\t\t<Tab icon={<GroupAddOutlinedIcon />} label={t('history')} />\r\n\t\t\t\t\t\t\t\t\t</Tabs>\r\n\t\t\t\t\t\t\t\t\t<TabPanel value={tabIndex} index={0}>\r\n\t\t\t\t\t\t\t\t\t\t{/** <Attachments />*/}\r\n\t\t\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t\t\t<TabPanel value={tabIndex} index={1}>\r\n\t\t\t\t\t\t\t\t\t\t<SupplierBuyerMetadata />\r\n\t\t\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t\t\t<TabPanel value={tabIndex} index={2}>\r\n\t\t\t\t\t\t\t\t\t\t<PaymentMetadata />\r\n\t\t\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t\t\t<TabPanel value={tabIndex} index={3}>\r\n\t\t\t\t\t\t\t\t\t\t<DispatchShipTo />\r\n\t\t\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t\t\t<TabPanel value={tabIndex} index={4}>\r\n\t\t\t\t\t\t\t\t\t\t<EWaybillMetadata />\r\n\t\t\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t\t\t<TabPanel value={tabIndex} index={5}>\r\n\t\t\t\t\t\t\t\t\t\t<LineItems />\r\n\t\t\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</SplitterLayout>\r\n\t\t\t\t\t\t\t<div className=\"actions\">\r\n\t\t\t\t\t\t\t\t{/** we can add submit Query Buttons  */}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Formik>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"common_info_container\">\r\n\t\t\t\t{loading && (<Loader isLoading={loading} />)}\r\n\t\t\t\t{error && (<div> An error in page </div>)}\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nexport default ViewInvoice","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoice\\index.js",["1195","1196","1197","1198","1199"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoice\\slice\\selector.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\Attachments.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\LineItems.js",["1200","1201"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\slice\\selector.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\EWaybillMetadata.js",["1202"],"import React from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport '../styles.css'\r\nimport {\r\n    Grid\r\n} from '@material-ui/core'\r\nimport InputField from '../../../../../util/ui/form/InputField'\r\nimport ReadOnlyInputField from '../../../../../util/ui/form/ReadOnlyInputField'\r\n\r\nconst EWaybillMetadata = (props) => {\r\n    const { t } = useTranslation()\r\n    return (\r\n        <div className=\"eway_bill_container\">\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceEwayBillDetails.transporter_id\"\r\n                        label={t('transporter_id')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceEwayBillDetails.transportername\"\r\n                        label={t('transporter_name')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceEwayBillDetails.transmode\"\r\n                        label={t('trans_mode')}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceEwayBillDetails.transdistance\"\r\n                        label={t('trans_distance')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceEwayBillDetails.transdocno\"\r\n                        label={t('trans_doc_no')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceEwayBillDetails.vehicleno\"\r\n                        label={t('vehicle_no')}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceEwayBillDetails.vehicle_type\"\r\n                        label={t('vehicle_type')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceEwayBillDetails.transdocdate\"\r\n                        type=\"date\"\r\n                        label={t('trans_doc_date')}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(EWaybillMetadata)\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\PaymentMetadata.js",["1203"],"import React from 'react'\r\nimport {\r\n    Grid\r\n} from '@material-ui/core'\r\nimport { useTranslation } from 'react-i18next'\r\nimport InputField from '../../../../../util/ui/form/InputField'\r\nimport ReadOnlyInputField from '../../../../../util/ui/form/ReadOnlyInputField'\r\n\r\nconst PaymentMetadata = () => {\r\n    const { t } = useTranslation()\r\n    return (\r\n        <div className=\"payments_container\">\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.payee_name\"\r\n                        label={t('payee_name')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.payee_financial_account\"\r\n                        label={t('payee_financial_account')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.modeofpayment\"\r\n                        label={t('mode_of_payment')}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.financial_institution_branch\"\r\n                        label={t('financial_institution_branch')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.credit_transfer\"\r\n                        label={t('credit_transfer')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.direct_debit\"\r\n                        label={t('direct_debit')}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.creditdays\"\r\n                        label={t('credit_days')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.payment_due\"\r\n                        label={t('payment_due')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.paid_amount\"\r\n                        label={t('paid_amount')}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.payment_terms\"\r\n                        multiline\r\n                        rows={3}\r\n                        label={t('payment_terms')}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceSellerPaymentDetails.payment_instruction\"\r\n                        multiline\r\n                        rows={3}\r\n                        label={t('payment_instructions')}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(PaymentMetadata)\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\DispatchShipTo.js",["1204"],"import React from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport '../styles.css'\r\nimport {\r\n    Grid,\r\n    makeStyles\r\n} from '@material-ui/core'\r\nimport InputField from '../../../../../util/ui/form/InputField'\r\nimport ReadOnlyInputField from '../../../../../util/ui/form/ReadOnlyInputField'\r\nconst useStyles = makeStyles((theme) => ({\r\n    legend : {\r\n        color: theme.palette.primary.main,\r\n    }\r\n}));\r\n\r\n\r\nconst DispatchShipTo = () => {\r\n    const { t } = useTranslation()\r\n    const classes = useStyles()\r\n    return (\r\n        <div>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('dispatch_details')}</legend>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.dispatch_company_name\"\r\n                            label={t('company_name')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.dispatch_location\"\r\n                            label={t('location')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.dispatch_pincode\"\r\n                            label={t('pin_code')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.dispatch_address1\"\r\n                            multiline\r\n                            rows={5}\r\n                            label={t('address1')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.dispatch_address2\"\r\n                            multiline\r\n                            rows={5}\r\n                            label={t('address2')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('ship_details')}</legend>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.shippingto_gstin\"\r\n                            label={t('gstin')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.shippingto_legal_name\"\r\n                            label={t('legal_name')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.shippingto_trade_name\"\r\n                            label={t('trading_name')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.shippingto_location\"\r\n                            label={t('location')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.shippingto_pincode\"\r\n                            label={t('pin_code')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.shippintto_state\"\r\n                            label={t('state')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.shippingto_address1\"\r\n                            multiline\r\n                            rows={5}\r\n                            label={t('address1')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDispatchShiptoDetails.shippingto_address2\"\r\n                            multiline\r\n                            rows={5}\r\n                            label={t('address2')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(DispatchShipTo)\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\InvoiceMetadata.js",["1205","1206","1207","1208","1209","1210","1211","1212"],"import React, { } from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport {\r\n    Grid,\r\n    MenuItem,\r\n    InputAdornment,\r\n    IconButton,\r\n    FormControl,\r\n    InputLabel,\r\n    makeStyles\r\n} from '@material-ui/core'\r\nimport '../styles.css'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport InputField from '../../../../../util/ui/form/InputField'\r\nimport ReadOnlyInputField from '../../../../../util/ui/form/ReadOnlyInputField'\r\nimport _Input from '../../../../../util/ui/form/_Input'\r\nimport SearchRecipient from './SearchRecipient'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n    useInvoiceSlice\r\n} from '../slice'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    legend: {\r\n        color: theme.palette.primary.main,\r\n    }\r\n}));\r\n\r\nconst InvoiceMetadata = () => {\r\n    const { t } = useTranslation()\r\n    const dispatch = useDispatch()\r\n    const { actions } = useInvoiceSlice()\r\n    const handleRecipientClick = () => {\r\n        dispatch(actions.openSearchRecipients(true))\r\n    }\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('supplier_buyer_details')}</legend>\r\n                <div style={{ textAlign: 'right' }}>\r\n                    <ReadOnlyInputField\r\n                        name=\"invoiceDetails.recipientCode\"\r\n                        label=\"Recipient Code\"\r\n                    />\r\n                    <SearchRecipient />\r\n                </div>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <div className=\"invoice_header\">\r\n                            <span>1073 W sam Houston ParkWay,</span> <br />\r\n                            <span>Hyd,</span> <br />\r\n                            <span>500082</span>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <div className=\"invoice_header\">\r\n                            <span>1073 W sam Houston ParkWay,</span> <br />\r\n                            <span>Hyd,</span> <br />\r\n                            <span>500082</span>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('invoice_details')}</legend>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.invoicenum\"\r\n                            label={t('invoice_number')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.irn\"\r\n                            label={t('irn')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            select\r\n                            name=\"invoiceDetails.invoice_subtype_code\"\r\n                            label={t('invoice_sub_type')}\r\n                            defaultValue={\"INV\"}\r\n                        >\r\n                            <MenuItem value={\"INV\"}>INV</MenuItem>\r\n                            <MenuItem value={\"CRN\"}>CRN</MenuItem>\r\n                            <MenuItem value={\"DBN\"}>DBN</MenuItem>\r\n                        </ReadOnlyInputField>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.invoicedate\"\r\n                            type=\"date\"\r\n                            label={t('invoice_date')}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.invoice_currency_code\"\r\n                            label={t('currency_code')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.reverse_charge\"\r\n                            label={t('reverse_charge')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('value_details')}</legend>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.ecom_gstin\"\r\n                            label={t('ecom_gstin')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            select\r\n                            name=\"invoiceDetails.igst_on_intra\"\r\n                            label={t('igst_on_intra')}\r\n                            defaultValue={\"false\"}\r\n                        >\r\n                            <MenuItem value={\"false\"}>FALSE</MenuItem>\r\n                            <MenuItem value={\"true\"}>TRUE</MenuItem>\r\n                        </ReadOnlyInputField>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.total_assessable_value\"\r\n                            label={t('total_assessable_value')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.igstvalue\"\r\n                            label={t('igstvalue')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.cgstvalue\"\r\n                            label={t('cgstvalue')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.sgstvalue\"\r\n                            label={t('sgstvalue')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.cessvalue\"\r\n                            label={t('cessvalue')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.statecessvalue\"\r\n                            label={t('statecessvalue')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.discount\"\r\n                            label={t('discount')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.other_charges\"\r\n                            label={t('other_charges')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.roundoff\"\r\n                            label={t('roundoff')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceDetails.total_invoice_value\"\r\n                            label={t('total_invoice_value')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default React.memo(InvoiceMetadata)\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\SupplierBuyerMetadata.js",["1213"],"import React from 'react'\r\nimport {\r\n    Grid,\r\n    makeStyles\r\n} from '@material-ui/core'\r\nimport { useTranslation } from 'react-i18next'\r\nimport '../styles.css'\r\nimport InputField from '../../../../../util/ui/form/InputField'\r\nimport ReadOnlyInputField from '../../../../../util/ui/form/ReadOnlyInputField'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    legend : {\r\n        color: theme.palette.primary.main,\r\n    }\r\n}));\r\n\r\n\r\nconst SupplierBuyerMetadata = () => {\r\n    const { t } = useTranslation()\r\n    const classes = useStyles()\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('supplier_details')}</legend>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_gstin\"\r\n                            label={t('gstin')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_legal_name\"\r\n                            label={t('legal_name')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_trading_name\"\r\n                            label={t('trading_name')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_location\"\r\n                            label={t('location')}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_pincode\"\r\n                            label={t('pin_code')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_email\"\r\n                            label={t('email')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_state\"\r\n                            label={t('state')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_address1\"\r\n                            multiline\r\n                            rows={5}\r\n                            label={t('address1')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.supplier_address2\"\r\n                            multiline\r\n                            rows={5}\r\n                            label={t('address2')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('customer_details')}</legend>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_gstin\"\r\n                            label={t('gstin')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_legal_name\"\r\n                            label={t('legal_name')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_trade_name\"\r\n                            label={t('trading_name')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_location\"\r\n                            label={t('location')}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_pincode\"\r\n                            label={t('pin_code')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_email\"\r\n                            label={t('email')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_state\"\r\n                            label={t('state')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_address1\"\r\n                            multiline\r\n                            rows={5}\r\n                            label={t('address1')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <ReadOnlyInputField\r\n                            name=\"invoiceSupplierBuyerDetails.billing_address2\"\r\n                            multiline\r\n                            rows={5}\r\n                            label={t('address2')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(SupplierBuyerMetadata)\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\Attachments.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\DispatchShipTo.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\LineItems.js",["1214","1215"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\PaymentMetadata.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\InvoiceMetadata.js",["1216"],"import React, { } from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport {\r\n    Grid,\r\n    MenuItem,\r\n    InputAdornment,\r\n    IconButton,\r\n    FormControl,\r\n    InputLabel,\r\n    makeStyles\r\n} from '@material-ui/core'\r\nimport '../styles.css'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport InputField from '../../../../../util/ui/form/InputField'\r\nimport _Input from '../../../../../util/ui/form/_Input'\r\nimport SearchRecipient from './SearchRecipient'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n    useInvoiceSlice\r\n} from '../slice'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    legend : {\r\n        color: theme.palette.primary.main,\r\n    }\r\n}));\r\n\r\nconst InvoiceMetadata = () => {\r\n    const { t } = useTranslation()\r\n    const dispatch = useDispatch()\r\n    const { actions } = useInvoiceSlice()\r\n    const handleRecipientClick = () => {\r\n        dispatch(actions.openSearchRecipients(true))\r\n    }\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('supplier_buyer_details')}</legend>\r\n                <div style={{ textAlign: 'right' }}>\r\n                    <FormControl variant=\"standard\" >\r\n                        <InputLabel>Recipient Code</InputLabel>\r\n                        <_Input\r\n                            name=\"invoiceDetails.recipientCode\"\r\n                            label=\"Recipient Code\"\r\n                            endAdornment={\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton\r\n                                        edge=\"end\"\r\n                                        onClick={handleRecipientClick}\r\n                                    >\r\n                                        <SearchIcon />\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            }\r\n                        />\r\n                    </FormControl>\r\n                    <SearchRecipient  />\r\n                </div>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <div className=\"invoice_header\">\r\n                            <span>1073 W sam Houston ParkWay,</span> <br />\r\n                            <span>Hyd,</span> <br />\r\n                            <span>500082</span>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <div className=\"invoice_header\">\r\n                            <span>1073 W sam Houston ParkWay,</span> <br />\r\n                            <span>Hyd,</span> <br />\r\n                            <span>500082</span>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('invoice_details')}</legend>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            name=\"invoiceDetails.invoicenum\"\r\n                            label={t('invoice_number')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            name=\"invoiceDetails.irn\"\r\n                            label={t('irn')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            select\r\n                            name=\"invoiceDetails.invoice_subtype_code\"\r\n                            label={t('invoice_sub_type')}\r\n                            defaultValue={\"INV\"}\r\n                        >\r\n                            <MenuItem value={\"INV\"}>INV</MenuItem>\r\n                            <MenuItem value={\"CRN\"}>CRN</MenuItem>\r\n                            <MenuItem value={\"DBN\"}>DBN</MenuItem>\r\n                        </InputField>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    \r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            name=\"invoiceDetails.invoicedate\"\r\n                            type=\"date\"\r\n                            label={t('invoice_date')}\r\n                        />\r\n                    </Grid>\r\n                \r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            name=\"invoiceDetails.invoice_currency_code\"\r\n                            label={t('currency_code')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            name=\"invoiceDetails.reverse_charge\"\r\n                            label={t('reverse_charge')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend className={classes.legend}>{t('value_details')}</legend>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            name=\"invoiceDetails.ecom_gstin\"\r\n                            label={t('ecom_gstin')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            select\r\n                            name=\"invoiceDetails.igst_on_intra\"\r\n                            label={t('igst_on_intra')}\r\n                            defaultValue={\"false\"}\r\n                        >\r\n                            <MenuItem value={\"false\"}>FALSE</MenuItem>\r\n                            <MenuItem value={\"true\"}>TRUE</MenuItem>\r\n                        </InputField>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            name=\"invoiceDetails.total_assessable_value\"\r\n                            label={t('total_assessable_value')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            name=\"invoiceDetails.igstvalue\"\r\n                            label={t('igstvalue')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            name=\"invoiceDetails.cgstvalue\"\r\n                            label={t('cgstvalue')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            name=\"invoiceDetails.sgstvalue\"\r\n                            label={t('sgstvalue')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            name=\"invoiceDetails.cessvalue\"\r\n                            label={t('cessvalue')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            name=\"invoiceDetails.statecessvalue\"\r\n                            label={t('statecessvalue')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            name=\"invoiceDetails.discount\"\r\n                            label={t('discount')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            name=\"invoiceDetails.other_charges\"\r\n                            label={t('other_charges')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            name=\"invoiceDetails.roundoff\"\r\n                            label={t('roundoff')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <InputField\r\n                            name=\"invoiceDetails.total_invoice_value\"\r\n                            label={t('total_invoice_value')}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </fieldset>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default React.memo(InvoiceMetadata)\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\EWaybillMetadata.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\SupplierBuyerMetadata.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\slice\\selector.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoice\\slice\\index.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\slice\\index.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\SearchRecipient.js",["1217"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\_LineItemsGrid.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\SearchRecipient.js",["1218"],"import React, { useState , useEffect } from 'react'\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Button\r\n} from '@material-ui/core'\r\nimport {\r\n    selectSearchRecipient,\r\n    selectRecipientList\r\n} from '../slice/selector'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n    useInvoiceSlice\r\n} from '../slice'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { DataGrid } from '@material-ui/data-grid'\r\nimport { useFormikContext } from 'formik'\r\n\r\nconst SearchRecipient = () => {\r\n    const openSearch = useSelector(selectSearchRecipient)\r\n    const recipientList = useSelector(selectRecipientList)\r\n    const { actions } = useInvoiceSlice()\r\n    const [recipientId , setRecipientId] = useState(null)\r\n    const dispatch = useDispatch()\r\n    const { t } = useTranslation()\r\n    const { setFieldValue } =  useFormikContext()\r\n\r\n    const closeSearch = () => {\r\n        dispatch(actions.closeSearchRecipients(false))\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(actions.searchRecipients())\r\n    },[openSearch])\r\n\r\n    const handleChange = (e) => {\r\n        setRecipientId(e.selectionModel[0])\r\n    }\r\n\r\n    const columns = [\r\n        { field: 'id', headerName: 'ID', width: 150, hide: true },\r\n        { field: 'company_name', headerName: t('company_name'), width: 150 },\r\n        { field: 'country', headerName: t('country'), width: 150 },\r\n        { field: 'nature_of_business', headerName: t('nature_of_business'), width: 150 },\r\n        { field: 'pan_no', headerName: t('pan_no'), width: 150 },\r\n        { field: 'partner_id', headerName: t('partner_id'), width: 70, hide: true },\r\n        { field: 'vendor_partner_id', headerName: t('vendor_partner_id'), width: 70, hide: true },\r\n        { field: 'recipient_id', headerName: t('recipient_id'), width: 70, hide: true }\r\n    ]\r\n\r\n    const rows = []\r\n\r\n    const assignRows = () => {\r\n        recipientList.forEach((item) => {\r\n            rows.push(Object.assign({}, item, { id: item.recipient_id }))\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"search_container\">\r\n            {recipientList.length > 0 && assignRows()}\r\n            <Dialog\r\n                open={openSearch}\r\n                onClose={closeSearch}\r\n                fullWidth={true}\r\n            >\r\n                <DialogTitle>{t('serach_recipients')}</DialogTitle>\r\n                <DialogContent>\r\n                    <div style={{ height: 300, width: '100%' }}>\r\n                        <DataGrid columns={columns} rows={rows} pageSize={10}\r\n                            checkboxSelection \r\n                            selection={{ mode: 'single' }}\r\n                            onSelectionModelChange={(e) => handleChange(e)}\r\n                        />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => { setFieldValue('invoiceDetails.recipientCode', recipientId) ; closeSearch()}}\r\n                    >\r\n                        {t('select')}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchRecipient\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\_LineItemsGrid.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\slice\\index.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoice\\slice\\saga.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\slice\\saga.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceview\\_components\\LineItemsEntry.js",["1219","1220","1221","1222","1223"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    Button,\r\n    Grid,\r\n    DialogTitle,\r\n    MenuItem,\r\n    TextField\r\n} from '@material-ui/core'\r\nimport '../styles.css'\r\nimport { useTranslation } from 'react-i18next'\r\nimport InputField from '../../../../../util/ui/form/InputField'\r\n\r\n\r\n\r\nconst LineItemsEntry = (props) => {\r\n    const { openLineItem, setOpenLineItem, index, changeGridIndex, item } = props\r\n    const { t } = useTranslation()\r\n\r\n    const getCurrentDate = () => {\r\n        let d = new Date()\r\n        return d.getFullYear() + '-' + (d.getMonth() + 1 > 9 ? (d.getMonth() + 1) : '0' + (d.getMonth() + 1)) + '-' + (d.getDate() > 9 ? d.getDate() : '0' + d.getDate())\r\n    }\r\n\r\n    const [values, setValues] = useState({\r\n        item_description: '',\r\n        batch_number: '',\r\n        is_service: '',\r\n        hsn_code: '',\r\n        barcode: '',\r\n        quantity: 0.0,\r\n        free_qty: 0.0,\r\n        unit_of_measurement: 0.0,\r\n        item_price: 0.0,\r\n        gross_amount: 0.0,\r\n        item_discount_amount: 0.0,\r\n        pre_tax_value: 0.0,\r\n        item_taxable_value: 0.0,\r\n        gst_rate: 0.0,\r\n        sgst_utgst_amt: 0.0,\r\n        cgst_amt: 0.0,\r\n        igst_amt: 0.0,\r\n        comp_cess_rate_ad_valorem: 0.0,\r\n        comp_cess_amt_ad_valorem: 0.0,\r\n        comp_cess_amt_non_ad_valorem: 0.0,\r\n        state_cess_rate_ad_valorem: 0.0,\r\n        state_cess_amt_ad_valorem: 0.0,\r\n        state_cess_amt_non_ad_valorem: 0.0,\r\n        other_charges_item_level: 0.0,\r\n        item_total_amt: 0.0,\r\n        batch_expiry_date: getCurrentDate(),\r\n        warranty_date: getCurrentDate()\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (item != undefined) {\r\n            setValues(item);\r\n        }\r\n    }, [index])\r\n\r\n\r\n    const _changeGrid = () => {\r\n        changeGridIndex({\r\n            index: index,\r\n            values: {\r\n                item_description: values.item_description,\r\n                batch_number: values.batch_number,\r\n                is_service: values.is_service,\r\n                hsn_code: values.hsn_code,\r\n                barcode: values.barcode,\r\n                quantity: values.quantity,\r\n                free_qty: values.free_qty,\r\n                unit_of_measurement: values.unit_of_measurement,\r\n                item_price: values.item_price,\r\n                gross_amount: values.gross_amount,\r\n                item_discount_amount: values.item_discount_amount,\r\n                pre_tax_value: values.pre_tax_value,\r\n                item_taxable_value: values.item_taxable_value,\r\n                gst_rate: values.gst_rate,\r\n                sgst_utgst_amt: values.gst_utgst_amt,\r\n                cgst_amt: values.cgst_amt,\r\n                igst_amt: values.igst_amt,\r\n                comp_cess_rate_ad_valorem: values.comp_cess_rate_ad_valorem,\r\n                comp_cess_amt_ad_valorem: values.comp_cess_amt_ad_valorem,\r\n                comp_cess_amt_non_ad_valorem: values.comp_cess_amt_non_ad_valorem,\r\n                state_cess_rate_ad_valorem: values.state_cess_rate_ad_valorem,\r\n                state_cess_rate_ad_valorem: values.state_cess_rate_ad_valorem,\r\n                state_cess_amt_non_ad_valorem: values.state_cess_amt_non_ad_valorem,\r\n                other_charges_item_level: values.other_charges_item_level,\r\n                item_total_amt: values.item_total_amt,\r\n                batch_expiry_date: values.batch_expiry_date,\r\n                warranty_date: values.warranty_date,\r\n                id: index + 1\r\n            }\r\n        })\r\n        closeDialog()\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setOpenLineItem(!openLineItem)\r\n    }\r\n\r\n\r\n    const handleChange = name => event => {\r\n        setValues({ ...values, [name]: event.target.value });\r\n    };\r\n\r\n    return (\r\n        <div className=\"line_items_entry_container\">\r\n            <Dialog\r\n                open={openLineItem}\r\n                fullWidth={true}\r\n                maxWidth={\"md\"}\r\n                onClose={closeDialog}\r\n            >\r\n                <DialogTitle>{t('edit_line_items')}</DialogTitle>\r\n                <DialogContent>\r\n                    <fieldset>\r\n                        <legend>{t('item_details')}</legend>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('item_description')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"text\"\r\n                                    margin=\"normal\"\r\n                                    value={values.item_description}\r\n                                    onChange={handleChange('item_description')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('is_service')}\r\n                                    required\r\n                                    fullWidth\r\n                                    select\r\n                                    margin=\"normal\"\r\n                                    value={values.is_service}\r\n                                    onChange={handleChange('is_service')}\r\n                                >\r\n                                    <MenuItem value={\"false\"}>FALSE</MenuItem>\r\n                                    <MenuItem value={\"true\"}>TRUE</MenuItem>\r\n                                </TextField>\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('hsn_code')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"text\"\r\n                                    margin=\"normal\"\r\n                                    value={values.hsn_code}\r\n                                    onChange={handleChange('hsn_code')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('barcode')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"text\"\r\n                                    margin=\"normal\"\r\n                                    value={values.barcode}\r\n                                    onChange={handleChange('barcode')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('quantity')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.quantity}\r\n                                    onChange={handleChange('quantity')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('free_qty')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.free_qty}\r\n                                    onChange={handleChange('free_qty')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </fieldset>\r\n                    <fieldset>\r\n                        <legend>{t('value_details')}</legend>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('unit_of_measurement')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.unit_of_measurement}\r\n                                    onChange={handleChange('unit_of_measurement')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('item_price')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.item_price}\r\n                                    onChange={handleChange('item_price')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('gross_amount')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.gross_amount}\r\n                                    onChange={handleChange('gross_amount')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('item_discount_amount')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.item_discount_amount}\r\n                                    onChange={handleChange('item_discount_amount')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('pre_tax_value')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.pre_tax_value}\r\n                                    onChange={handleChange('pre_tax_value')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('item_taxable_value')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.item_taxable_value}\r\n                                    onChange={handleChange('item_taxable_value')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('gst_rate')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.gst_rate}\r\n                                    onChange={handleChange('gst_rate')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('sgst_utgst_amt')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.sgst_utgst_amt}\r\n                                    onChange={handleChange('sgst_utgst_amt')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('cgst_amt')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.cgst_amt}\r\n                                    onChange={handleChange('cgst_amt')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('igst_amt')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.igst_amt}\r\n                                    onChange={handleChange('igst_amt')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('comp_cess_rate_ad_valorem')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.comp_cess_rate_ad_valorem}\r\n                                    onChange={handleChange('comp_cess_rate_ad_valorem')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('comp_cess_amt_ad_valorem')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.comp_cess_amt_ad_valorem}\r\n                                    onChange={handleChange('comp_cess_amt_ad_valorem')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('comp_cess_amt_non_ad_valorem')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.comp_cess_amt_non_ad_valorem}\r\n                                    onChange={handleChange('comp_cess_amt_non_ad_valorem')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('state_cess_rate_ad_valorem')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.state_cess_rate_ad_valorem}\r\n                                    onChange={handleChange('state_cess_rate_ad_valorem')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('state_cess_amt_ad_valorem')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.state_cess_amt_ad_valorem}\r\n                                    onChange={handleChange('state_cess_amt_ad_valorem')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('state_cess_amt_non_ad_valorem')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.state_cess_amt_non_ad_valorem}\r\n                                    onChange={handleChange('state_cess_amt_non_ad_valorem')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('other_charges_item_level')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.other_charges_item_level}\r\n                                    onChange={handleChange('other_charges_item_level')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('item_total_amt')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.item_total_amt}\r\n                                    onChange={handleChange('item_total_amt')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('batch_number')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"number\"\r\n                                    margin=\"normal\"\r\n                                    value={values.batch_number}\r\n                                    onChange={handleChange('batch_number')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('batch_expiry_date')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"date\"\r\n                                    margin=\"normal\"\r\n                                    value={values.batch_expiry_date}\r\n                                    onChange={handleChange('batch_expiry_date')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label={t('warranty_date')}\r\n                                    required\r\n                                    fullWidth\r\n                                    type=\"date\"\r\n                                    margin=\"normal\"\r\n                                    value={values.warranty_date}\r\n                                    onChange={handleChange('warranty_date')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </fieldset>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => {\r\n                            _changeGrid()\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                    >\r\n                        {t('ok_button')}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(LineItemsEntry)\r\n","D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\LineItemsEntry.js",["1224","1225","1226","1227","1228"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\slice\\saga.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\rd\\sample\\index.js",["1229","1230","1231","1232","1233","1234","1235","1236","1237","1238"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\rd\\sample\\slice\\selectors.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\rd\\sample\\slice\\index.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\rd\\sample\\slice\\saga.js",[],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\vendor\\common\\invoiceupload\\_components\\InvoiceQueries.js",["1239"],"D:\\eInvoicing Folder\\einvoicing8 march\\tecnics-einvoicing\\dev\\v0.1\\react\\src\\inv\\components\\public\\samplesteps\\Steps.js",[],{"ruleId":"1240","replacedBy":"1241"},{"ruleId":"1242","replacedBy":"1243"},{"ruleId":"1244","severity":1,"message":"1245","line":6,"column":8,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":19},{"ruleId":"1244","severity":1,"message":"1248","line":12,"column":8,"nodeType":"1246","messageId":"1247","endLine":12,"endColumn":22},{"ruleId":"1244","severity":1,"message":"1249","line":14,"column":8,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":24},{"ruleId":"1244","severity":1,"message":"1250","line":15,"column":8,"nodeType":"1246","messageId":"1247","endLine":15,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1251","line":16,"column":8,"nodeType":"1246","messageId":"1247","endLine":16,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1252","line":28,"column":8,"nodeType":"1246","messageId":"1247","endLine":28,"endColumn":19},{"ruleId":"1244","severity":1,"message":"1253","line":3,"column":10,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":14},{"ruleId":"1244","severity":1,"message":"1254","line":3,"column":16,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":22},{"ruleId":"1244","severity":1,"message":"1255","line":4,"column":8,"nodeType":"1246","messageId":"1247","endLine":4,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1256","line":11,"column":8,"nodeType":"1246","messageId":"1247","endLine":11,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1257","line":14,"column":28,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":33},{"ruleId":"1244","severity":1,"message":"1258","line":20,"column":8,"nodeType":"1246","messageId":"1247","endLine":20,"endColumn":13},{"ruleId":"1244","severity":1,"message":"1259","line":21,"column":8,"nodeType":"1246","messageId":"1247","endLine":21,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1260","line":22,"column":8,"nodeType":"1246","messageId":"1247","endLine":22,"endColumn":12},{"ruleId":"1244","severity":1,"message":"1261","line":28,"column":8,"nodeType":"1246","messageId":"1247","endLine":28,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1262","line":29,"column":10,"nodeType":"1246","messageId":"1247","endLine":29,"endColumn":15},{"ruleId":"1244","severity":1,"message":"1263","line":29,"column":46,"nodeType":"1246","messageId":"1247","endLine":29,"endColumn":59},{"ruleId":"1244","severity":1,"message":"1264","line":31,"column":10,"nodeType":"1246","messageId":"1247","endLine":31,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1265","line":33,"column":5,"nodeType":"1246","messageId":"1247","endLine":33,"endColumn":14},{"ruleId":"1244","severity":1,"message":"1266","line":34,"column":5,"nodeType":"1246","messageId":"1247","endLine":34,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1267","line":35,"column":5,"nodeType":"1246","messageId":"1247","endLine":35,"endColumn":15},{"ruleId":"1244","severity":1,"message":"1268","line":38,"column":8,"nodeType":"1246","messageId":"1247","endLine":38,"endColumn":22},{"ruleId":"1244","severity":1,"message":"1269","line":62,"column":11,"nodeType":"1246","messageId":"1247","endLine":62,"endColumn":22},{"ruleId":"1244","severity":1,"message":"1270","line":63,"column":12,"nodeType":"1246","messageId":"1247","endLine":63,"endColumn":15},{"ruleId":"1244","severity":1,"message":"1271","line":64,"column":12,"nodeType":"1246","messageId":"1247","endLine":64,"endColumn":23},{"ruleId":"1244","severity":1,"message":"1272","line":64,"column":25,"nodeType":"1246","messageId":"1247","endLine":64,"endColumn":39},{"ruleId":"1244","severity":1,"message":"1273","line":68,"column":21,"nodeType":"1246","messageId":"1247","endLine":68,"endColumn":31},{"ruleId":"1244","severity":1,"message":"1274","line":69,"column":11,"nodeType":"1246","messageId":"1247","endLine":69,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1275","line":70,"column":12,"nodeType":"1246","messageId":"1247","endLine":70,"endColumn":17},{"ruleId":"1244","severity":1,"message":"1276","line":70,"column":19,"nodeType":"1246","messageId":"1247","endLine":70,"endColumn":27},{"ruleId":"1244","severity":1,"message":"1277","line":72,"column":12,"nodeType":"1246","messageId":"1247","endLine":72,"endColumn":24},{"ruleId":"1244","severity":1,"message":"1278","line":74,"column":12,"nodeType":"1246","messageId":"1247","endLine":74,"endColumn":23},{"ruleId":"1244","severity":1,"message":"1279","line":76,"column":9,"nodeType":"1246","messageId":"1247","endLine":76,"endColumn":23},{"ruleId":"1244","severity":1,"message":"1280","line":81,"column":13,"nodeType":"1246","messageId":"1247","endLine":81,"endColumn":14},{"ruleId":"1244","severity":1,"message":"1281","line":89,"column":11,"nodeType":"1246","messageId":"1247","endLine":89,"endColumn":27},{"ruleId":"1244","severity":1,"message":"1282","line":236,"column":15,"nodeType":"1246","messageId":"1247","endLine":236,"endColumn":18},{"ruleId":"1283","severity":1,"message":"1284","line":236,"column":42,"nodeType":"1285","messageId":"1286","endLine":236,"endColumn":44},{"ruleId":"1287","severity":1,"message":"1288","line":237,"column":25,"nodeType":"1289","messageId":"1290","endLine":237,"endColumn":27},{"ruleId":"1244","severity":1,"message":"1291","line":238,"column":17,"nodeType":"1246","messageId":"1247","endLine":238,"endColumn":25},{"ruleId":"1244","severity":1,"message":"1292","line":242,"column":11,"nodeType":"1246","messageId":"1247","endLine":242,"endColumn":28},{"ruleId":"1244","severity":1,"message":"1293","line":248,"column":11,"nodeType":"1246","messageId":"1247","endLine":248,"endColumn":28},{"ruleId":"1244","severity":1,"message":"1294","line":251,"column":11,"nodeType":"1246","messageId":"1247","endLine":251,"endColumn":28},{"ruleId":"1295","severity":1,"message":"1296","line":258,"column":15,"nodeType":"1285","endLine":282,"endColumn":6},{"ruleId":"1295","severity":1,"message":"1297","line":282,"column":8,"nodeType":"1298","endLine":282,"endColumn":17,"suggestions":"1299"},{"ruleId":"1244","severity":1,"message":"1300","line":283,"column":11,"nodeType":"1246","messageId":"1247","endLine":283,"endColumn":15},{"ruleId":"1301","severity":1,"message":"1302","line":504,"column":33,"nodeType":"1303","messageId":"1304","endLine":504,"endColumn":64},{"ruleId":"1244","severity":1,"message":"1305","line":3,"column":10,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":26},{"ruleId":"1244","severity":1,"message":"1306","line":4,"column":10,"nodeType":"1246","messageId":"1247","endLine":4,"endColumn":27},{"ruleId":"1244","severity":1,"message":"1307","line":13,"column":11,"nodeType":"1246","messageId":"1247","endLine":13,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1308","line":14,"column":13,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":17},{"ruleId":"1295","severity":1,"message":"1296","line":20,"column":15,"nodeType":"1285","endLine":35,"endColumn":6},{"ruleId":"1295","severity":1,"message":"1309","line":35,"column":8,"nodeType":"1298","endLine":35,"endColumn":10,"suggestions":"1310"},{"ruleId":"1244","severity":1,"message":"1311","line":15,"column":10,"nodeType":"1246","messageId":"1247","endLine":15,"endColumn":30},{"ruleId":"1295","severity":1,"message":"1312","line":156,"column":6,"nodeType":"1298","endLine":156,"endColumn":8,"suggestions":"1313"},{"ruleId":"1314","severity":1,"message":"1315","line":219,"column":5,"nodeType":"1316","messageId":"1317","endLine":227,"endColumn":6},{"ruleId":"1295","severity":1,"message":"1318","line":98,"column":6,"nodeType":"1298","endLine":98,"endColumn":8,"suggestions":"1319"},{"ruleId":"1244","severity":1,"message":"1320","line":27,"column":9,"nodeType":"1246","messageId":"1247","endLine":27,"endColumn":16},{"ruleId":"1295","severity":1,"message":"1321","line":38,"column":6,"nodeType":"1298","endLine":38,"endColumn":8,"suggestions":"1322"},{"ruleId":"1287","severity":1,"message":"1288","line":78,"column":29,"nodeType":"1289","messageId":"1290","endLine":78,"endColumn":31},{"ruleId":"1244","severity":1,"message":"1323","line":1,"column":17,"nodeType":"1246","messageId":"1247","endLine":1,"endColumn":26},{"ruleId":"1244","severity":1,"message":"1324","line":18,"column":8,"nodeType":"1246","messageId":"1247","endLine":18,"endColumn":13},{"ruleId":"1244","severity":1,"message":"1325","line":22,"column":17,"nodeType":"1246","messageId":"1247","endLine":22,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1326","line":22,"column":23,"nodeType":"1246","messageId":"1247","endLine":22,"endColumn":33},{"ruleId":"1244","severity":1,"message":"1327","line":23,"column":27,"nodeType":"1246","messageId":"1247","endLine":23,"endColumn":43},{"ruleId":"1328","severity":1,"message":"1329","line":47,"column":11,"nodeType":"1330","messageId":"1290","endLine":47,"endColumn":13},{"ruleId":"1244","severity":1,"message":"1331","line":48,"column":11,"nodeType":"1246","messageId":"1247","endLine":48,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1332","line":53,"column":11,"nodeType":"1246","messageId":"1247","endLine":53,"endColumn":26},{"ruleId":"1244","severity":1,"message":"1333","line":64,"column":11,"nodeType":"1246","messageId":"1247","endLine":64,"endColumn":27},{"ruleId":"1244","severity":1,"message":"1334","line":65,"column":11,"nodeType":"1246","messageId":"1247","endLine":65,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1274","line":90,"column":11,"nodeType":"1246","messageId":"1247","endLine":90,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1335","line":91,"column":11,"nodeType":"1246","messageId":"1247","endLine":91,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1336","line":5,"column":10,"nodeType":"1246","messageId":"1247","endLine":5,"endColumn":23},{"ruleId":"1244","severity":1,"message":"1337","line":5,"column":26,"nodeType":"1246","messageId":"1247","endLine":5,"endColumn":37},{"ruleId":"1244","severity":1,"message":"1338","line":5,"column":40,"nodeType":"1246","messageId":"1247","endLine":5,"endColumn":44},{"ruleId":"1244","severity":1,"message":"1339","line":18,"column":45,"nodeType":"1246","messageId":"1247","endLine":18,"endColumn":54},{"ruleId":"1244","severity":1,"message":"1340","line":4,"column":8,"nodeType":"1246","messageId":"1247","endLine":4,"endColumn":19},{"ruleId":"1244","severity":1,"message":"1341","line":5,"column":8,"nodeType":"1246","messageId":"1247","endLine":5,"endColumn":20},{"ruleId":"1244","severity":1,"message":"1342","line":7,"column":23,"nodeType":"1246","messageId":"1247","endLine":7,"endColumn":27},{"ruleId":"1244","severity":1,"message":"1343","line":7,"column":29,"nodeType":"1246","messageId":"1247","endLine":7,"endColumn":32},{"ruleId":"1244","severity":1,"message":"1344","line":4,"column":10,"nodeType":"1246","messageId":"1247","endLine":4,"endColumn":29},{"ruleId":"1295","severity":1,"message":"1345","line":48,"column":6,"nodeType":"1298","endLine":48,"endColumn":8,"suggestions":"1346"},{"ruleId":"1283","severity":1,"message":"1284","line":31,"column":39,"nodeType":"1285","messageId":"1286","endLine":31,"endColumn":41},{"ruleId":"1295","severity":1,"message":"1347","line":42,"column":5,"nodeType":"1298","endLine":42,"endColumn":7,"suggestions":"1348"},{"ruleId":"1244","severity":1,"message":"1270","line":13,"column":10,"nodeType":"1246","messageId":"1247","endLine":13,"endColumn":13},{"ruleId":"1295","severity":1,"message":"1296","line":25,"column":13,"nodeType":"1285","endLine":47,"endColumn":4},{"ruleId":"1244","severity":1,"message":"1349","line":45,"column":11,"nodeType":"1246","messageId":"1247","endLine":45,"endColumn":18},{"ruleId":"1295","severity":1,"message":"1350","line":47,"column":6,"nodeType":"1298","endLine":47,"endColumn":8,"suggestions":"1351"},{"ruleId":"1352","severity":1,"message":"1353","line":56,"column":15,"nodeType":"1246","messageId":"1354","endLine":56,"endColumn":18},{"ruleId":"1240","replacedBy":"1355"},{"ruleId":"1242","replacedBy":"1356"},{"ruleId":"1244","severity":1,"message":"1357","line":15,"column":8,"nodeType":"1246","messageId":"1247","endLine":15,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1358","line":16,"column":8,"nodeType":"1246","messageId":"1247","endLine":16,"endColumn":24},{"ruleId":"1244","severity":1,"message":"1359","line":17,"column":8,"nodeType":"1246","messageId":"1247","endLine":17,"endColumn":29},{"ruleId":"1244","severity":1,"message":"1360","line":18,"column":10,"nodeType":"1246","messageId":"1247","endLine":18,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1361","line":19,"column":8,"nodeType":"1246","messageId":"1247","endLine":19,"endColumn":9},{"ruleId":"1244","severity":1,"message":"1362","line":43,"column":9,"nodeType":"1246","messageId":"1247","endLine":43,"endColumn":17},{"ruleId":"1287","severity":1,"message":"1288","line":64,"column":20,"nodeType":"1289","messageId":"1290","endLine":64,"endColumn":22},{"ruleId":"1363","severity":1,"message":"1364","line":124,"column":23,"nodeType":"1365","endLine":124,"endColumn":41},{"ruleId":"1363","severity":1,"message":"1364","line":137,"column":23,"nodeType":"1365","endLine":137,"endColumn":41},{"ruleId":"1363","severity":1,"message":"1364","line":151,"column":23,"nodeType":"1365","endLine":151,"endColumn":41},{"ruleId":"1363","severity":1,"message":"1364","line":167,"column":23,"nodeType":"1365","endLine":167,"endColumn":41},{"ruleId":"1240","replacedBy":"1366"},{"ruleId":"1242","replacedBy":"1367"},{"ruleId":"1244","severity":1,"message":"1368","line":2,"column":10,"nodeType":"1246","messageId":"1247","endLine":2,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1369","line":3,"column":10,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":24},{"ruleId":"1244","severity":1,"message":"1370","line":4,"column":10,"nodeType":"1246","messageId":"1247","endLine":4,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1371","line":2,"column":35,"nodeType":"1246","messageId":"1247","endLine":2,"endColumn":45},{"ruleId":"1244","severity":1,"message":"1372","line":14,"column":8,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1373","line":38,"column":16,"nodeType":"1246","messageId":"1247","endLine":38,"endColumn":23},{"ruleId":"1295","severity":1,"message":"1296","line":48,"column":13,"nodeType":"1285","endLine":63,"endColumn":4},{"ruleId":"1244","severity":1,"message":"1349","line":60,"column":11,"nodeType":"1246","messageId":"1247","endLine":60,"endColumn":18},{"ruleId":"1295","severity":1,"message":"1374","line":63,"column":6,"nodeType":"1298","endLine":63,"endColumn":8,"suggestions":"1375"},{"ruleId":"1363","severity":1,"message":"1364","line":176,"column":15,"nodeType":"1365","endLine":176,"endColumn":33},{"ruleId":"1352","severity":1,"message":"1353","line":204,"column":15,"nodeType":"1246","messageId":"1354","endLine":204,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1376","line":205,"column":19,"nodeType":"1246","messageId":"1247","endLine":205,"endColumn":22},{"ruleId":"1244","severity":1,"message":"1371","line":2,"column":35,"nodeType":"1246","messageId":"1247","endLine":2,"endColumn":45},{"ruleId":"1244","severity":1,"message":"1377","line":11,"column":8,"nodeType":"1246","messageId":"1247","endLine":11,"endColumn":13},{"ruleId":"1244","severity":1,"message":"1378","line":28,"column":10,"nodeType":"1246","messageId":"1247","endLine":28,"endColumn":14},{"ruleId":"1244","severity":1,"message":"1379","line":28,"column":16,"nodeType":"1246","messageId":"1247","endLine":28,"endColumn":23},{"ruleId":"1295","severity":1,"message":"1296","line":54,"column":13,"nodeType":"1285","endLine":62,"endColumn":4},{"ruleId":"1244","severity":1,"message":"1349","line":60,"column":11,"nodeType":"1246","messageId":"1247","endLine":60,"endColumn":18},{"ruleId":"1295","severity":1,"message":"1380","line":62,"column":6,"nodeType":"1298","endLine":62,"endColumn":8,"suggestions":"1381"},{"ruleId":"1363","severity":1,"message":"1364","line":224,"column":15,"nodeType":"1365","endLine":224,"endColumn":33},{"ruleId":"1363","severity":1,"message":"1364","line":238,"column":15,"nodeType":"1365","endLine":238,"endColumn":33},{"ruleId":"1363","severity":1,"message":"1364","line":255,"column":15,"nodeType":"1365","endLine":255,"endColumn":33},{"ruleId":"1363","severity":1,"message":"1364","line":272,"column":15,"nodeType":"1365","endLine":272,"endColumn":33},{"ruleId":"1287","severity":1,"message":"1288","line":361,"column":15,"nodeType":"1289","messageId":"1290","endLine":361,"endColumn":17},{"ruleId":"1287","severity":1,"message":"1288","line":365,"column":20,"nodeType":"1289","messageId":"1290","endLine":365,"endColumn":22},{"ruleId":"1244","severity":1,"message":"1270","line":13,"column":10,"nodeType":"1246","messageId":"1247","endLine":13,"endColumn":13},{"ruleId":"1295","severity":1,"message":"1296","line":24,"column":13,"nodeType":"1285","endLine":43,"endColumn":4},{"ruleId":"1244","severity":1,"message":"1349","line":41,"column":11,"nodeType":"1246","messageId":"1247","endLine":41,"endColumn":18},{"ruleId":"1295","severity":1,"message":"1350","line":43,"column":6,"nodeType":"1298","endLine":43,"endColumn":8,"suggestions":"1382"},{"ruleId":"1352","severity":1,"message":"1353","line":63,"column":15,"nodeType":"1246","messageId":"1354","endLine":63,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1323","line":2,"column":27,"nodeType":"1246","messageId":"1247","endLine":2,"endColumn":36},{"ruleId":"1244","severity":1,"message":"1383","line":3,"column":21,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":27},{"ruleId":"1244","severity":1,"message":"1384","line":3,"column":29,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":33},{"ruleId":"1244","severity":1,"message":"1371","line":3,"column":35,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":45},{"ruleId":"1244","severity":1,"message":"1324","line":3,"column":47,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":52},{"ruleId":"1244","severity":1,"message":"1267","line":3,"column":54,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":64},{"ruleId":"1244","severity":1,"message":"1385","line":3,"column":66,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":74},{"ruleId":"1244","severity":1,"message":"1386","line":3,"column":76,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":82},{"ruleId":"1244","severity":1,"message":"1266","line":3,"column":84,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":95},{"ruleId":"1244","severity":1,"message":"1368","line":7,"column":10,"nodeType":"1246","messageId":"1247","endLine":7,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1376","line":13,"column":9,"nodeType":"1246","messageId":"1247","endLine":13,"endColumn":12},{"ruleId":"1363","severity":1,"message":"1364","line":76,"column":15,"nodeType":"1365","endLine":76,"endColumn":33},{"ruleId":"1363","severity":1,"message":"1364","line":87,"column":15,"nodeType":"1365","endLine":87,"endColumn":33},{"ruleId":"1363","severity":1,"message":"1364","line":102,"column":15,"nodeType":"1365","endLine":102,"endColumn":33},{"ruleId":"1363","severity":1,"message":"1364","line":116,"column":15,"nodeType":"1365","endLine":116,"endColumn":33},{"ruleId":"1244","severity":1,"message":"1323","line":2,"column":27,"nodeType":"1246","messageId":"1247","endLine":2,"endColumn":36},{"ruleId":"1244","severity":1,"message":"1383","line":3,"column":21,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":27},{"ruleId":"1244","severity":1,"message":"1384","line":3,"column":29,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":33},{"ruleId":"1244","severity":1,"message":"1371","line":3,"column":35,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":45},{"ruleId":"1244","severity":1,"message":"1324","line":3,"column":47,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":52},{"ruleId":"1244","severity":1,"message":"1267","line":3,"column":54,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":64},{"ruleId":"1244","severity":1,"message":"1385","line":3,"column":66,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":74},{"ruleId":"1244","severity":1,"message":"1386","line":3,"column":76,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":82},{"ruleId":"1244","severity":1,"message":"1266","line":3,"column":84,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":95},{"ruleId":"1244","severity":1,"message":"1376","line":13,"column":9,"nodeType":"1246","messageId":"1247","endLine":13,"endColumn":12},{"ruleId":"1363","severity":1,"message":"1364","line":78,"column":15,"nodeType":"1365","endLine":78,"endColumn":33},{"ruleId":"1363","severity":1,"message":"1364","line":89,"column":15,"nodeType":"1365","endLine":89,"endColumn":33},{"ruleId":"1363","severity":1,"message":"1364","line":103,"column":15,"nodeType":"1365","endLine":103,"endColumn":33},{"ruleId":"1363","severity":1,"message":"1364","line":117,"column":15,"nodeType":"1365","endLine":117,"endColumn":33},{"ruleId":"1363","severity":1,"message":"1364","line":131,"column":15,"nodeType":"1365","endLine":131,"endColumn":33},{"ruleId":"1244","severity":1,"message":"1323","line":2,"column":27,"nodeType":"1246","messageId":"1247","endLine":2,"endColumn":36},{"ruleId":"1244","severity":1,"message":"1371","line":3,"column":20,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":30},{"ruleId":"1244","severity":1,"message":"1383","line":3,"column":31,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":37},{"ruleId":"1244","severity":1,"message":"1387","line":13,"column":9,"nodeType":"1246","messageId":"1247","endLine":13,"endColumn":11},{"ruleId":"1363","severity":1,"message":"1364","line":69,"column":15,"nodeType":"1365","endLine":69,"endColumn":33},{"ruleId":"1363","severity":1,"message":"1364","line":81,"column":15,"nodeType":"1365","endLine":81,"endColumn":33},{"ruleId":"1244","severity":1,"message":"1323","line":1,"column":17,"nodeType":"1246","messageId":"1247","endLine":1,"endColumn":26},{"ruleId":"1244","severity":1,"message":"1384","line":3,"column":3,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":7},{"ruleId":"1244","severity":1,"message":"1388","line":35,"column":9,"nodeType":"1246","messageId":"1247","endLine":35,"endColumn":19},{"ruleId":"1244","severity":1,"message":"1389","line":36,"column":9,"nodeType":"1246","messageId":"1247","endLine":36,"endColumn":14},{"ruleId":"1287","severity":1,"message":"1288","line":71,"column":20,"nodeType":"1289","messageId":"1290","endLine":71,"endColumn":22},{"ruleId":"1363","severity":1,"message":"1364","line":106,"column":23,"nodeType":"1365","endLine":106,"endColumn":41},{"ruleId":"1363","severity":1,"message":"1364","line":119,"column":23,"nodeType":"1365","endLine":119,"endColumn":41},{"ruleId":"1363","severity":1,"message":"1364","line":135,"column":23,"nodeType":"1365","endLine":135,"endColumn":41},{"ruleId":"1363","severity":1,"message":"1364","line":152,"column":23,"nodeType":"1365","endLine":152,"endColumn":41},{"ruleId":"1244","severity":1,"message":"1390","line":8,"column":29,"nodeType":"1246","messageId":"1247","endLine":8,"endColumn":42},{"ruleId":"1244","severity":1,"message":"1270","line":13,"column":10,"nodeType":"1246","messageId":"1247","endLine":13,"endColumn":13},{"ruleId":"1244","severity":1,"message":"1391","line":15,"column":11,"nodeType":"1246","messageId":"1247","endLine":15,"endColumn":25},{"ruleId":"1295","severity":1,"message":"1392","line":32,"column":5,"nodeType":"1246","endLine":32,"endColumn":14,"suggestions":"1393"},{"ruleId":"1352","severity":1,"message":"1353","line":59,"column":15,"nodeType":"1246","messageId":"1354","endLine":59,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1280","line":77,"column":11,"nodeType":"1246","messageId":"1247","endLine":77,"endColumn":12},{"ruleId":"1244","severity":1,"message":"1394","line":17,"column":10,"nodeType":"1246","messageId":"1247","endLine":17,"endColumn":20},{"ruleId":"1295","severity":1,"message":"1392","line":53,"column":3,"nodeType":"1246","endLine":53,"endColumn":12,"suggestions":"1395"},{"ruleId":"1244","severity":1,"message":"1396","line":100,"column":8,"nodeType":"1246","messageId":"1247","endLine":100,"endColumn":21},{"ruleId":"1240","replacedBy":"1397"},{"ruleId":"1242","replacedBy":"1398"},{"ruleId":"1244","severity":1,"message":"1399","line":2,"column":30,"nodeType":"1246","messageId":"1247","endLine":2,"endColumn":38},{"ruleId":"1295","severity":1,"message":"1392","line":39,"column":6,"nodeType":"1246","endLine":39,"endColumn":15,"suggestions":"1400"},{"ruleId":"1244","severity":1,"message":"1401","line":2,"column":23,"nodeType":"1246","messageId":"1247","endLine":2,"endColumn":33},{"ruleId":"1244","severity":1,"message":"1402","line":2,"column":55,"nodeType":"1246","messageId":"1247","endLine":2,"endColumn":58},{"ruleId":"1244","severity":1,"message":"1403","line":8,"column":38,"nodeType":"1246","messageId":"1247","endLine":8,"endColumn":59},{"ruleId":"1244","severity":1,"message":"1389","line":23,"column":11,"nodeType":"1246","messageId":"1247","endLine":23,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1378","line":28,"column":12,"nodeType":"1246","messageId":"1247","endLine":28,"endColumn":16},{"ruleId":"1295","severity":1,"message":"1392","line":70,"column":6,"nodeType":"1246","endLine":70,"endColumn":15,"suggestions":"1404"},{"ruleId":"1405","severity":1,"message":"1406","line":83,"column":32,"nodeType":"1407","messageId":"1408","endLine":83,"endColumn":33},{"ruleId":"1363","severity":1,"message":"1364","line":103,"column":15,"nodeType":"1365","endLine":103,"endColumn":33},{"ruleId":"1363","severity":1,"message":"1364","line":116,"column":15,"nodeType":"1365","endLine":116,"endColumn":33},{"ruleId":"1363","severity":1,"message":"1364","line":132,"column":15,"nodeType":"1365","endLine":132,"endColumn":33},{"ruleId":"1363","severity":1,"message":"1364","line":148,"column":15,"nodeType":"1365","endLine":148,"endColumn":33},{"ruleId":"1287","severity":1,"message":"1288","line":278,"column":15,"nodeType":"1289","messageId":"1290","endLine":278,"endColumn":17},{"ruleId":"1287","severity":1,"message":"1288","line":282,"column":20,"nodeType":"1289","messageId":"1290","endLine":282,"endColumn":22},{"ruleId":"1240","replacedBy":"1409"},{"ruleId":"1242","replacedBy":"1410"},{"ruleId":"1244","severity":1,"message":"1411","line":2,"column":46,"nodeType":"1246","messageId":"1247","endLine":2,"endColumn":51},{"ruleId":"1244","severity":1,"message":"1402","line":2,"column":53,"nodeType":"1246","messageId":"1247","endLine":2,"endColumn":56},{"ruleId":"1244","severity":1,"message":"1412","line":7,"column":3,"nodeType":"1246","messageId":"1247","endLine":7,"endColumn":31},{"ruleId":"1244","severity":1,"message":"1413","line":7,"column":50,"nodeType":"1246","messageId":"1247","endLine":7,"endColumn":67},{"ruleId":"1244","severity":1,"message":"1379","line":14,"column":18,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":25},{"ruleId":"1244","severity":1,"message":"1390","line":9,"column":31,"nodeType":"1246","messageId":"1247","endLine":9,"endColumn":44},{"ruleId":"1244","severity":1,"message":"1270","line":14,"column":10,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":13},{"ruleId":"1244","severity":1,"message":"1414","line":16,"column":11,"nodeType":"1246","messageId":"1247","endLine":16,"endColumn":27},{"ruleId":"1295","severity":1,"message":"1392","line":28,"column":5,"nodeType":"1246","endLine":28,"endColumn":14,"suggestions":"1415"},{"ruleId":"1244","severity":1,"message":"1416","line":44,"column":9,"nodeType":"1246","messageId":"1247","endLine":44,"endColumn":19},{"ruleId":"1352","severity":1,"message":"1353","line":94,"column":15,"nodeType":"1246","messageId":"1354","endLine":94,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1280","line":111,"column":11,"nodeType":"1246","messageId":"1247","endLine":111,"endColumn":12},{"ruleId":"1244","severity":1,"message":"1412","line":8,"column":80,"nodeType":"1246","messageId":"1247","endLine":8,"endColumn":108},{"ruleId":"1244","severity":1,"message":"1368","line":13,"column":10,"nodeType":"1246","messageId":"1247","endLine":13,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1389","line":32,"column":9,"nodeType":"1246","messageId":"1247","endLine":32,"endColumn":14},{"ruleId":"1244","severity":1,"message":"1378","line":38,"column":10,"nodeType":"1246","messageId":"1247","endLine":38,"endColumn":14},{"ruleId":"1244","severity":1,"message":"1417","line":39,"column":9,"nodeType":"1246","messageId":"1247","endLine":39,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1274","line":40,"column":9,"nodeType":"1246","messageId":"1247","endLine":40,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1294","line":58,"column":9,"nodeType":"1246","messageId":"1247","endLine":58,"endColumn":26},{"ruleId":"1295","severity":1,"message":"1392","line":88,"column":5,"nodeType":"1246","endLine":88,"endColumn":14,"suggestions":"1418"},{"ruleId":"1405","severity":1,"message":"1406","line":104,"column":34,"nodeType":"1407","messageId":"1408","endLine":104,"endColumn":35},{"ruleId":"1287","severity":1,"message":"1288","line":394,"column":46,"nodeType":"1289","messageId":"1290","endLine":394,"endColumn":48},{"ruleId":"1287","severity":1,"message":"1288","line":398,"column":46,"nodeType":"1289","messageId":"1290","endLine":398,"endColumn":48},{"ruleId":"1244","severity":1,"message":"1419","line":61,"column":8,"nodeType":"1246","messageId":"1247","endLine":61,"endColumn":15},{"ruleId":"1244","severity":1,"message":"1384","line":6,"column":3,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":7},{"ruleId":"1244","severity":1,"message":"1274","line":18,"column":9,"nodeType":"1246","messageId":"1247","endLine":18,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1384","line":6,"column":5,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":9},{"ruleId":"1244","severity":1,"message":"1274","line":18,"column":9,"nodeType":"1246","messageId":"1247","endLine":18,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1384","line":6,"column":3,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":7},{"ruleId":"1244","severity":1,"message":"1265","line":6,"column":9,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1274","line":18,"column":9,"nodeType":"1246","messageId":"1247","endLine":18,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1399","line":1,"column":17,"nodeType":"1246","messageId":"1247","endLine":1,"endColumn":25},{"ruleId":"1244","severity":1,"message":"1371","line":3,"column":28,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":38},{"ruleId":"1244","severity":1,"message":"1267","line":3,"column":40,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":50},{"ruleId":"1244","severity":1,"message":"1386","line":3,"column":52,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":58},{"ruleId":"1244","severity":1,"message":"1266","line":3,"column":60,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":71},{"ruleId":"1244","severity":1,"message":"1385","line":6,"column":14,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":22},{"ruleId":"1244","severity":1,"message":"1372","line":14,"column":8,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1420","line":16,"column":10,"nodeType":"1246","messageId":"1247","endLine":16,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1421","line":17,"column":8,"nodeType":"1246","messageId":"1247","endLine":17,"endColumn":20},{"ruleId":"1244","severity":1,"message":"1388","line":29,"column":9,"nodeType":"1246","messageId":"1247","endLine":29,"endColumn":19},{"ruleId":"1244","severity":1,"message":"1389","line":51,"column":9,"nodeType":"1246","messageId":"1247","endLine":51,"endColumn":14},{"ruleId":"1295","severity":1,"message":"1392","line":54,"column":5,"nodeType":"1246","endLine":54,"endColumn":14,"suggestions":"1422"},{"ruleId":"1244","severity":1,"message":"1390","line":4,"column":29,"nodeType":"1246","messageId":"1247","endLine":4,"endColumn":42},{"ruleId":"1244","severity":1,"message":"1270","line":14,"column":10,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":13},{"ruleId":"1244","severity":1,"message":"1423","line":14,"column":15,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1388","line":15,"column":9,"nodeType":"1246","messageId":"1247","endLine":15,"endColumn":19},{"ruleId":"1244","severity":1,"message":"1424","line":16,"column":10,"nodeType":"1246","messageId":"1247","endLine":16,"endColumn":17},{"ruleId":"1244","severity":1,"message":"1425","line":16,"column":19,"nodeType":"1246","messageId":"1247","endLine":16,"endColumn":29},{"ruleId":"1295","severity":1,"message":"1392","line":31,"column":5,"nodeType":"1246","endLine":31,"endColumn":14,"suggestions":"1426"},{"ruleId":"1283","severity":1,"message":"1284","line":42,"column":56,"nodeType":"1285","messageId":"1286","endLine":42,"endColumn":58},{"ruleId":"1244","severity":1,"message":"1399","line":1,"column":17,"nodeType":"1246","messageId":"1247","endLine":1,"endColumn":25},{"ruleId":"1244","severity":1,"message":"1265","line":3,"column":3,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":12},{"ruleId":"1244","severity":1,"message":"1383","line":3,"column":14,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":20},{"ruleId":"1244","severity":1,"message":"1371","line":3,"column":28,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":38},{"ruleId":"1244","severity":1,"message":"1267","line":3,"column":40,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":50},{"ruleId":"1244","severity":1,"message":"1386","line":3,"column":52,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":58},{"ruleId":"1244","severity":1,"message":"1266","line":3,"column":60,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":71},{"ruleId":"1244","severity":1,"message":"1385","line":6,"column":14,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":22},{"ruleId":"1244","severity":1,"message":"1280","line":20,"column":11,"nodeType":"1246","messageId":"1247","endLine":20,"endColumn":12},{"ruleId":"1295","severity":1,"message":"1392","line":31,"column":5,"nodeType":"1246","endLine":31,"endColumn":14,"suggestions":"1427"},{"ruleId":"1244","severity":1,"message":"1428","line":2,"column":20,"nodeType":"1246","messageId":"1247","endLine":2,"endColumn":29},{"ruleId":"1244","severity":1,"message":"1394","line":6,"column":10,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":20},{"ruleId":"1244","severity":1,"message":"1280","line":27,"column":11,"nodeType":"1246","messageId":"1247","endLine":27,"endColumn":12},{"ruleId":"1244","severity":1,"message":"1388","line":30,"column":9,"nodeType":"1246","messageId":"1247","endLine":30,"endColumn":19},{"ruleId":"1244","severity":1,"message":"1429","line":31,"column":10,"nodeType":"1246","messageId":"1247","endLine":31,"endColumn":20},{"ruleId":"1244","severity":1,"message":"1430","line":31,"column":22,"nodeType":"1246","messageId":"1247","endLine":31,"endColumn":35},{"ruleId":"1295","severity":1,"message":"1392","line":119,"column":5,"nodeType":"1246","endLine":119,"endColumn":14,"suggestions":"1431"},{"ruleId":"1244","severity":1,"message":"1432","line":127,"column":9,"nodeType":"1246","messageId":"1247","endLine":127,"endColumn":19},{"ruleId":"1314","severity":1,"message":"1315","line":164,"column":5,"nodeType":"1316","messageId":"1317","endLine":210,"endColumn":6},{"ruleId":"1244","severity":1,"message":"1388","line":40,"column":11,"nodeType":"1246","messageId":"1247","endLine":40,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1389","line":41,"column":11,"nodeType":"1246","messageId":"1247","endLine":41,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1433","line":42,"column":11,"nodeType":"1246","messageId":"1247","endLine":42,"endColumn":22},{"ruleId":"1244","severity":1,"message":"1270","line":14,"column":10,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":13},{"ruleId":"1295","severity":1,"message":"1296","line":24,"column":13,"nodeType":"1285","endLine":44,"endColumn":4},{"ruleId":"1244","severity":1,"message":"1349","line":41,"column":11,"nodeType":"1246","messageId":"1247","endLine":41,"endColumn":18},{"ruleId":"1295","severity":1,"message":"1350","line":44,"column":6,"nodeType":"1298","endLine":44,"endColumn":8,"suggestions":"1434"},{"ruleId":"1352","severity":1,"message":"1353","line":66,"column":15,"nodeType":"1246","messageId":"1354","endLine":66,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1435","line":6,"column":5,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":19},{"ruleId":"1244","severity":1,"message":"1436","line":11,"column":5,"nodeType":"1246","messageId":"1247","endLine":11,"endColumn":11},{"ruleId":"1244","severity":1,"message":"1437","line":12,"column":5,"nodeType":"1246","messageId":"1247","endLine":12,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1438","line":13,"column":5,"nodeType":"1246","messageId":"1247","endLine":13,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1439","line":14,"column":5,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1440","line":16,"column":18,"nodeType":"1246","messageId":"1247","endLine":16,"endColumn":34},{"ruleId":"1244","severity":1,"message":"1420","line":19,"column":10,"nodeType":"1246","messageId":"1247","endLine":19,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1403","line":23,"column":5,"nodeType":"1246","messageId":"1247","endLine":23,"endColumn":26},{"ruleId":"1244","severity":1,"message":"1264","line":31,"column":10,"nodeType":"1246","messageId":"1247","endLine":31,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1441","line":36,"column":8,"nodeType":"1246","messageId":"1247","endLine":36,"endColumn":14},{"ruleId":"1244","severity":1,"message":"1376","line":42,"column":11,"nodeType":"1246","messageId":"1247","endLine":42,"endColumn":14},{"ruleId":"1244","severity":1,"message":"1442","line":46,"column":11,"nodeType":"1246","messageId":"1247","endLine":46,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1443","line":47,"column":11,"nodeType":"1246","messageId":"1247","endLine":47,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1389","line":48,"column":11,"nodeType":"1246","messageId":"1247","endLine":48,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1444","line":51,"column":9,"nodeType":"1246","messageId":"1247","endLine":51,"endColumn":19},{"ruleId":"1244","severity":1,"message":"1387","line":52,"column":9,"nodeType":"1246","messageId":"1247","endLine":52,"endColumn":11},{"ruleId":"1244","severity":1,"message":"1445","line":53,"column":11,"nodeType":"1246","messageId":"1247","endLine":53,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1446","line":55,"column":19,"nodeType":"1246","messageId":"1247","endLine":55,"endColumn":27},{"ruleId":"1244","severity":1,"message":"1447","line":56,"column":12,"nodeType":"1246","messageId":"1247","endLine":56,"endColumn":17},{"ruleId":"1244","severity":1,"message":"1448","line":56,"column":19,"nodeType":"1246","messageId":"1247","endLine":56,"endColumn":27},{"ruleId":"1244","severity":1,"message":"1449","line":57,"column":12,"nodeType":"1246","messageId":"1247","endLine":57,"endColumn":20},{"ruleId":"1244","severity":1,"message":"1450","line":57,"column":22,"nodeType":"1246","messageId":"1247","endLine":57,"endColumn":33},{"ruleId":"1244","severity":1,"message":"1433","line":59,"column":11,"nodeType":"1246","messageId":"1247","endLine":59,"endColumn":22},{"ruleId":"1295","severity":1,"message":"1392","line":63,"column":9,"nodeType":"1246","endLine":63,"endColumn":18,"suggestions":"1451"},{"ruleId":"1244","severity":1,"message":"1452","line":72,"column":11,"nodeType":"1246","messageId":"1247","endLine":72,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1453","line":95,"column":11,"nodeType":"1246","messageId":"1247","endLine":95,"endColumn":27},{"ruleId":"1244","severity":1,"message":"1454","line":101,"column":11,"nodeType":"1246","messageId":"1247","endLine":101,"endColumn":22},{"ruleId":"1244","severity":1,"message":"1455","line":105,"column":11,"nodeType":"1246","messageId":"1247","endLine":105,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1456","line":113,"column":11,"nodeType":"1246","messageId":"1247","endLine":113,"endColumn":20},{"ruleId":"1244","severity":1,"message":"1457","line":129,"column":13,"nodeType":"1246","messageId":"1247","endLine":129,"endColumn":17},{"ruleId":"1244","severity":1,"message":"1458","line":134,"column":11,"nodeType":"1246","messageId":"1247","endLine":134,"endColumn":31},{"ruleId":"1363","severity":1,"message":"1364","line":277,"column":37,"nodeType":"1365","endLine":277,"endColumn":55},{"ruleId":"1244","severity":1,"message":"1361","line":13,"column":8,"nodeType":"1246","messageId":"1247","endLine":13,"endColumn":9},{"ruleId":"1295","severity":1,"message":"1392","line":32,"column":5,"nodeType":"1246","endLine":32,"endColumn":14,"suggestions":"1459"},{"ruleId":"1352","severity":1,"message":"1353","line":71,"column":15,"nodeType":"1246","messageId":"1354","endLine":71,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1280","line":99,"column":11,"nodeType":"1246","messageId":"1247","endLine":99,"endColumn":12},{"ruleId":"1244","severity":1,"message":"1460","line":2,"column":10,"nodeType":"1246","messageId":"1247","endLine":2,"endColumn":20},{"ruleId":"1244","severity":1,"message":"1411","line":1,"column":46,"nodeType":"1246","messageId":"1247","endLine":1,"endColumn":51},{"ruleId":"1244","severity":1,"message":"1402","line":1,"column":53,"nodeType":"1246","messageId":"1247","endLine":1,"endColumn":56},{"ruleId":"1244","severity":1,"message":"1461","line":2,"column":19,"nodeType":"1246","messageId":"1247","endLine":2,"endColumn":31},{"ruleId":"1244","severity":1,"message":"1462","line":3,"column":49,"nodeType":"1246","messageId":"1247","endLine":3,"endColumn":65},{"ruleId":"1244","severity":1,"message":"1463","line":12,"column":3,"nodeType":"1246","messageId":"1247","endLine":12,"endColumn":19},{"ruleId":"1244","severity":1,"message":"1390","line":8,"column":34,"nodeType":"1246","messageId":"1247","endLine":8,"endColumn":47},{"ruleId":"1244","severity":1,"message":"1270","line":17,"column":12,"nodeType":"1246","messageId":"1247","endLine":17,"endColumn":15},{"ruleId":"1244","severity":1,"message":"1423","line":17,"column":17,"nodeType":"1246","messageId":"1247","endLine":17,"endColumn":23},{"ruleId":"1244","severity":1,"message":"1388","line":18,"column":11,"nodeType":"1246","messageId":"1247","endLine":18,"endColumn":21},{"ruleId":"1295","severity":1,"message":"1392","line":32,"column":9,"nodeType":"1246","endLine":32,"endColumn":18,"suggestions":"1464"},{"ruleId":"1244","severity":1,"message":"1387","line":49,"column":9,"nodeType":"1246","messageId":"1247","endLine":49,"endColumn":11},{"ruleId":"1244","severity":1,"message":"1280","line":87,"column":13,"nodeType":"1246","messageId":"1247","endLine":87,"endColumn":14},{"ruleId":"1244","severity":1,"message":"1264","line":21,"column":10,"nodeType":"1246","messageId":"1247","endLine":21,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1465","line":40,"column":11,"nodeType":"1246","messageId":"1247","endLine":40,"endColumn":20},{"ruleId":"1244","severity":1,"message":"1389","line":43,"column":11,"nodeType":"1246","messageId":"1247","endLine":43,"endColumn":16},{"ruleId":"1295","severity":1,"message":"1392","line":71,"column":9,"nodeType":"1246","endLine":71,"endColumn":18,"suggestions":"1466"},{"ruleId":"1295","severity":1,"message":"1467","line":38,"column":7,"nodeType":"1298","endLine":38,"endColumn":9,"suggestions":"1468"},{"ruleId":"1283","severity":1,"message":"1284","line":95,"column":38,"nodeType":"1285","messageId":"1286","endLine":95,"endColumn":40},{"ruleId":"1244","severity":1,"message":"1383","line":7,"column":2,"nodeType":"1246","messageId":"1247","endLine":7,"endColumn":8},{"ruleId":"1244","severity":1,"message":"1469","line":31,"column":8,"nodeType":"1246","messageId":"1247","endLine":31,"endColumn":19},{"ruleId":"1244","severity":1,"message":"1264","line":33,"column":10,"nodeType":"1246","messageId":"1247","endLine":33,"endColumn":18},{"ruleId":"1470","severity":1,"message":"1471","line":135,"column":4,"nodeType":"1472","messageId":"1290","endLine":135,"endColumn":13},{"ruleId":"1295","severity":1,"message":"1392","line":147,"column":3,"nodeType":"1246","endLine":147,"endColumn":12,"suggestions":"1473"},{"ruleId":"1287","severity":1,"message":"1474","line":151,"column":13,"nodeType":"1289","messageId":"1290","endLine":151,"endColumn":15},{"ruleId":"1244","severity":1,"message":"1475","line":163,"column":8,"nodeType":"1246","messageId":"1247","endLine":163,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1372","line":8,"column":8,"nodeType":"1246","messageId":"1247","endLine":8,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1435","line":6,"column":5,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":19},{"ruleId":"1244","severity":1,"message":"1476","line":7,"column":5,"nodeType":"1246","messageId":"1247","endLine":7,"endColumn":15},{"ruleId":"1244","severity":1,"message":"1266","line":8,"column":5,"nodeType":"1246","messageId":"1247","endLine":8,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1267","line":9,"column":5,"nodeType":"1246","messageId":"1247","endLine":9,"endColumn":15},{"ruleId":"1244","severity":1,"message":"1477","line":13,"column":8,"nodeType":"1246","messageId":"1247","endLine":13,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1372","line":14,"column":8,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1441","line":16,"column":8,"nodeType":"1246","messageId":"1247","endLine":16,"endColumn":14},{"ruleId":"1244","severity":1,"message":"1458","line":34,"column":11,"nodeType":"1246","messageId":"1247","endLine":34,"endColumn":31},{"ruleId":"1244","severity":1,"message":"1372","line":6,"column":8,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1372","line":8,"column":8,"nodeType":"1246","messageId":"1247","endLine":8,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1372","line":7,"column":8,"nodeType":"1246","messageId":"1247","endLine":7,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1478","line":6,"column":10,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":17},{"ruleId":"1244","severity":1,"message":"1280","line":9,"column":13,"nodeType":"1246","messageId":"1247","endLine":9,"endColumn":14},{"ruleId":"1295","severity":1,"message":"1321","line":36,"column":7,"nodeType":"1298","endLine":36,"endColumn":19,"suggestions":"1479"},{"ruleId":"1244","severity":1,"message":"1480","line":1,"column":28,"nodeType":"1246","messageId":"1247","endLine":1,"endColumn":34},{"ruleId":"1244","severity":1,"message":"1372","line":14,"column":8,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":18},{"ruleId":"1287","severity":1,"message":"1474","line":58,"column":18,"nodeType":"1289","messageId":"1290","endLine":58,"endColumn":20},{"ruleId":"1295","severity":1,"message":"1481","line":61,"column":8,"nodeType":"1298","endLine":61,"endColumn":15,"suggestions":"1482"},{"ruleId":"1470","severity":1,"message":"1483","line":89,"column":17,"nodeType":"1472","messageId":"1290","endLine":89,"endColumn":43},{"ruleId":"1244","severity":1,"message":"1484","line":12,"column":5,"nodeType":"1246","messageId":"1247","endLine":12,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1361","line":18,"column":8,"nodeType":"1246","messageId":"1247","endLine":18,"endColumn":9},{"ruleId":"1244","severity":1,"message":"1485","line":21,"column":5,"nodeType":"1246","messageId":"1247","endLine":21,"endColumn":20},{"ruleId":"1244","severity":1,"message":"1486","line":26,"column":8,"nodeType":"1246","messageId":"1247","endLine":26,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1487","line":27,"column":8,"nodeType":"1246","messageId":"1247","endLine":27,"endColumn":10},{"ruleId":"1244","severity":1,"message":"1444","line":33,"column":9,"nodeType":"1246","messageId":"1247","endLine":33,"endColumn":19},{"ruleId":"1244","severity":1,"message":"1447","line":35,"column":12,"nodeType":"1246","messageId":"1247","endLine":35,"endColumn":17},{"ruleId":"1244","severity":1,"message":"1448","line":35,"column":19,"nodeType":"1246","messageId":"1247","endLine":35,"endColumn":27},{"ruleId":"1244","severity":1,"message":"1488","line":36,"column":9,"nodeType":"1246","messageId":"1247","endLine":36,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1449","line":40,"column":12,"nodeType":"1246","messageId":"1247","endLine":40,"endColumn":20},{"ruleId":"1244","severity":1,"message":"1450","line":40,"column":22,"nodeType":"1246","messageId":"1247","endLine":40,"endColumn":33},{"ruleId":"1244","severity":1,"message":"1489","line":41,"column":11,"nodeType":"1246","messageId":"1247","endLine":41,"endColumn":27},{"ruleId":"1295","severity":1,"message":"1321","line":53,"column":8,"nodeType":"1298","endLine":53,"endColumn":20,"suggestions":"1490"},{"ruleId":"1244","severity":1,"message":"1491","line":68,"column":11,"nodeType":"1246","messageId":"1247","endLine":68,"endColumn":23},{"ruleId":"1492","severity":1,"message":"1493","line":6,"column":13,"nodeType":"1494","endLine":6,"endColumn":68},{"ruleId":"1244","severity":1,"message":"1495","line":2,"column":8,"nodeType":"1246","messageId":"1247","endLine":2,"endColumn":20},{"ruleId":"1244","severity":1,"message":"1496","line":4,"column":10,"nodeType":"1246","messageId":"1247","endLine":4,"endColumn":20},{"ruleId":"1244","severity":1,"message":"1497","line":14,"column":9,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":15},{"ruleId":"1244","severity":1,"message":"1498","line":14,"column":17,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":25},{"ruleId":"1244","severity":1,"message":"1294","line":29,"column":8,"nodeType":"1246","messageId":"1247","endLine":29,"endColumn":25},{"ruleId":"1244","severity":1,"message":"1499","line":13,"column":25,"nodeType":"1246","messageId":"1247","endLine":13,"endColumn":33},{"ruleId":"1244","severity":1,"message":"1360","line":13,"column":35,"nodeType":"1246","messageId":"1247","endLine":13,"endColumn":46},{"ruleId":"1244","severity":1,"message":"1500","line":14,"column":10,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":17},{"ruleId":"1244","severity":1,"message":"1501","line":14,"column":19,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":38},{"ruleId":"1244","severity":1,"message":"1502","line":15,"column":10,"nodeType":"1246","messageId":"1247","endLine":15,"endColumn":22},{"ruleId":"1244","severity":1,"message":"1503","line":15,"column":24,"nodeType":"1246","messageId":"1247","endLine":15,"endColumn":36},{"ruleId":"1244","severity":1,"message":"1504","line":18,"column":29,"nodeType":"1246","messageId":"1247","endLine":18,"endColumn":37},{"ruleId":"1244","severity":1,"message":"1505","line":18,"column":49,"nodeType":"1246","messageId":"1247","endLine":18,"endColumn":54},{"ruleId":"1244","severity":1,"message":"1506","line":18,"column":67,"nodeType":"1246","messageId":"1247","endLine":18,"endColumn":77},{"ruleId":"1244","severity":1,"message":"1507","line":18,"column":79,"nodeType":"1246","messageId":"1247","endLine":18,"endColumn":90},{"ruleId":"1295","severity":1,"message":"1508","line":48,"column":8,"nodeType":"1298","endLine":48,"endColumn":10,"suggestions":"1509"},{"ruleId":"1283","severity":1,"message":"1284","line":69,"column":26,"nodeType":"1285","messageId":"1286","endLine":69,"endColumn":28},{"ruleId":"1283","severity":1,"message":"1284","line":122,"column":42,"nodeType":"1285","messageId":"1286","endLine":122,"endColumn":44},{"ruleId":"1244","severity":1,"message":"1266","line":6,"column":10,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1435","line":6,"column":41,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":55},{"ruleId":"1244","severity":1,"message":"1267","line":6,"column":57,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":67},{"ruleId":"1244","severity":1,"message":"1441","line":9,"column":8,"nodeType":"1246","messageId":"1247","endLine":9,"endColumn":14},{"ruleId":"1244","severity":1,"message":"1510","line":18,"column":12,"nodeType":"1246","messageId":"1247","endLine":18,"endColumn":18},{"ruleId":"1363","severity":1,"message":"1364","line":92,"column":213,"nodeType":"1365","endLine":92,"endColumn":234},{"ruleId":"1363","severity":1,"message":"1364","line":108,"column":215,"nodeType":"1365","endLine":108,"endColumn":236},{"ruleId":"1244","severity":1,"message":"1511","line":6,"column":33,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":46},{"ruleId":"1244","severity":1,"message":"1512","line":6,"column":50,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":67},{"ruleId":"1244","severity":1,"message":"1513","line":6,"column":70,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":100},{"ruleId":"1295","severity":1,"message":"1321","line":36,"column":7,"nodeType":"1298","endLine":36,"endColumn":19,"suggestions":"1514"},{"ruleId":"1244","severity":1,"message":"1264","line":33,"column":10,"nodeType":"1246","messageId":"1247","endLine":33,"endColumn":18},{"ruleId":"1470","severity":1,"message":"1471","line":136,"column":4,"nodeType":"1472","messageId":"1290","endLine":136,"endColumn":13},{"ruleId":"1295","severity":1,"message":"1392","line":157,"column":3,"nodeType":"1246","endLine":157,"endColumn":12,"suggestions":"1515"},{"ruleId":"1287","severity":1,"message":"1474","line":161,"column":13,"nodeType":"1289","messageId":"1290","endLine":161,"endColumn":15},{"ruleId":"1244","severity":1,"message":"1383","line":7,"column":2,"nodeType":"1246","messageId":"1247","endLine":7,"endColumn":8},{"ruleId":"1244","severity":1,"message":"1469","line":31,"column":8,"nodeType":"1246","messageId":"1247","endLine":31,"endColumn":19},{"ruleId":"1244","severity":1,"message":"1264","line":33,"column":10,"nodeType":"1246","messageId":"1247","endLine":33,"endColumn":18},{"ruleId":"1470","severity":1,"message":"1471","line":135,"column":4,"nodeType":"1472","messageId":"1290","endLine":135,"endColumn":13},{"ruleId":"1295","severity":1,"message":"1392","line":147,"column":3,"nodeType":"1246","endLine":147,"endColumn":12,"suggestions":"1516"},{"ruleId":"1287","severity":1,"message":"1474","line":151,"column":13,"nodeType":"1289","messageId":"1290","endLine":151,"endColumn":15},{"ruleId":"1244","severity":1,"message":"1475","line":163,"column":8,"nodeType":"1246","messageId":"1247","endLine":163,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1394","line":17,"column":10,"nodeType":"1246","messageId":"1247","endLine":17,"endColumn":20},{"ruleId":"1244","severity":1,"message":"1388","line":43,"column":8,"nodeType":"1246","messageId":"1247","endLine":43,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1517","line":52,"column":8,"nodeType":"1246","messageId":"1247","endLine":52,"endColumn":24},{"ruleId":"1295","severity":1,"message":"1392","line":65,"column":3,"nodeType":"1246","endLine":65,"endColumn":12,"suggestions":"1518"},{"ruleId":"1244","severity":1,"message":"1396","line":148,"column":8,"nodeType":"1246","messageId":"1247","endLine":148,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1478","line":6,"column":10,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":17},{"ruleId":"1244","severity":1,"message":"1280","line":9,"column":13,"nodeType":"1246","messageId":"1247","endLine":9,"endColumn":14},{"ruleId":"1244","severity":1,"message":"1372","line":7,"column":8,"nodeType":"1246","messageId":"1247","endLine":7,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1372","line":6,"column":8,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1372","line":8,"column":8,"nodeType":"1246","messageId":"1247","endLine":8,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1435","line":6,"column":5,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":19},{"ruleId":"1244","severity":1,"message":"1476","line":7,"column":5,"nodeType":"1246","messageId":"1247","endLine":7,"endColumn":15},{"ruleId":"1244","severity":1,"message":"1266","line":8,"column":5,"nodeType":"1246","messageId":"1247","endLine":8,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1267","line":9,"column":5,"nodeType":"1246","messageId":"1247","endLine":9,"endColumn":15},{"ruleId":"1244","severity":1,"message":"1477","line":13,"column":8,"nodeType":"1246","messageId":"1247","endLine":13,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1372","line":14,"column":8,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1441","line":16,"column":8,"nodeType":"1246","messageId":"1247","endLine":16,"endColumn":14},{"ruleId":"1244","severity":1,"message":"1458","line":34,"column":11,"nodeType":"1246","messageId":"1247","endLine":34,"endColumn":31},{"ruleId":"1244","severity":1,"message":"1372","line":8,"column":8,"nodeType":"1246","messageId":"1247","endLine":8,"endColumn":18},{"ruleId":"1244","severity":1,"message":"1478","line":6,"column":10,"nodeType":"1246","messageId":"1247","endLine":6,"endColumn":17},{"ruleId":"1244","severity":1,"message":"1280","line":9,"column":13,"nodeType":"1246","messageId":"1247","endLine":9,"endColumn":14},{"ruleId":"1519","severity":1,"message":"1520","line":45,"column":25,"nodeType":"1494","endLine":58,"endColumn":27},{"ruleId":"1295","severity":1,"message":"1321","line":36,"column":7,"nodeType":"1298","endLine":36,"endColumn":19,"suggestions":"1521"},{"ruleId":"1295","severity":1,"message":"1321","line":36,"column":7,"nodeType":"1298","endLine":36,"endColumn":19,"suggestions":"1522"},{"ruleId":"1244","severity":1,"message":"1480","line":1,"column":28,"nodeType":"1246","messageId":"1247","endLine":1,"endColumn":34},{"ruleId":"1244","severity":1,"message":"1372","line":14,"column":8,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":18},{"ruleId":"1287","severity":1,"message":"1474","line":58,"column":18,"nodeType":"1289","messageId":"1290","endLine":58,"endColumn":20},{"ruleId":"1295","severity":1,"message":"1481","line":61,"column":8,"nodeType":"1298","endLine":61,"endColumn":15,"suggestions":"1523"},{"ruleId":"1470","severity":1,"message":"1483","line":89,"column":17,"nodeType":"1472","messageId":"1290","endLine":89,"endColumn":43},{"ruleId":"1244","severity":1,"message":"1480","line":1,"column":28,"nodeType":"1246","messageId":"1247","endLine":1,"endColumn":34},{"ruleId":"1244","severity":1,"message":"1372","line":14,"column":8,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":18},{"ruleId":"1287","severity":1,"message":"1474","line":58,"column":18,"nodeType":"1289","messageId":"1290","endLine":58,"endColumn":20},{"ruleId":"1295","severity":1,"message":"1481","line":61,"column":8,"nodeType":"1298","endLine":61,"endColumn":15,"suggestions":"1524"},{"ruleId":"1470","severity":1,"message":"1483","line":89,"column":17,"nodeType":"1472","messageId":"1290","endLine":89,"endColumn":43},{"ruleId":"1244","severity":1,"message":"1323","line":2,"column":17,"nodeType":"1246","messageId":"1247","endLine":2,"endColumn":26},{"ruleId":"1244","severity":1,"message":"1384","line":4,"column":3,"nodeType":"1246","messageId":"1247","endLine":4,"endColumn":7},{"ruleId":"1244","severity":1,"message":"1264","line":14,"column":24,"nodeType":"1246","messageId":"1247","endLine":14,"endColumn":32},{"ruleId":"1244","severity":1,"message":"1388","line":33,"column":11,"nodeType":"1246","messageId":"1247","endLine":33,"endColumn":21},{"ruleId":"1244","severity":1,"message":"1389","line":34,"column":11,"nodeType":"1246","messageId":"1247","endLine":34,"endColumn":16},{"ruleId":"1244","severity":1,"message":"1433","line":35,"column":11,"nodeType":"1246","messageId":"1247","endLine":35,"endColumn":22},{"ruleId":"1363","severity":1,"message":"1364","line":75,"column":23,"nodeType":"1365","endLine":75,"endColumn":41},{"ruleId":"1363","severity":1,"message":"1364","line":88,"column":23,"nodeType":"1365","endLine":88,"endColumn":41},{"ruleId":"1363","severity":1,"message":"1364","line":104,"column":23,"nodeType":"1365","endLine":104,"endColumn":41},{"ruleId":"1363","severity":1,"message":"1364","line":121,"column":23,"nodeType":"1365","endLine":121,"endColumn":41},{"ruleId":"1244","severity":1,"message":"1274","line":19,"column":11,"nodeType":"1246","messageId":"1247","endLine":19,"endColumn":18},"no-native-reassign",["1525"],"no-negated-in-lhs",["1526"],"no-unused-vars","'EnquiryView' is defined but never used.","Identifier","unusedVar","'InvoiceQueries' is defined but never used.","'NewRecipientForm' is defined but never used.","'RecipientGrid' is defined but never used.","'Recipients' is defined but never used.","'Multiselect' is defined but never used.","'Form' is defined but never used.","'Formik' is defined but never used.","'MenuList' is defined but never used.","'CheckBox' is defined but never used.","'Input' is defined but never used.","'Modal' is defined but never used.","'Backdrop' is defined but never used.","'Fade' is defined but never used.","'StatusChip' is defined but never used.","'Close' is defined but never used.","'NotInterested' is defined but never used.","'Navigate' is defined but never used.","'TextField' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'FormHelperText' is defined but never used.","'rowclickval' is assigned a value but never used.","'tid' is assigned a value but never used.","'priorityval' is assigned a value but never used.","'setPriorityval' is assigned a value but never used.","'setConform' is assigned a value but never used.","'classes' is assigned a value but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'responseData' is assigned a value but never used.","'selectedRow' is assigned a value but never used.","'stateVariables' is assigned a value but never used.","'t' is assigned a value but never used.","'handleChangestar' is assigned a value but never used.","'arr' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'temptemp' is assigned a value but never used.","'handleUpdateClose' is assigned a value but never used.","'handleCreateClose' is assigned a value but never used.","'_validationSchema' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["1527"],"'todo' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'invokeAPIRequest' is defined but never used.","'ROLE_ACCESS_CHECK' is defined but never used.","'roles' is assigned a value but never used.","'path' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["1528"],"'formValidationSchema' is defined but never used.","React Hook useEffect has a missing dependency: 'resgistrartionId'. Either include it or remove the dependency array.",["1529"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'registrartionId'. Either include it or remove the dependency array.",["1530"],"'isError' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actions' and 'dispatch'. Either include them or remove the dependency array.",["1531"],"'useEffect' is defined but never used.","'Paper' is defined but never used.","'Star' is defined but never used.","'StarBorder' is defined but never used.","'MuiThemeProvider' is defined but never used.","no-empty-pattern","Unexpected empty array pattern.","ArrayPattern","'starred' is assigned a value but never used.","'StarredCheckbox' is assigned a value but never used.","'formcontrolstyle' is assigned a value but never used.","'stylepaper' is assigned a value but never used.","'myTheme' is assigned a value but never used.","'LOGOUT_ACTION' is defined but never used.","'TOGGLE_MENU' is defined but never used.","'rest' is assigned a value but never used.","'msmeDocId' is assigned a value but never used.","'BlockedIcon' is defined but never used.","'ProgressIcon' is defined but never used.","'grey' is defined but never used.","'red' is defined but never used.","'invokeAPIGetRequest' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'navigationItems', and 'roles'. Either include them or remove the dependency array.",["1532"],"React Hook useEffect has missing dependencies: 'fieldOf' and 'moduleName'. Either include them or remove the dependency array.",["1533"],"'message' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data' and 't'. Either include them or remove the dependency array.",["1534"],"no-use-before-define","'uid' was used before it was defined.","usedBeforeDefined",["1525"],["1526"],"'PersonIcon' is defined but never used.","'PermIdentityIcon' is defined but never used.","'PeopleAltOutlinedIcon' is defined but never used.","'useSelector' is defined but never used.","'$' is defined but never used.","'testicon' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["1525"],["1526"],"'useNavigate' is defined but never used.","'useTranslation' is defined but never used.","'useDispatch' is defined but never used.","'Typography' is defined but never used.","'InputField' is defined but never used.","'setRows' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'display', 't', and 'uid'. Either include them or remove the dependency array.",["1535"],"'uid' is assigned a value but never used.","'axios' is defined but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 't'. Either include it or remove the dependency array.",["1536"],["1537"],"'Button' is defined but never used.","'Grid' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'id' is assigned a value but never used.","'navigation' is assigned a value but never used.","'error' is assigned a value but never used.","'selectLoading' is defined but never used.","'enquiryDetails' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'effect'. Either include it or remove the dependency array.",["1538"],"'makeStyles' is defined but never used.",["1539"],"'uploadInvoice' is assigned a value but never used.",["1525"],["1526"],"'useState' is defined but never used.",["1540"],"'takeLatest' is defined but never used.","'all' is defined but never used.","'selectIsFormSubmitted' is defined but never used.",["1541"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",["1525"],["1526"],"'delay' is defined but never used.","'selectRecipientGstinMappings' is defined but never used.","'selectAllDelmodes' is defined but never used.","'recipientDetails' is assigned a value but never used.",["1542"],"'recipients' is assigned a value but never used.","'gstinList' is assigned a value but never used.",["1543"],"'remarks' is assigned a value but never used.","'DataGrid' is defined but never used.","'EnquiryListS' is defined but never used.",["1544"],"'setTid' is assigned a value but never used.","'display' is assigned a value but never used.","'setDisplay' is assigned a value but never used.",["1545"],["1546"],"'useFilter' is defined but never used.","'starredVal' is assigned a value but never used.","'setStarredVal' is assigned a value but never used.",["1547"],"'getAllList' is assigned a value but never used.","'isSubmitted' is assigned a value but never used.",["1548"],"'InputAdornment' is defined but never used.","'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'DialogActions' is defined but never used.","'useFormikContext' is defined but never used.","'_Input' is defined but never used.","'vendorList' is assigned a value but never used.","'loading' is assigned a value but never used.","'selectedId' is assigned a value but never used.","'openSearch' is assigned a value but never used.","'setMyobj' is assigned a value but never used.","'getID' is assigned a value but never used.","'setGetID' is assigned a value but never used.","'taskData' is assigned a value but never used.","'setTaskData' is assigned a value but never used.",["1549"],"'viewSearch' is assigned a value but never used.","'submitFormSearch' is assigned a value but never used.","'closeSearch' is assigned a value but never used.","'columns' is assigned a value but never used.","'_loadRows' is assigned a value but never used.","'rows' is assigned a value but never used.","'handleRecipientClick' is assigned a value but never used.",["1550"],"'Navigation' is defined but never used.","'NavigatorFun' is defined but never used.","'invokeGetRequest' is defined but never used.","'searchvendorList' is defined but never used.",["1551"],"'isupdated' is assigned a value but never used.",["1552"],"React Hook useEffect has a missing dependency: '_items'. Either include it or remove the dependency array.",["1553"],"'Attachments' is defined but never used.","no-dupe-keys","Duplicate key 'vehicleno'.","ObjectExpression",["1554"],"Expected '!==' and instead saw '!='.","'saveForm' is assigned a value but never used.","'IconButton' is defined but never used.","'SearchIcon' is defined but never used.","'forEach' is defined but never used.",["1555"],"'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array.",["1556"],"Duplicate key 'state_cess_rate_ad_valorem'.","'selectVendorList' is defined but never used.","'useInvoiceSlice' is defined but never used.","'Vendorform' is defined but never used.","'id' is defined but never used.","'getPartnerID' is assigned a value but never used.","'searchvendorList' is assigned a value but never used.",["1557"],"'handleSearch' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'GridUploader' is defined but never used.","'FieldArray' is defined but never used.","'_files' is assigned a value but never used.","'setFiles' is assigned a value but never used.","'dispatch' is defined but never used.","'actions' is defined but never used.","'useJsonInvoiceSlice' is defined but never used.","'selectinvDoc' is defined but never used.","'selectinvJsn' is defined but never used.","'folderId' is assigned a value but never used.","'title' is assigned a value but never used.","'marginleft' is assigned a value but never used.","'marginright' is assigned a value but never used.","React Hook useEffect has missing dependencies: '_items' and 'items'. Either include them or remove the dependency array.",["1558"],"'inpVal' is assigned a value but never used.","'sagaChangeTab' is defined but never used.","'sagaUploadInvoice' is defined but never used.","'sagaLoadExistingInvoiceDetails' is defined but never used.",["1559"],["1560"],["1561"],"'GET_ALL_INVOICES' is assigned a value but never used.",["1562"],"react/jsx-pascal-case","Imported JSX component _Input must be in PascalCase or SCREAMING_SNAKE_CASE",["1563"],["1564"],["1565"],["1566"],"no-global-assign","no-unsafe-negation",{"desc":"1567","fix":"1568"},{"desc":"1569","fix":"1570"},{"desc":"1571","fix":"1572"},{"desc":"1573","fix":"1574"},{"desc":"1575","fix":"1576"},{"desc":"1577","fix":"1578"},{"desc":"1579","fix":"1580"},{"desc":"1581","fix":"1582"},{"desc":"1583","fix":"1584"},{"desc":"1585","fix":"1586"},{"desc":"1581","fix":"1587"},{"desc":"1588","fix":"1589"},{"desc":"1588","fix":"1590"},{"desc":"1588","fix":"1591"},{"desc":"1588","fix":"1592"},{"desc":"1588","fix":"1593"},{"desc":"1588","fix":"1594"},{"desc":"1588","fix":"1595"},{"desc":"1588","fix":"1596"},{"desc":"1588","fix":"1597"},{"desc":"1588","fix":"1598"},{"desc":"1581","fix":"1599"},{"desc":"1588","fix":"1600"},{"desc":"1588","fix":"1601"},{"desc":"1588","fix":"1602"},{"desc":"1588","fix":"1603"},{"desc":"1604","fix":"1605"},{"desc":"1588","fix":"1606"},{"desc":"1607","fix":"1608"},{"desc":"1609","fix":"1610"},{"desc":"1607","fix":"1611"},{"desc":"1612","fix":"1613"},{"desc":"1607","fix":"1614"},{"desc":"1588","fix":"1615"},{"desc":"1588","fix":"1616"},{"desc":"1588","fix":"1617"},{"desc":"1607","fix":"1618"},{"desc":"1607","fix":"1619"},{"desc":"1609","fix":"1620"},{"desc":"1609","fix":"1621"},"Update the dependencies array to be: [conform, data]",{"range":"1622","text":"1623"},"Update the dependencies array to be: [navigate]",{"range":"1624","text":"1625"},"Update the dependencies array to be: [resgistrartionId]",{"range":"1626","text":"1627"},"Update the dependencies array to be: [registrartionId]",{"range":"1628","text":"1629"},"Update the dependencies array to be: [actions, dispatch]",{"range":"1630","text":"1631"},"Update the dependencies array to be: [dispatch, navigationItems, roles]",{"range":"1632","text":"1633"},"Update the dependencies array to be: [fieldOf, moduleName]",{"range":"1634","text":"1635"},"Update the dependencies array to be: [data, t]",{"range":"1636","text":"1637"},"Update the dependencies array to be: [display, t, uid]",{"range":"1638","text":"1639"},"Update the dependencies array to be: [t]",{"range":"1640","text":"1641"},{"range":"1642","text":"1637"},"Update the dependencies array to be: [effect]",{"range":"1643","text":"1644"},{"range":"1645","text":"1644"},{"range":"1646","text":"1644"},{"range":"1647","text":"1644"},{"range":"1648","text":"1644"},{"range":"1649","text":"1644"},{"range":"1650","text":"1644"},{"range":"1651","text":"1644"},{"range":"1652","text":"1644"},{"range":"1653","text":"1644"},{"range":"1654","text":"1637"},{"range":"1655","text":"1644"},{"range":"1656","text":"1644"},{"range":"1657","text":"1644"},{"range":"1658","text":"1644"},"Update the dependencies array to be: [_items]",{"range":"1659","text":"1660"},{"range":"1661","text":"1644"},"Update the dependencies array to be: [actions, dispatch, openSearch]",{"range":"1662","text":"1663"},"Update the dependencies array to be: [index, item]",{"range":"1664","text":"1665"},{"range":"1666","text":"1663"},"Update the dependencies array to be: [_items, items]",{"range":"1667","text":"1668"},{"range":"1669","text":"1663"},{"range":"1670","text":"1644"},{"range":"1671","text":"1644"},{"range":"1672","text":"1644"},{"range":"1673","text":"1663"},{"range":"1674","text":"1663"},{"range":"1675","text":"1665"},{"range":"1676","text":"1665"},[12803,12812],"[conform, data]",[1447,1449],"[navigate]",[5618,5620],"[resgistrartionId]",[3949,3951],"[registrartionId]",[1417,1419],"[actions, dispatch]",[1737,1739],"[dispatch, navigationItems, roles]",[1272,1274],"[fieldOf, moduleName]",[1607,1609],"[data, t]",[2333,2335],"[display, t, uid]",[2033,2035],"[t]",[1537,1539],[1296,1298],"[effect]",[2065,2067],[932,934],[2679,2681],[1207,1209],[3174,3176],[1832,1834],[1164,1186],[1009,1011],[4764,4766],[1574,1576],[2256,2258],[1206,1208],[1244,1246],[2415,2417],[1409,1411],"[_items]",[4146,4148],[1067,1079],"[actions, dispatch, openSearch]",[1800,1807],"[index, item]",[1663,1675],[1964,1966],"[_items, items]",[1084,1096],[4353,4355],[4155,4157],[2593,2595],[1067,1079],[1067,1079],[1803,1810],[1803,1810]]